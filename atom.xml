<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>L66</title>
  
  <subtitle>胜天半子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://l66stbz.github.io/"/>
  <updated>2024-09-07T11:39:14.373Z</updated>
  <id>https://l66stbz.github.io/</id>
  
  <author>
    <name>L66</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>若依项目动静分离</title>
    <link href="https://l66stbz.github.io/2024/09/09/%E8%8B%A5%E4%BE%9D%E9%A1%B9%E7%9B%AE%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/%E8%8B%A5%E4%BE%9D%E9%A1%B9%E7%9B%AE%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0/"/>
    <id>https://l66stbz.github.io/2024/09/09/%E8%8B%A5%E4%BE%9D%E9%A1%B9%E7%9B%AE%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/%E8%8B%A5%E4%BE%9D%E9%A1%B9%E7%9B%AE%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0/</id>
    <published>2024-09-09T13:50:00.000Z</published>
    <updated>2024-09-07T11:39:14.373Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="若依项目动静分离项目实现"><a href="#若依项目动静分离项目实现" class="headerlink" title="若依项目动静分离项目实现"></a>若依项目动静分离项目实现</h1><p>[TOC]</p><p>若依（RuoYi）是一款基于 Spring Boot + Spring Security + MyBatis 的快速开发框架，提供了简洁的代码生成、权限管理、用户管理等功能，适用于企业后台管理系统的快速搭建。动静分离是若依项目架构的一部分，旨在提高系统的性能和安全性。</p><h4 id="若依动静分离的典型架构："><a href="#若依动静分离的典型架构：" class="headerlink" title="若依动静分离的典型架构："></a>若依动静分离的典型架构：</h4><ol><li><strong>前端（RuoYi-Vue）</strong>：<ul><li>前端使用 Vue.js 框架进行开发，构建了一个单页面应用程序（SPA）。</li><li>前端代码通过 Vue CLI 编译和打包为静态文件（如 HTML、CSS、JavaScript）。</li></ul></li><li><strong>后端（RuoYi-Admin）</strong>：<ul><li>后端基于 Spring Boot，提供 RESTful API 服务，处理业务逻辑、数据库操作和权限管理。</li><li>后端不再直接处理静态资源请求，专注于处理动态请求，如 API 调用和业务处理。</li></ul></li></ol><h3 id="1、服务需求"><a href="#1、服务需求" class="headerlink" title="1、服务需求"></a>1、服务需求</h3><ul><li>MySQL5.7：后端存储</li><li>Redis 6.0：缓存</li><li>Nginx 1.24：前端项目</li><li>jdk 1.8</li><li>maven：编译后端项目</li><li>nodejs：编译前端项目</li></ul><h3 id="2、环境安装"><a href="#2、环境安装" class="headerlink" title="2、环境安装"></a>2、环境安装</h3><h4 id="1-MySQL5-7安装与配置"><a href="#1-MySQL5-7安装与配置" class="headerlink" title="1. MySQL5.7安装与配置"></a>1. MySQL5.7安装与配置</h4><ol><li><strong>安装MySQL5.7</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 卸载旧依赖</span></span><br><span class="line">[root@ruoyi ~]<span class="comment"># yum erase mariadb mariadb-server mariadb-libs mariadb-devel -y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 安装wget</span></span><br><span class="line">[root@ruoyi ~]<span class="comment"># yum install -y wget yum-utils git</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 安装MySQL 安装源</span></span><br><span class="line">[root@ruoyi ~]<span class="comment"># wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span></span><br><span class="line">[root@ruoyi ~]<span class="comment"># yum install -y mysql80-community-release-el7-3.noarch.rpm </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 启动MySQL5.7安装源</span></span><br><span class="line">[root@ruoyi ~]<span class="comment"># vim /etc/yum.repos.d/mysql-community.repo</span></span><br></pre></td></tr></table></figure><p><img src="/2024/09/09/%E8%8B%A5%E4%BE%9D%E9%A1%B9%E7%9B%AE%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/%E8%8B%A5%E4%BE%9D%E9%A1%B9%E7%9B%AE%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0/1.png" alt="image-20240816204911175"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ruoyi ~]# vim /etc/yum.repos.d/mysql-community-source.repo</span><br></pre></td></tr></table></figure><p><img src="/2024/09/09/%E8%8B%A5%E4%BE%9D%E9%A1%B9%E7%9B%AE%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/%E8%8B%A5%E4%BE%9D%E9%A1%B9%E7%9B%AE%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0/2.png" alt="image-20240816204953072"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 安装MySQL5.7</span></span><br><span class="line">[root@ruoyi ~]# yum install -y mysql-community-server</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 启动MySQL</span></span><br><span class="line">[root@ruoyi ~]# systemctl enable --now mysqld</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 查看密码</span></span><br><span class="line">[root@ruoyi ~]# grep "password"  /var/log/mysqld.log</span><br><span class="line">2024-08-16T12:58:32.136381Z 1 [Note] A temporary password is generated for root@localhost: )Q#B=;Nvf2jp</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>修改root密码与主机连接地址</strong></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 登录MySQL</span></span><br><span class="line">[root@ruoyi ~]<span class="comment"># mysql -uroot -p')Q#B=;Nvf2jp'</span></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 修改root密码为Abc123456;</span></span><br><span class="line">mysql&gt; SET PASSWORD = PASSWORD('Abc123456;');</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 设置root用户远程登录</span></span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'Abc123456;' WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 刷新权限</span></span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>修改配置文件</strong></li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[root@ruoyi ~]</span><span class="comment"># vim /etc/my.cnf</span></span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="attr">default-time_zone</span> = <span class="string">'+8:00'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建数据库添加的配置信息</span></span><br><span class="line"><span class="attr">lower_case_table_names</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="attr">collation-server</span>=utf8_general_ci</span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">10000</span></span><br><span class="line"><span class="attr">sql_mode</span>=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class="line"></span><br><span class="line"><span class="attr">datadir</span>=/var/lib/mysql</span><br><span class="line"><span class="attr">socket</span>=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line"><span class="attr">symbolic-links</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 重启MySQL</span></span><br><span class="line"><span class="section">[root@ruoyi ~]</span><span class="comment"># systemctl restart mysqld</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>拉取源码</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@ruoyi ~]# git clone https://gitee.com/y_project/RuoYi-Vue.git</span><br><span class="line">正克隆到 'RuoYi-Vue'...</span><br><span class="line">remote: Enumerating objects: 16754, done.</span><br><span class="line">remote: Counting objects: 100% (261/261), done.</span><br><span class="line">remote: Compressing objects: 100% (166/166), done.</span><br><span class="line">remote: Total 16754 (delta 64), reused 145 (delta 34), pack-reused 16493</span><br><span class="line">接收对象中: 100% (16754/16754), 4.02 MiB | 2.92 MiB/s, done.</span><br><span class="line">处理 delta 中: 100% (8472/8472), done.</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>导入数据表</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 创建数据库</span></span><br><span class="line">[root@ruoyi ~]<span class="comment"># mysql -uroot -p'Abc123456;'</span></span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE DATABASE ruoyi CHARACTER SET utf8mb4;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 切换目录</span></span><br><span class="line">[root@ruoyi sql]<span class="comment"># cd /root/RuoYi-Vue/sql/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 导入数据</span></span><br><span class="line">[root@ruoyi sql]<span class="comment"># mysql -uroot -p'Abc123456;'  ruoyi &lt; ry_20240629.sql </span></span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">[root@ruoyi sql]<span class="comment"># mysql -uroot -p'Abc123456;'  ruoyi &lt; quartz.sql </span></span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看数据是否导入</span></span><br><span class="line">略</span><br></pre></td></tr></table></figure><h4 id="2-Redis安装和配置"><a href="#2-Redis安装和配置" class="headerlink" title="2. Redis安装和配置"></a>2. Redis安装和配置</h4><ol><li><strong>安装</strong></li></ol><p>​        略</p><ol start="2"><li><strong>配置修改</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 修改配置文件</span></span><br><span class="line">[root@redis-server ~]<span class="comment"># vim /usr/local/redis/redis.conf </span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">daemonize yes</span><br><span class="line">logfile <span class="string">"/var/log/redis.log"</span></span><br><span class="line">requirepass 123456</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 启动redis</span></span><br><span class="line">[root@redis-server ~]<span class="comment"># cd /usr/local/redis/src/</span></span><br><span class="line">[root@redis-server src]<span class="comment"># ./redis-server  ../redis.conf </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 测试redis</span></span><br><span class="line">[root@redis-server src]<span class="comment"># ./redis-cli </span></span><br><span class="line">127.0.0.1:6379&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure><h4 id="3-nginx安装"><a href="#3-nginx安装" class="headerlink" title="3. nginx安装"></a>3. nginx安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ruoyi sql]<span class="comment"># yum install -y nginx</span></span><br></pre></td></tr></table></figure><h4 id="4-安装JDK1-8"><a href="#4-安装JDK1-8" class="headerlink" title="4. 安装JDK1.8"></a>4. 安装JDK1.8</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@ruoyi ~]<span class="comment"># ls</span></span><br><span class="line">jdk-8u211-linux-x64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 解压安装包</span></span><br><span class="line">[root@ruoyi ~]<span class="comment"># tar xf jdk-8u211-linux-x64.tar.gz  -C /usr/local/ &amp;&amp; cd /usr/local/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 更改目录名称</span></span><br><span class="line">[root@ruoyi <span class="built_in">local</span>]<span class="comment"># mv jdk1.8.0_211/ java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 声明环境变量</span></span><br><span class="line">[root@ruoyi <span class="built_in">local</span>]<span class="comment"># cat &gt;&gt; /etc/profile.d/jdk.sh &lt;&lt;-EOF</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 指定java安装目录</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java</span><br><span class="line"><span class="comment"># 用于指定java系统查找命令的路径</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/jre/bin:<span class="variable">$PATH</span> </span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 重新加载环境变量</span></span><br><span class="line">[root@ruoyi <span class="built_in">local</span>]<span class="comment"># source /etc/profile.d/jdk.sh </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 测试</span></span><br><span class="line">[root@ruoyi <span class="built_in">local</span>]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">"1.8.0_211"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_211-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.211-b12, mixed mode)</span><br></pre></td></tr></table></figure><h4 id="5-安装maven"><a href="#5-安装maven" class="headerlink" title="5. 安装maven"></a>5. 安装maven</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 解压安装包</span></span><br><span class="line">[root@ruoyi ~]<span class="comment"># tar xf apache-maven-3.9.6-bin.tar.gz  -C /usr/local/ &amp;&amp; cd /usr/local/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 声明maven环境变量</span></span><br><span class="line">[root@ruoyi <span class="built_in">local</span>]<span class="comment"># cat &gt;&gt; /etc/profile.d/mvn.sh &lt;&lt;EOF</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/usr/<span class="built_in">local</span>/apache-maven-3.9.6/</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$MAVEN_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 重新加载环境变量</span></span><br><span class="line">[root@ruoyi <span class="built_in">local</span>]<span class="comment"># source /etc/profile.d/mvn.sh </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 测试使用</span></span><br><span class="line">[root@ruoyi <span class="built_in">local</span>]<span class="comment"># mvn -v</span></span><br><span class="line">Apache Maven 3.9.6 (bc0240f3c744dd6b6ec2920b3cd08dcc295161ae)</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#&gt;&gt;&gt; 修改mvn插件拉取地址</span><br><span class="line">[root@localhost ~]# vim /usr/local/apache-maven-3.9.6/conf/settings.xml </span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>一般在maven安装目录的<code>/usr/local/apache-maven-3.9.6/conf/settings.xml</code>，在<code>&lt;mirrors&gt;&lt;/mirrors&gt;</code>标签中添加 mirror 子节点</p></blockquote><h4 id="6-安装nodejs"><a href="#6-安装nodejs" class="headerlink" title="6. 安装nodejs"></a>6. 安装nodejs</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 解压安装包</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar xf node-v16.13.0-linux-x64.tar.xz  -C /usr/local/ &amp;&amp; cd /usr/local/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 创建软链接</span></span><br><span class="line">[root@localhost <span class="built_in">local</span>]<span class="comment"># ln -s node-v16.13.0-linux-x64  node</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 声明环境变量</span></span><br><span class="line">[root@localhost node]<span class="comment"># cat &gt;&gt; /etc/profile.d/node.sh &lt;&lt;-EOF</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> NODE_HOME=/usr/<span class="built_in">local</span>/node</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$NODE_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> NODE_PATH=<span class="variable">$NODE_HOME</span>/lib/node_mudules</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 重新加载配置文件</span></span><br><span class="line">[root@localhost node]<span class="comment"># source  /etc/profile.d/node.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 测试是否安装成功</span></span><br><span class="line">[root@localhost node]<span class="comment"># node -v</span></span><br><span class="line">v16.13.0</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;创建node相关命令软链接</span></span><br><span class="line">[root@localhost node]<span class="comment"># ln -s /usr/local/node/bin/node /usr/local/bin/node</span></span><br><span class="line">[root@localhost node]<span class="comment"># ln -s /usr/local/node/bin/npm /usr/local/bin/npm</span></span><br></pre></td></tr></table></figure><h4 id="7-更改配置信息"><a href="#7-更改配置信息" class="headerlink" title="7. 更改配置信息"></a>7. 更改配置信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 切换目录</span></span><br><span class="line">$ <span class="built_in">cd</span> /root/RuoYi-Vue/ruoyi-admin/src/main/resources</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 更改数据库连接池</span></span><br><span class="line">[root@ruoyi resources]<span class="comment"># vim application-druid.yml</span></span><br></pre></td></tr></table></figure><p><img src="/2024/09/09/%E8%8B%A5%E4%BE%9D%E9%A1%B9%E7%9B%AE%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/%E8%8B%A5%E4%BE%9D%E9%A1%B9%E7%9B%AE%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0/3.png" alt="image-20240816220601158"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 更改redis连接池</span></span><br><span class="line">[root@ruoyi resources]<span class="comment"># vim application.yml</span></span><br></pre></td></tr></table></figure><p><img src="/2024/09/09/%E8%8B%A5%E4%BE%9D%E9%A1%B9%E7%9B%AE%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/%E8%8B%A5%E4%BE%9D%E9%A1%B9%E7%9B%AE%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0/4.png" alt="image-20240816220736591"></p><h4 id="8-后端应用打包"><a href="#8-后端应用打包" class="headerlink" title="8. 后端应用打包"></a>8. 后端应用打包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 切换目录</span></span><br><span class="line">[root@ruoyi ~]<span class="comment"># cd RuoYi-Vue/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 安装插件</span></span><br><span class="line">[root@ruoyi RuoYi-Vue]<span class="comment"># mvn install</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 切换后端代码目录</span></span><br><span class="line">[root@ruoyi RuoYi-Vue]<span class="comment"># cd ruoyi-admin/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 编译代码</span></span><br><span class="line">[root@ruoyi ruoyi-admin]<span class="comment"># mvn clean package</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看当前目录信息</span></span><br><span class="line">[root@ruoyi ruoyi-admin]<span class="comment"># ls</span></span><br><span class="line">pom.xml  src  target</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看jar包</span></span><br><span class="line">[root@ruoyi target]<span class="comment"># ls</span></span><br><span class="line">ruoyi-admin.jar</span><br></pre></td></tr></table></figure><h4 id="9-前端打包"><a href="#9-前端打包" class="headerlink" title="9. 前端打包"></a>9. 前端打包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 切换前端代码目录</span></span><br><span class="line">[root@ruoyi ruoyi-ui]<span class="comment"># cd /root/RuoYi-Vue/ruoyi-ui/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 安装插件</span></span><br><span class="line">[root@ruoyi ruoyi-ui]<span class="comment"># npm install -registry=http://npmmirror.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 安装cnpm</span></span><br><span class="line">[root@ruoyi ruoyi-ui]<span class="comment"># npm install -g cnpm -registry=http://registry.npmmirror.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 安装vue3</span></span><br><span class="line">[root@ruoyi ruoyi-ui]<span class="comment"># cnpm init vue@3.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 安装插件</span></span><br><span class="line">[root@ruoyi ruoyi-ui]<span class="comment"># cnpm install</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 编译前端代码</span></span><br><span class="line">[root@ruoyi ruoyi-ui]<span class="comment"># npm run build:prod</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看当前目录</span></span><br><span class="line">[root@ruoyi ruoyi-ui]<span class="comment"># ls</span></span><br><span class="line">dist</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 切换目录</span></span><br><span class="line">[root@ruoyi ruoyi-ui]<span class="comment"># cd dist/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看前端项目</span></span><br><span class="line">[root@ruoyi dist]<span class="comment"># ls</span></span><br><span class="line">favicon.ico  html  index.html  index.html.gz  robots.txt  static</span><br></pre></td></tr></table></figure><h4 id="10-前端项目部署"><a href="#10-前端项目部署" class="headerlink" title="10. 前端项目部署"></a>10. 前端项目部署</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 创建日志目录</span></span><br><span class="line">[root@ruoyi target]<span class="comment"># mkdir -p /opt/project/ruoyi/logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 创建前端项目存放目录</span></span><br><span class="line">[root@ruoyi target]<span class="comment"># mkdir -p /ruoyi/ruoyi-ui</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 拷贝前端项目到指定目录</span></span><br><span class="line">[root@ruoyi target]<span class="comment"># cp -r /root/RuoYi-Vue/ruoyi-ui/dist  /ruoyi/ruoyi-ui</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; nginx配置文件准备</span></span><br><span class="line">[root@ruoyi ruoyi-ui]<span class="comment"># vim /etc/nginx/conf.d/default.conf </span></span><br><span class="line">server &#123;</span><br><span class="line">location / &#123;</span><br><span class="line">    root   /ruoyi/ruoyi-ui/dist;</span><br><span class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /prod-api/ &#123;</span><br><span class="line">    proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">    proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    proxy_set_header REMOTE-HOST <span class="variable">$remote_addr</span>;</span><br><span class="line">    proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    proxy_pass http://127.0.0.1:8080/;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 检查语法格式</span></span><br><span class="line">[root@ruoyi ruoyi-ui]<span class="comment"># nginx -t</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 启动nginx</span></span><br><span class="line">[root@ruoyi ruoyi-ui]<span class="comment"># systemctl enable --now nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 检查nginx启动情况</span></span><br><span class="line">[root@ruoyi ruoyi-ui]<span class="comment"># systemctl status nginx</span></span><br></pre></td></tr></table></figure><h4 id="11-后端部署"><a href="#11-后端部署" class="headerlink" title="11. 后端部署"></a>11. 后端部署</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 切换目录</span></span><br><span class="line">[root@ruoyi ruoyi-ui]<span class="comment"># cd /root/RuoYi-Vue/ruoyi-admin/target</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 启动jar包</span></span><br><span class="line">[root@ruoyi target]<span class="comment"># nohup  java -jar ruoyi-admin.jar &amp;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看启动日志</span></span><br><span class="line">[root@ruoyi target]<span class="comment"># tail -f nohup.out</span></span><br></pre></td></tr></table></figure><p><img src="/2024/09/09/%E8%8B%A5%E4%BE%9D%E9%A1%B9%E7%9B%AE%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/%E8%8B%A5%E4%BE%9D%E9%A1%B9%E7%9B%AE%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0/5.png" alt="image-20240817230157499"></p><h4 id="12-访问应用"><a href="#12-访问应用" class="headerlink" title="12. 访问应用"></a>12. 访问应用</h4><p><a href="http://192.168.174.41" target="_blank" rel="noopener">http://192.168.174.41</a></p><p><img src="/2024/09/09/%E8%8B%A5%E4%BE%9D%E9%A1%B9%E7%9B%AE%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/%E8%8B%A5%E4%BE%9D%E9%A1%B9%E7%9B%AE%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0/6.png" alt="image-20240817225111942"></p><h3 id="3、Redis数据解释"><a href="#3、Redis数据解释" class="headerlink" title="3、Redis数据解释"></a>3、Redis数据解释</h3><p>这些 Redis 中的键值是若依（RuoYi）系统中使用的配置项和字典数据。它们存储了系统的一些全局配置、字典项和设定，供系统各个模块使用。下面是对这些 Redis 键的详细解释：</p><ol><li><strong><code>sys_config:sys.index.sideTheme</code></strong></li></ol><ul><li><strong>解释</strong>：这个键用于存储系统首页侧边栏的主题配置，通常决定了系统 UI 的侧边栏风格（比如浅色、深色等）。</li></ul><ol start="2"><li><strong><code>sys_dict:sys_oper_type</code></strong></li></ol><ul><li><strong>解释</strong>：这是一个字典数据键，存储操作类型的字典值。比如系统中的操作类型（查询、删除、编辑等），这些值用于前端选择框或其他界面。</li></ul><ol start="3"><li><strong><code>sys_config:sys.index.skinName</code></strong></li></ol><ul><li><strong>解释</strong>：这个键存储系统首页皮肤名称配置，决定了系统 UI 的皮肤样式（比如默认皮肤、蓝色皮肤等）。</li></ul><ol start="4"><li><strong><code>sys_dict:sys_notice_type</code></strong></li></ol><ul><li><strong>解释</strong>：这是一个字典数据键，存储系统中公告的类型（如通知、公告、系统消息等）。这些字典数据通常用于公告管理模块中。</li></ul><ol start="5"><li><strong><code>sys_config:sys.login.blackIPList</code></strong></li></ol><ul><li><strong>解释</strong>：这个键用于存储系统登录的黑名单 IP 列表，防止黑名单中的 IP 地址登录系统，提升系统的安全性。</li></ul><ol start="6"><li><strong><code>sys_dict:sys_notice_status</code></strong></li></ol><ul><li><strong>解释</strong>：这是一个字典数据键，存储系统公告的状态信息（如已发布、草稿等）。公告管理中会根据这个状态来区分公告的当前状态。</li></ul><ol start="7"><li><strong><code>sys_config:sys.account.registerUser</code></strong></li></ol><ul><li><strong>解释</strong>：这个键用于存储系统是否允许用户注册的配置（例如，是否启用用户自注册功能）。</li></ul><ol start="8"><li><strong><code>sys_dict:sys_normal_disable</code></strong></li></ol><ul><li><strong>解释</strong>：这是一个字典数据键，存储通用的启用/禁用状态。这通常用于各类表单或功能开关的状态选项（如是否启用某项功能）。</li></ul><ol start="9"><li><strong><code>sys_dict:sys_yes_no</code></strong></li></ol><ul><li><strong>解释</strong>：这是一个字典数据键，存储系统中通用的“是/否”选项，供选择题型的问题或功能开关使用。</li></ul><ol start="10"><li><strong><code>sys_dict:sys_common_status</code></strong></li></ol><ul><li><strong>解释</strong>：这是一个字典数据键，存储通用的状态信息，通常用于描述资源的状态，如启用、停用、正常、异常等。</li></ul><ol start="11"><li><strong><code>sys_config:sys.user.initPassword</code></strong></li></ol><ul><li><strong>解释</strong>：这个键用于存储系统中新用户的初始化密码配置。新用户注册或管理员创建新用户时，系统会自动设置该初始化密码。</li></ul><ol start="12"><li><strong><code>sys_dict:sys_user_sex</code></strong></li></ol><ul><li><strong>解释</strong>：这是一个字典数据键，存储用户性别的字典选项（如男性、女性、未知），用于用户信息表单中的性别选择框。</li></ul><ol start="13"><li><strong><code>sys_config:sys.account.captchaEnabled</code></strong></li></ol><ul><li><strong>解释</strong>：这个键用于存储系统是否启用登录验证码功能的配置。启用后，在用户登录时会要求输入验证码以提高安全性。</li></ul><ol start="14"><li><strong><code>sys_dict:sys_job_status</code></strong></li></ol><ul><li><strong>解释</strong>：这是一个字典数据键，存储任务调度（如定时任务）中的任务状态（如正常、暂停等），用于描述当前任务的执行情况。</li></ul><ol start="15"><li><strong><code>sys_dict:sys_show_hide</code></strong></li></ol><ul><li><strong>解释</strong>：这是一个字典数据键，存储系统中通用的显示/隐藏状态，常用于控制某些 UI 元素或功能是否在页面上显示。</li></ul><ol start="16"><li><strong><code>sys_dict:sys_job_group</code></strong></li></ol><ul><li><strong>解释</strong>：这是一个字典数据键，存储定时任务的任务组别信息。定时任务可以根据分组来组织和管理不同的任务。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://l66stbz.github.io/tags/Linux/"/>
    
      <category term="MySQL" scheme="https://l66stbz.github.io/tags/MySQL/"/>
    
      <category term="Redis" scheme="https://l66stbz.github.io/tags/Redis/"/>
    
      <category term="Nginx" scheme="https://l66stbz.github.io/tags/Nginx/"/>
    
      <category term="Maven" scheme="https://l66stbz.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>https证书申请</title>
    <link href="https://l66stbz.github.io/2024/09/08/https%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7/%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E6%B5%81%E7%A8%8B/"/>
    <id>https://l66stbz.github.io/2024/09/08/https%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7/%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E6%B5%81%E7%A8%8B/</id>
    <published>2024-09-08T13:50:00.000Z</published>
    <updated>2024-09-07T13:15:41.676Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="https证书申请流程"><a href="#https证书申请流程" class="headerlink" title="https证书申请流程"></a>https证书申请流程</h1><p>申请地址：<a href="https://certbot.eff.org" target="_blank" rel="noopener">https://certbot.eff.org</a></p><p>环境准备：</p><ul><li>一台centos 7 LInux操作系统主机，并且能够<code>正常上网</code>；</li><li><code>真实域名</code>。</li></ul><p><img src="/2024/09/08/https%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7/%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E6%B5%81%E7%A8%8B/1.png" alt="image-20240907172819897"></p><p><img src="/2024/09/08/https%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7/%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E6%B5%81%E7%A8%8B/2.png" alt="image-20240318184845187"></p><p><img src="/2024/09/08/https%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7/%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E6%B5%81%E7%A8%8B/3.png" alt="image-20240318184912074"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/yum.repos.d/nginx.repo</span></span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install -y epel-release</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum makecache fast</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install -y snapd nginx</span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl enable --now snapd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ln -s /var/lib/snapd/snap /snap</span></span><br><span class="line">[root@localhost ~]<span class="comment"># snap --help</span></span><br><span class="line">The snap <span class="built_in">command</span> lets you install, configure, refresh and remove snaps.</span><br><span class="line">Snaps are packages that work across many different Linux distributions,</span><br><span class="line">enabling secure delivery and operation of the latest apps and utilities.</span><br><span class="line"></span><br><span class="line">Usage: snap &lt;<span class="built_in">command</span>&gt; [&lt;options&gt;...]</span><br><span class="line"></span><br><span class="line">Commonly used commands can be classified as follows:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Certbot软件包，并使用了--classic标志(经典模式)</span></span><br><span class="line">[root@localhost ~]<span class="comment"># snap install --classic certbot</span></span><br><span class="line">Warning: /var/lib/snapd/snap/bin was not found <span class="keyword">in</span> your <span class="variable">$PATH</span>. If you<span class="string">'ve not restarted your session</span></span><br><span class="line"><span class="string">         since you installed snapd, try doing that. Please see https://forum.snapcraft.io/t/9469</span></span><br><span class="line"><span class="string">         for more details.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">certbot 2.9.0 from Certbot Project (certbot-eff✓) installed</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@localhost ~]# ln -s /snap/bin/certbot /usr/bin/certbot</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@localhost ~]# certbot certonly --manual --preferred-challenges dns -d *.tanke.love</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># certbot certonly --manual --preferred-challenges dns -d *.tanke.love 这条命令用于使用Certbot工具获取SSL/TLS证书。</span></span><br><span class="line"><span class="string"># 具体解释如下：</span></span><br><span class="line"><span class="string">certbot: 是Certbot的命令行工具，用于管理SSL/TLS证书。</span></span><br><span class="line"><span class="string">certonly: 表示只获取证书而不配置自动更新和续订。</span></span><br><span class="line"><span class="string">--manual: 指定手动验证模式，即通过手动创建验证文件来证明域名所有权。</span></span><br><span class="line"><span class="string">--preferred-challenges dns: 指定首选的验证方式为DNS（DNS challenge），即通过在DNS记录中添加特定的TXT记录来证明域名所有权。</span></span><br><span class="line"><span class="string">-d *.tanke.love: 指定要获取证书的域名，这里包括tanke.love和以*.tanke.love开头的所有子域名。</span></span><br><span class="line"><span class="string">综上所述，该命令的作用是使用Certbot工具，通过手动验证模式和DNS挑战方式，为tanke.love和以*.tanke.love开头的所有子域名获取SSL/TLS证书。</span></span><br></pre></td></tr></table></figure><p><img src="/2024/09/08/https%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7/%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E6%B5%81%E7%A8%8B/4.png" alt="image-20240318185145827"></p><blockquote><p>之后一直按两次回车</p></blockquote><p><img src="/2024/09/08/https%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7/%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E6%B5%81%E7%A8%8B/5.png" alt="image-20240318185406394"></p><p>登录购买域名的云厂商</p><p><img src="/2024/09/08/https%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7/%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E6%B5%81%E7%A8%8B/6.png" alt="image-20240318185524734"></p><p><img src="/2024/09/08/https%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7/%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E6%B5%81%E7%A8%8B/7.png" alt="报错"></p><blockquote><p>如果出现上述报错则重新生成证书：</p><p><code>certbot certonly --manual --preferred-challenges dns -d tanke.love,*.tanke.love -v</code></p></blockquote><p><img src="/2024/09/08/https%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7/%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E6%B5%81%E7%A8%8B/8.png" alt="image-20240318185643750"></p><blockquote><p>证书、私钥存放处</p></blockquote><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动nginx</span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl  enable --now nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/nginx/conf.d/default.conf </span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  test.tanke.love;</span><br><span class="line">    location / &#123;</span><br><span class="line">      rewrite ^(.*)$  https://test.tanke.love<span class="variable">$1</span> permanent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen     443 ssl;</span><br><span class="line">    server_name test.tanke.love;</span><br><span class="line">    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line">    ssl_certificate     /etc/letsencrypt/live/tanke.love/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/tanke.love/privkey.pem;</span><br><span class="line">    ssl_ciphers         HIGH:!aNULL:!MD5;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查语法</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nginx -t</span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启nginx</span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl restart nginx</span></span><br></pre></td></tr></table></figure><p>访问nginx</p><p><img src="/2024/09/08/https%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7/%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E6%B5%81%E7%A8%8B/9.png" alt="image-20240318190036735"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://l66stbz.github.io/tags/Linux/"/>
    
      <category term="https" scheme="https://l66stbz.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins_webhooks自动触发</title>
    <link href="https://l66stbz.github.io/2024/09/07/Jenkins_webhooks%E8%87%AA%E5%8A%A8%E8%A7%A6%E5%8F%91/Jenkins_webhooks%E8%87%AA%E5%8A%A8%E8%A7%A6%E5%8F%91/"/>
    <id>https://l66stbz.github.io/2024/09/07/Jenkins_webhooks%E8%87%AA%E5%8A%A8%E8%A7%A6%E5%8F%91/Jenkins_webhooks%E8%87%AA%E5%8A%A8%E8%A7%A6%E5%8F%91/</id>
    <published>2024-09-07T13:50:00.000Z</published>
    <updated>2024-09-07T02:53:46.357Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Jenkins-Gitlab-webhook触发自动构建项目"><a href="#Jenkins-Gitlab-webhook触发自动构建项目" class="headerlink" title="Jenkins+Gitlab webhook触发自动构建项目"></a>Jenkins+Gitlab webhook触发自动构建项目</h1><ul><li>效果：只要Gitlab仓库代码更新，Jenkins自动拉取代码，自动完成构建任务。无需手动点击“立即构建”或者”参数化构建”</li><li>需求场景：</li></ul><p>1、项目代码的更新迭代较多，运维很有可能不在场，每次点击比较麻烦<br>2、更新的可能不是代码，可能是一些资源（比如：静态文件等）<br>Jenkins版本：2.303.1 Gitlab版本：12.6.3</p><h3 id="安装配置Gitlab"><a href="#安装配置Gitlab" class="headerlink" title="安装配置Gitlab"></a>安装配置Gitlab</h3><p>Yum安装即可 ， 过程 略<br>Gitlab平台root用户密码配置为12345678</p><h5 id="创建一个项目-私有仓库"><a href="#创建一个项目-私有仓库" class="headerlink" title="创建一个项目(私有仓库)"></a>创建一个项目(私有仓库)</h5><p>准备测试代码：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339450086-a5163726-3591-49fb-ab72-99eaedb19147.png#averageHue=%23f8f8f7&clientId=u906c2411-8505-4&from=paste&id=u0ea14367&originHeight=764&originWidth=1410&originalType=url&ratio=1&rotation=0&showTitle=false&size=80118&status=done&style=none&taskId=ua1308608-2d59-4ea6-9bc4-95e56016842&title=" alt="image.png"></p><h3 id="后端服务器准备"><a href="#后端服务器准备" class="headerlink" title="后端服务器准备"></a>后端服务器准备</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-server ~]# tar -xvzf jdk-8u211-linux-x64.tar.gz  -C /usr/local/</span><br><span class="line">[root@docker-server ~]# cd /usr/local/</span><br><span class="line">[root@docker-server local]# mv jdk1.8.0_211/ java </span><br><span class="line">[root@docker-server local]# vim /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash">最文件最后面添加</span></span><br><span class="line">JAVA_HOME=/usr/local/java</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">[root@docker-server local]# source /etc/profile</span><br><span class="line">[root@docker-server local]# java -version</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1668657965540-c9e2d959-1187-43df-b9ef-ddd1bee4cede.png#averageHue=%23110f0d&clientId=u41b33c8d-0e66-4&from=paste&height=138&id=u4d5d4339&originHeight=172&originWidth=1077&originalType=binary&ratio=1&rotation=0&showTitle=false&size=19231&status=done&style=none&taskId=u2563c73e-477e-4119-bd5e-641d263bc45&title=&width=861.6" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-server ~]# tar -xvzf apache-tomcat-8.5.45.tar.gz -C /data/application/</span><br><span class="line">[root@docker-server application]# mv apache-tomcat-8.5.45/ tomcat</span><br><span class="line">[root@docker-server application]# ls</span><br><span class="line">tomcat</span><br><span class="line">[root@docker-server application]# rm -rf tomcat/webapps/*</span><br></pre></td></tr></table></figure><h3 id="安装配置Jenkins"><a href="#安装配置Jenkins" class="headerlink" title="安装配置Jenkins"></a>安装配置Jenkins</h3><hr><p>安装过程略<br>1.安装jdk<br>2.安装Tomcat<br>3.安装Maven（可选，不确定是否编译）<br>4.配置环境变量<br>5.启动</p><hr><h5 id="记得配置jdk和maven"><a href="#记得配置jdk和maven" class="headerlink" title="记得配置jdk和maven"></a>记得配置jdk和maven</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339450493-8b5749b0-cde5-4aab-b5f2-1a6ef40a9909.png#averageHue=%23fcf9f8&clientId=u906c2411-8505-4&from=paste&id=uaf1a0dd1&originHeight=559&originWidth=1391&originalType=url&ratio=1&rotation=0&showTitle=false&size=49698&status=done&style=none&taskId=u2630baa1-b1ae-4d23-9564-a817a95abd4&title=" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339450471-4e2975d3-907d-48a0-8ab3-7cede4a8e63e.png#averageHue=%23fcf8f7&clientId=u906c2411-8505-4&from=paste&id=ucd969ba5&originHeight=338&originWidth=1384&originalType=url&ratio=1&rotation=0&showTitle=false&size=27130&status=done&style=none&taskId=uccd2f5f8-02ec-4e5e-b0d4-fc7850fb24a&title=" alt="image.png"></p><h5 id="安装Gitlab-hooks-plugins插件"><a href="#安装Gitlab-hooks-plugins插件" class="headerlink" title="安装Gitlab hooks plugins插件"></a>安装Gitlab hooks plugins插件</h5><p>因为要用gitlab hook自动拉取代码的功能，需要安装GItlab hooks插件，才具有自动构建的功能<br>去“插件管理”页面，“可选插件”，搜索“Gitlab Hook Plugin”，“Gitlab”，点击“直接安装即可”<br><strong>注意：安装过程和网络有关。网络必须顺畅。且能正常连同国外Jenkins网站，才能下载成功</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339451257-03a9e617-4080-487c-9ef3-6eb31a83e03b.png#averageHue=%23f7f4f3&clientId=u906c2411-8505-4&from=paste&id=uec338be8&originHeight=396&originWidth=1429&originalType=url&ratio=1&rotation=0&showTitle=false&size=42412&status=done&style=none&taskId=u51a6ed98-1ca1-4f79-bca8-0b74c5b3227&title=" alt="image.png"></p><h5 id="新建Gitlab-webhook相关项目"><a href="#新建Gitlab-webhook相关项目" class="headerlink" title="新建Gitlab webhook相关项目"></a>新建Gitlab webhook相关项目</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339451477-659d9eb1-cbeb-4103-aa9c-9148c97deefb.png#averageHue=%23fdfbfa&clientId=u906c2411-8505-4&from=paste&id=u5579bbda&originHeight=357&originWidth=482&originalType=url&ratio=1&rotation=0&showTitle=false&size=56892&status=done&style=none&taskId=uf467cd17-d756-4ecc-86a6-c7c626fecd5&title=" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339451581-049775dc-c2d3-4896-aa6b-a9a9555035c4.png#averageHue=%23f2efee&clientId=u906c2411-8505-4&from=paste&id=u2952ff74&originHeight=741&originWidth=1182&originalType=url&ratio=1&rotation=0&showTitle=false&size=108445&status=done&style=none&taskId=u73c397ac-e471-4270-8b1c-47f43891084&title=" alt="image.png"><br>Jenkins具体配置<br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339451724-29d99afa-cd2c-4804-afc9-30bc3fc183e6.png#averageHue=%23f9f9f9&clientId=u906c2411-8505-4&from=paste&id=u97304910&originHeight=791&originWidth=1238&originalType=url&ratio=1&rotation=0&showTitle=false&size=61208&status=done&style=none&taskId=uece6411e-b5bd-4b15-9d39-73cd75a3c1d&title=" alt="image.png"><br>来到Gitlab的test1项目中，复制拉取地址<br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339451783-1ad11f51-3850-4b7b-9172-aa55d79c1202.png#averageHue=%23f4f2f0&clientId=u906c2411-8505-4&from=paste&id=u336e5830&originHeight=587&originWidth=1209&originalType=url&ratio=1&rotation=0&showTitle=false&size=72759&status=done&style=none&taskId=u3890b92b-f3fd-44ab-a2d3-03bd3a1dde2&title=" alt="image.png"><br>粘贴到<br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339452308-7ab21409-79fc-4f1b-a0c4-1b43dbf958cd.png#averageHue=%23f0eeee&clientId=u906c2411-8505-4&from=paste&id=u90026910&originHeight=384&originWidth=665&originalType=url&ratio=1&rotation=0&showTitle=false&size=81473&status=done&style=none&taskId=u91687a63-90c7-4783-8deb-ed083fb2b61&title=" alt="image.png"><br>出现一堆报红，正常！因为需要配置私钥和公钥<br>需要把Jenkins服务器的私钥，配置到test1项目中。把Jenkins服务器的公钥，配置到GItlab的服务里面。<br>这样拉取就可以免密了！<br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339452330-0558eb84-97cd-4798-9960-6a7361e52a94.png#averageHue=%23f6f4f3&clientId=u906c2411-8505-4&from=paste&id=u8baece68&originHeight=624&originWidth=1377&originalType=url&ratio=1&rotation=0&showTitle=false&size=58621&status=done&style=none&taskId=ua231ac47-f96c-4eb9-a34f-b050d49f1a7&title=" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins-server ~]# useradd jenkins </span><br><span class="line">[root@jenkins-server ~]# su - jenkins </span><br><span class="line">[jenkins@jenkins-server ~]$ ssh-keygen </span><br><span class="line">[jenkins@jenkins-server ~]$ cat .ssh/id_rsa #查看jenkins用户的私钥</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339452630-bcb3e967-f73e-491c-9560-6548e57cf3d7.png#averageHue=%23f2f2f2&clientId=u906c2411-8505-4&from=paste&id=u3e67ff06&originHeight=168&originWidth=701&originalType=url&ratio=1&rotation=0&showTitle=false&size=26907&status=done&style=none&taskId=uff4d170a-8b99-44a1-a528-dfa803e09e3&title=" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339452704-d7fadc16-7915-4eb9-92f4-0fa260f2a263.png#averageHue=%23f1efef&clientId=u906c2411-8505-4&from=paste&id=uec4fb4da&originHeight=445&originWidth=640&originalType=url&ratio=1&rotation=0&showTitle=false&size=80700&status=done&style=none&taskId=ud53d52df-5ef9-46fa-8ba7-798134dd06e&title=" alt="image.png"><br>看到仍然报红，将jenkins服务器上面的jenkins用户的公钥添加到gitlab中<br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339452746-df4fd441-7651-4747-afe0-ecd535e7b1f5.png#averageHue=%23f8f7f7&clientId=u906c2411-8505-4&from=paste&id=uef93001f&originHeight=364&originWidth=352&originalType=url&ratio=1&rotation=0&showTitle=false&size=17535&status=done&style=none&taskId=u89b0491e-45b0-4fb6-85b9-954fa5d8ac7&title=" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339453366-abb0080e-1cb3-4b37-9a9b-dd6ec542138a.png#averageHue=%23f8f7f6&clientId=u906c2411-8505-4&from=paste&id=ucc4739bd&originHeight=731&originWidth=376&originalType=url&ratio=1&rotation=0&showTitle=false&size=27394&status=done&style=none&taskId=ud2e08a0d-2a04-4074-aa59-01a7d3c96dc&title=" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339453499-a98b031a-9d85-483f-8ed2-d4d31a6d3ed7.png#averageHue=%23fdfdfd&clientId=u906c2411-8505-4&from=paste&id=uf11af350&originHeight=372&originWidth=639&originalType=url&ratio=1&rotation=0&showTitle=false&size=62599&status=done&style=none&taskId=u7173c5fa-9dfa-4608-aa6a-4f58ea5c259&title=" alt="image.png"><br>登录到jenkins服务器中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[jenkins@jenkins-server ~]$ cat .ssh/id_rsa.pub #查看jenkins用户的公钥</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339453533-430970e4-ad4f-4de0-be5a-222b39987336.png#averageHue=%23fcfcfb&clientId=u906c2411-8505-4&from=paste&id=uc9a106a7&originHeight=357&originWidth=679&originalType=url&ratio=1&rotation=0&showTitle=false&size=108115&status=done&style=none&taskId=u8d374270-1da8-4d2e-b356-ea18250588e&title=" alt="    "><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339453540-f7318326-a77c-453b-bd24-2d91e9e77fd3.png#averageHue=%23f2f0f0&clientId=u906c2411-8505-4&from=paste&id=uf8b8e17d&originHeight=635&originWidth=1154&originalType=url&ratio=1&rotation=0&showTitle=false&size=56319&status=done&style=none&taskId=u788919d7-2216-4ff0-a23a-802ffc58ae4&title=" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339454024-f8f61b4c-ec46-417f-bd59-a3a89927a1bc.png#averageHue=%23f8f6f6&clientId=u906c2411-8505-4&from=paste&id=u595c5040&originHeight=612&originWidth=1384&originalType=url&ratio=1&rotation=0&showTitle=false&size=56224&status=done&style=none&taskId=uae5c2893-4672-46ce-a7d2-7467d1641cd&title=" alt="image.png"></p><h5 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h5><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406062233805.png" alt="image-20240606223324696"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406062235372.png" alt="image-20240606223549283"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406062317898.png" alt="image-20240606231753843"><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406062319107.png" alt="image-20240606231934059"></p><blockquote><p>Token值作用：<br>        Jenkins Webhook Token值用于身份验证，确保只有拥有正确Token的服务器才能触发Jenkins上的构建或者部署等操作。这样做可以防止未经授权的用户触发Jenkins作业，从而保护你的Jenkins从脚本未授权访问。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339455074-c91f4733-2eb4-4b78-92e7-d6b59387f49b.png#averageHue=%23f8f8f8&clientId=u906c2411-8505-4&from=paste&id=u41b5bb26&originHeight=788&originWidth=1219&originalType=url&ratio=1&rotation=0&showTitle=false&size=58281&status=done&style=none&taskId=u9d538894-0503-4cfa-9ae6-11114fb88d4&title=" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1671003567422-b95fb9a9-7222-49c5-85df-bf3d2384a5b8.png#averageHue=%23f9f9f9&clientId=uf10e4cac-5303-4&from=paste&height=304&id=u788c6bb5&originHeight=380&originWidth=1192&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13651&status=done&style=none&taskId=ud8968b42-99cd-422c-b30b-48dcec89143&title=&width=953.6" alt="image.png"><br><strong>要记录下上边的URL和认证密钥，切换到gitlab，找到对应的git库点击setting –&gt; webhook ,填写以下内容</strong><br>地址：<a href="http://192.168.182.130:8080/jenkins/project/test3" target="_blank" rel="noopener">http://192.168.182.130:8080/jenkins/project/test3</a><br>Secret token：aab74fc9bd2427f6989e7a2b8ab9b178</p><h5 id="配置GItlab"><a href="#配置GItlab" class="headerlink" title="配置GItlab"></a>配置GItlab</h5><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409042248815.png" alt="image-20240904224827758"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409042249976.png" alt="image-20240904224918937"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409042250206.png" alt="image-20240904225005158"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409042252038.png" alt="image-20240904225205979"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409042252306.png" alt="image-20240904225240275"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409042255287.png" alt="image-20240904225517250"><br>添加完成之后报错测试：<br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409042259709.png" alt="image-20240904225901653"></p><p>这是因为gitlab 10.6 版本以后为了安全，不允许向本地网络发送webhook请求，设置如下：<br>登录管理员账号</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409042259375.png" alt="image-20240904225938343"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409042300145.png" alt="image-20240904230021125"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409042300498.png" alt="image-20240904230051447"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409042301751.png" alt="image-20240904230123696"></p><p>再次测试</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409042302281.png" alt="image-20240904230236244"></p><p>注意：Jenkins需要配置git用户名 和 邮箱地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@git-client ~]# su - jenkins</span><br><span class="line">[root@git-client ~]# git config --global user.email "soho@163.com"</span><br><span class="line">[root@git-client ~]# git config --global user.name "soho"</span><br></pre></td></tr></table></figure><h5 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h5><p>在任何一台测试都可以。我这里在gitlab机器上面测试： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@git-client ~]# yum -y install git</span><br><span class="line">[root@git-client ~]# git config --global user.email "fei@163.com"</span><br><span class="line">[root@git-client ~]# git config --global user.name "fei"</span><br><span class="line">[root@git-client ~]# ssh-keygen #生成秘钥 </span><br><span class="line">[root@git-client ~]# cat .ssh/id_rsa.pub #查看生成的公钥添加到gitlab里面去</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339457522-e0dc8b3c-4cd9-4dec-81ff-9526fca3a1f4.png#averageHue=%23fcf9f8&clientId=u906c2411-8505-4&from=paste&id=u9473ed30&originHeight=655&originWidth=1312&originalType=url&ratio=1&rotation=0&showTitle=false&size=79132&status=done&style=none&taskId=u1d4bd9cc-a9e6-4a97-b876-a353a31c62c&title=" alt="image.png"><br>先克隆一下仓库 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@git-client ~]# git clone git@192.168.91.168:root/cloudweb.git</span><br><span class="line">[root@git-client ~]# cd cloudweb</span><br><span class="line">[root@gitlab-server cloudweb]# vi src/main/webapp/index.jsp</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339457611-c7cd98b1-81b3-43c5-b131-6f7150447207.png#averageHue=%230b0807&clientId=u906c2411-8505-4&from=paste&id=uaed1fbaf&originHeight=471&originWidth=1148&originalType=url&ratio=1&rotation=0&showTitle=false&size=57180&status=done&style=none&taskId=ub6d5ec08-2b3c-4b51-b844-da79b2c366c&title=" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@git-client cloudweb]# git add *</span><br><span class="line">[root@git-client cloudweb]# git commit -m "用户名 和 密码"</span><br><span class="line">[root@git-client cloudweb]# git push origin main</span><br></pre></td></tr></table></figure><p><strong>返回到jenkins页面查看是否自动发布</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339457837-da51c7ad-d30b-47df-a527-33a19f6ec5f1.png#averageHue=%23f9f7f7&clientId=u906c2411-8505-4&from=paste&id=u660d37c6&originHeight=735&originWidth=830&originalType=url&ratio=1&rotation=0&showTitle=false&size=83684&status=done&style=none&taskId=uead1a787-5533-4fba-8fcc-64aa8630aec&title=" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339457884-662e646b-17aa-4da0-b8d1-80a81bacf6c4.png#averageHue=%23f8f8f8&clientId=u906c2411-8505-4&from=paste&id=uf5c6d881&originHeight=814&originWidth=1154&originalType=url&ratio=1&rotation=0&showTitle=false&size=58919&status=done&style=none&taskId=u855574ed-2c84-4c67-864f-91e7126887b&title=" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins easy-springmvc-maven]# cd /root/.jenkins/workspace/test3</span><br><span class="line">[root@jenkins test3]# ls</span><br><span class="line">pom.xml  README.md  src  target</span><br></pre></td></tr></table></figure><p>访问tomcat页面，验证：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339457945-39707c2f-1640-4b42-b939-da12b60842f4.png#averageHue=%23fbf4f3&clientId=u906c2411-8505-4&from=paste&id=u14aa3013&originHeight=305&originWidth=876&originalType=url&ratio=1&rotation=0&showTitle=false&size=32046&status=done&style=none&taskId=u5be31ed1-73a7-43c8-aba1-fb10902abea&title=" alt="image.png"></p><h5 id="基于Git参数化自动构建项目"><a href="#基于Git参数化自动构建项目" class="headerlink" title="基于Git参数化自动构建项目"></a>基于Git参数化自动构建项目</h5><p>Gitlab仓库中有测试项目：github同步过来的<br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339458793-75860ac5-6ced-48ad-88ba-255ae90736ce.png#averageHue=%23f9f8f8&clientId=u906c2411-8505-4&from=paste&id=u6fd87062&originHeight=799&originWidth=1664&originalType=url&ratio=1&rotation=0&showTitle=false&size=106320&status=done&style=none&taskId=u7c287d42-8c3e-4ec2-ac8f-8943f367541&title=" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339458960-29b3f694-a3e6-4287-be24-1836ead55d1f.png#averageHue=%23f9f8f7&clientId=u906c2411-8505-4&from=paste&id=u8ad800bf&originHeight=850&originWidth=1709&originalType=url&ratio=1&rotation=0&showTitle=false&size=130778&status=done&style=none&taskId=u6b010326-64c7-482e-8abb-abf7753bedb&title=" alt="image.png"><br>Jenkins配置：<br>修改原来的”test3”项目：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339458921-bb9fd087-b3e9-42e1-8b26-6a5015b4497a.png#averageHue=%23f9f8f8&clientId=u906c2411-8505-4&from=paste&id=uab5ba6f1&originHeight=697&originWidth=1380&originalType=url&ratio=1&rotation=0&showTitle=false&size=55227&status=done&style=none&taskId=u859da46f-5cdd-440f-96d8-6ebeda874c0&title=" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1671004781816-03fd5b23-070b-4ab1-8659-51181c036fb5.png#averageHue=%23f9f8f8&clientId=uf10e4cac-5303-4&from=paste&height=558&id=uc427b370&originHeight=698&originWidth=1227&originalType=binary&ratio=1&rotation=0&showTitle=false&size=39176&status=done&style=none&taskId=ufae10fdf-4362-4747-88e7-84f29390d2d&title=&width=981.6" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339458944-e8f8d880-5157-4679-a864-12b290e77111.png#averageHue=%23f8f8f8&clientId=u906c2411-8505-4&from=paste&id=u25ba60a4&originHeight=319&originWidth=1230&originalType=url&ratio=1&rotation=0&showTitle=false&size=20207&status=done&style=none&taskId=ua7e03506-261b-44c6-99eb-92466249ea0&title=" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339459581-8f071137-bb20-49df-81e1-14b017130b17.png#averageHue=%23f8f8f8&clientId=u906c2411-8505-4&from=paste&id=u36572c38&originHeight=542&originWidth=1210&originalType=url&ratio=1&rotation=0&showTitle=false&size=40524&status=done&style=none&taskId=u9158ebf4-ff9f-4e86-b48f-940adf3d9a9&title=" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652339459775-2f398091-f525-43dd-9bc3-9c3b614f242e.png#averageHue=%23f9f8f8&clientId=u906c2411-8505-4&from=paste&id=uf61f52e5&originHeight=752&originWidth=1377&originalType=url&ratio=1&rotation=0&showTitle=false&size=66157&status=done&style=none&taskId=u570ab265-1e87-46ab-8b03-e367300fd4a&title=" alt="image.png"><br>测试：<br>推送代码，打tag。代码也会自动构建；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://l66stbz.github.io/tags/Linux/"/>
    
      <category term="Gitlab" scheme="https://l66stbz.github.io/tags/Gitlab/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins结合Ansible实战</title>
    <link href="https://l66stbz.github.io/2024/09/06/Jenkins%E7%BB%93%E5%90%88Ansible/Jenkins%E7%BB%93%E5%90%88Ansible%E5%AE%9E%E6%88%98/"/>
    <id>https://l66stbz.github.io/2024/09/06/Jenkins%E7%BB%93%E5%90%88Ansible/Jenkins%E7%BB%93%E5%90%88Ansible%E5%AE%9E%E6%88%98/</id>
    <published>2024-09-06T13:50:00.000Z</published>
    <updated>2024-09-07T02:56:35.518Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Jenkins机器安装ansbile"><a href="#Jenkins机器安装ansbile" class="headerlink" title="Jenkins机器安装ansbile"></a>Jenkins机器安装ansbile</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]# yum -y install epel-release ; yum -y install ansible</span><br><span class="line">[root@jenkins ~]# ansible --version</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/23214851/1679016832101-f7861920-12df-4400-a30b-8203947a4d29.png#averageHue=%230e0c0b&clientId=ubc832016-903d-4&from=paste&height=214&id=u7abac654&originHeight=267&originWidth=1635&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=33085&status=done&style=none&taskId=u0332b32c-23f1-4bf9-ab82-7370fb1b97e&title=&width=1308" alt="image.png"></p><h2 id="配置ansible主机清单"><a href="#配置ansible主机清单" class="headerlink" title="配置ansible主机清单"></a>配置ansible主机清单</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]# cat /etc/hosts</span><br><span class="line">192.168.91.135 tomcat1</span><br><span class="line">[root@jenkins ~]# cat /etc/ansible/hosts</span><br><span class="line">[tomcat-server]</span><br><span class="line">tomcat1</span><br><span class="line">[root@jenkins ~]# ssh-keygen  #一路回车</span><br><span class="line">[root@jenkins ~]# ssh-copy-id  tomcat1</span><br><span class="line">[root@jenkins ~]# ansible  tomcat1 -m ping</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652604647061-95d77ff5-08db-41f1-a036-668471340993.png#averageHue=%23111111&clientId=u79cad725-0258-4&from=paste&height=258&id=uaf063a20&originHeight=323&originWidth=1578&originalType=binary&ratio=1&rotation=0&showTitle=false&size=24656&status=done&style=none&taskId=u0aac4999-6c9d-4deb-9d9e-62104b15a2a&title=&width=1262.4" alt="image.png"></p><h2 id="jenkins安装ansible插件"><a href="#jenkins安装ansible插件" class="headerlink" title="jenkins安装ansible插件"></a>jenkins安装ansible插件</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652603544389-7267f901-0756-4e88-b959-f3eed81c653a.png#averageHue=%23fbfbfb&clientId=u79cad725-0258-4&from=paste&height=318&id=u47daa618&originHeight=398&originWidth=1106&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35947&status=done&style=none&taskId=uc1aac753-2897-4b54-bd73-30e0747f5d5&title=&width=884.8" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652603568650-04b8061c-d6d4-4a09-9085-c31dc44dd169.png#averageHue=%23fdfbfa&clientId=u79cad725-0258-4&from=paste&height=488&id=ub4a91851&originHeight=610&originWidth=784&originalType=binary&ratio=1&rotation=0&showTitle=false&size=49053&status=done&style=none&taskId=u8ea64723-e064-460d-b448-ee16b2398fb&title=&width=627.2" alt="image.png"></p><h2 id="jenkins配置ansible工具"><a href="#jenkins配置ansible工具" class="headerlink" title="jenkins配置ansible工具"></a>jenkins配置ansible工具</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652603669517-940d69e3-a6f5-4eea-aef2-250f4ae62778.png#averageHue=%23fdfcfc&clientId=u79cad725-0258-4&from=paste&height=550&id=u5db17df4&originHeight=687&originWidth=741&originalType=binary&ratio=1&rotation=0&showTitle=false&size=27373&status=done&style=none&taskId=u8eeda135-f5d3-40b4-8901-78cb798f53c&title=&width=592.8" alt="image.png"></p><h2 id="Jenkins使用ansible命令"><a href="#Jenkins使用ansible命令" class="headerlink" title="Jenkins使用ansible命令"></a>Jenkins使用ansible命令</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652603730238-be015a61-17ad-48c4-b9f8-5d2747a4ace1.png#averageHue=%23f09d80&clientId=u79cad725-0258-4&from=paste&height=466&id=u8c01a436&originHeight=583&originWidth=835&originalType=binary&ratio=1&rotation=0&showTitle=false&size=73081&status=done&style=none&taskId=u57b34db4-d765-422a-8152-c8a85ae76d2&title=&width=668" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652604195896-759d4b45-a307-4dc8-a5eb-a5e9caba8c21.png#averageHue=%23f6f5f4&clientId=u79cad725-0258-4&from=paste&height=522&id=ubc31d2e9&originHeight=653&originWidth=599&originalType=binary&ratio=1&rotation=0&showTitle=false&size=60350&status=done&style=none&taskId=ub7909703-beb7-4fc4-86e3-c81d40306b3&title=&width=479.2" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652604809053-a306df5b-51c2-4494-a070-4df4a6433ade.png#averageHue=%23f8f6f5&clientId=u79cad725-0258-4&from=paste&height=521&id=vtvi8&originHeight=651&originWidth=850&originalType=binary&ratio=1&rotation=0&showTitle=false&size=50795&status=done&style=none&taskId=u8f44598c-a064-45d1-8c47-6acc896abcf&title=&width=680" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652604830834-831ca24a-7523-47de-9928-7b56ccb3c504.png#averageHue=%23f9f8f7&clientId=u79cad725-0258-4&from=paste&height=359&id=aMY20&originHeight=449&originWidth=579&originalType=binary&ratio=1&rotation=0&showTitle=false&size=54310&status=done&style=none&taskId=u7f5e986e-08fb-4321-a3d6-e2c7feaaf1f&title=&width=463.2" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652604727453-dcdc0fdb-0812-4449-b624-ed23259b9a8a.png#averageHue=%23f9f8f8&clientId=u79cad725-0258-4&from=paste&height=324&id=irwnd&originHeight=405&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&size=33405&status=done&style=none&taskId=u3ed155c9-1a9d-4992-87d5-67d27676b06&title=&width=749.6" alt="image.png"></p><h2 id="jenkins使用ansible-playbook剧本"><a href="#jenkins使用ansible-playbook剧本" class="headerlink" title="jenkins使用ansible-playbook剧本"></a>jenkins使用ansible-playbook剧本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]# cat /etc/ansible/test.yaml </span><br><span class="line">---</span><br><span class="line">- hosts: tomcat-server</span><br><span class="line">  tasks:</span><br><span class="line">  - name: ip</span><br><span class="line">    shell: ip a</span><br><span class="line">    register: result   # 显示结果为"result"</span><br><span class="line">  - debug: var=result  # 将显示结果var赋值给result</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652605596723-393c498f-d5e3-4186-99dc-1a050ef5f35c.png#averageHue=%23f8f7f7&clientId=u79cad725-0258-4&from=paste&height=546&id=u2d7d2823&originHeight=683&originWidth=1020&originalType=binary&ratio=1&rotation=0&showTitle=false&size=66975&status=done&style=none&taskId=u52d22f18-a815-42de-b772-65d70817ae1&title=&width=816" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652607436031-2dcb7e30-c9d0-4180-8460-9987e1b12102.png#averageHue=%23f8f8f7&clientId=u79cad725-0258-4&from=paste&height=518&id=uc278892b&originHeight=648&originWidth=945&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36774&status=done&style=none&taskId=ub106e2ee-930d-4728-951f-e52e6c38068&title=&width=756" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652607665526-d896ed6e-3380-43c2-afb2-b240a7ba9768.png#averageHue=%23f8f8f8&clientId=u79cad725-0258-4&from=paste&height=481&id=ue2cb6dce&originHeight=601&originWidth=1325&originalType=binary&ratio=1&rotation=0&showTitle=false&size=25728&status=done&style=none&taskId=uf237605f-59ce-461f-a1ba-1bbdc58a768&title=&width=1060" alt="image.png"></p><h2 id="jenkins-ansible构建maven项目"><a href="#jenkins-ansible构建maven项目" class="headerlink" title="jenkins+ansible构建maven项目"></a>jenkins+ansible构建maven项目</h2><h3 id="jenkins安装git"><a href="#jenkins安装git" class="headerlink" title="jenkins安装git"></a>jenkins安装git</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]# yum -y install git</span><br></pre></td></tr></table></figure><h3 id="添加maven和jdk工具"><a href="#添加maven和jdk工具" class="headerlink" title="添加maven和jdk工具"></a>添加maven和jdk工具</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652610261361-8a0f6452-ffe9-428e-968b-cbbf7b1e2db0.png#averageHue=%23fdfafa&clientId=u79cad725-0258-4&from=paste&height=349&id=u363b55d9&originHeight=436&originWidth=1341&originalType=binary&ratio=1&rotation=0&showTitle=false&size=20317&status=done&style=none&taskId=u4b696e70-40de-459b-84ef-a3a52997f88&title=&width=1072.8" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652610273174-4e16bf3f-503a-4576-aa25-f4a085d28308.png#averageHue=%23fdfcfc&clientId=u79cad725-0258-4&from=paste&height=273&id=uf72f75bb&originHeight=341&originWidth=1173&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12804&status=done&style=none&taskId=uf7bbed60-3642-4a7b-ac55-9fc54f8e187&title=&width=938.4" alt="image.png"></p><h3 id="jenkins配置gitee公钥"><a href="#jenkins配置gitee公钥" class="headerlink" title="jenkins配置gitee公钥"></a>jenkins配置gitee公钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]# cat /root/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652609908349-dc52acf4-d8c2-4ace-8da3-80655ecff70d.png#averageHue=%23fcf8f6&clientId=u79cad725-0258-4&from=paste&height=502&id=u2abc66ac&originHeight=627&originWidth=1204&originalType=binary&ratio=1&rotation=0&showTitle=false&size=74242&status=done&style=none&taskId=u123aaa07-2031-4d76-9c56-4778598c330&title=&width=963.2" alt="image.png"></p><h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652610074494-3c9b8747-df51-41c1-ab62-87af9530d62f.png#averageHue=%23e9d7b4&clientId=u79cad725-0258-4&from=paste&height=481&id=kWQ49&originHeight=601&originWidth=853&originalType=binary&ratio=1&rotation=0&showTitle=false&size=74664&status=done&style=none&taskId=uca732fed-4cc7-41c8-a9e2-aba82f853b3&title=&width=682.4" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652611355973-6b7c91f1-3e05-4fff-9e07-4d60f54adccf.png#averageHue=%23f8f8f7&clientId=u8aa8131c-4fd7-4&from=paste&height=436&id=u2c0b83ee&originHeight=545&originWidth=843&originalType=binary&ratio=1&rotation=0&showTitle=false&size=34531&status=done&style=none&taskId=u2521bda8-20ea-4ce1-90a6-f08d716935a&title=&width=674.4" alt="image.png"></p><h3 id="git参数化构建"><a href="#git参数化构建" class="headerlink" title="git参数化构建"></a>git参数化构建</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652611383994-0a35ad2f-3cdb-4e79-87ef-a274b2e8cea2.png#averageHue=%23f9f8f8&clientId=u8aa8131c-4fd7-4&from=paste&height=462&id=ud977b561&originHeight=577&originWidth=846&originalType=binary&ratio=1&rotation=0&showTitle=false&size=34159&status=done&style=none&taskId=u324f9b2e-a796-4922-b5a2-c40e341186d&title=&width=676.8" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]# cat /root/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652609865581-be69c4bb-063f-4891-a237-37aeedb7d2b3.png#averageHue=%23f1f0f0&clientId=u79cad725-0258-4&from=paste&height=377&id=Kq6v3&originHeight=471&originWidth=997&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23449&status=done&style=none&taskId=u21f6c9a9-8e67-4a2f-a3dd-1b7a8abbf63&title=&width=797.6" alt="image.png"><br>gitee仓库地址：<a href="mailto:git@gitee.com">git@gitee.com</a>:youngfit/easy-springmvc-maven.git<br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652611795725-93970a10-b15a-4763-8fbe-2b2564df350e.png#averageHue=%23f8f3f3&clientId=uac85a916-f04e-4&from=paste&height=475&id=u826a3a8b&originHeight=594&originWidth=934&originalType=binary&ratio=1&rotation=0&showTitle=false&size=54431&status=done&style=none&taskId=u7ebdaf60-1e21-44a3-9920-d9521ad8335&title=&width=747.2" alt="image.png"></p><h3 id="配置maven构建参数"><a href="#配置maven构建参数" class="headerlink" title="配置maven构建参数"></a>配置maven构建参数</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652611875771-8a6bc43a-9bd4-4016-af13-79901d34b40d.png#averageHue=%23f8f5f4&clientId=uac85a916-f04e-4&from=paste&height=339&id=ue0598ec0&originHeight=424&originWidth=929&originalType=binary&ratio=1&rotation=0&showTitle=false&size=34663&status=done&style=none&taskId=u4c23fa3b-a5fc-497d-a9d9-3ef90ea1f2e&title=&width=743.2" alt="image.png"></p><h3 id="配置ansible运行指令"><a href="#配置ansible运行指令" class="headerlink" title="配置ansible运行指令"></a>配置ansible运行指令</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652611979490-53f61480-86e1-4928-a31b-88528b9e2e28.png#averageHue=%23f8f1ef&clientId=uac85a916-f04e-4&from=paste&height=484&id=u28a0433e&originHeight=605&originWidth=843&originalType=binary&ratio=1&rotation=0&showTitle=false&size=60777&status=done&style=none&taskId=ue60b19bc-18ea-4883-b42e-83f8395cb28&title=&width=674.4" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652612130399-769218e8-17af-4279-953e-a4e7917abb17.png#averageHue=%23f8f6f6&clientId=uac85a916-f04e-4&from=paste&height=198&id=u070d4281&originHeight=247&originWidth=818&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13305&status=done&style=none&taskId=u1aae56f9-0515-47fb-b1f2-f3c1641de96&title=&width=654.4" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652612028320-22b7d1f0-2d47-4ddc-984f-e97bfb8e4c14.png#averageHue=%23f8f5f5&clientId=uac85a916-f04e-4&from=paste&height=421&id=u089ce852&originHeight=526&originWidth=854&originalType=binary&ratio=1&rotation=0&showTitle=false&size=44082&status=done&style=none&taskId=u7157eb97-ec00-481f-a427-3eb3526dc33&title=&width=683.2" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652612125644-6eba4ed2-d441-4c3c-8a0d-f87c15d95dca.png#averageHue=%23f8f6f6&clientId=uac85a916-f04e-4&from=paste&height=198&id=u573eed75&originHeight=247&originWidth=818&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13305&status=done&style=none&taskId=u0f6d7b27-7395-4595-b58b-7a77ef8c4ea&title=&width=654.4" alt="image.png"><br>–&gt;保存</p><h3 id="tomcat服务器配置"><a href="#tomcat服务器配置" class="headerlink" title="tomcat服务器配置"></a>tomcat服务器配置</h3><h4 id="安装jdk和tomcat"><a href="#安装jdk和tomcat" class="headerlink" title="安装jdk和tomcat"></a>安装jdk和tomcat</h4><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">安装jdk8和tomcat</span><br><span class="line">[root@tomcat local]# cat /etc/profile</span><br><span class="line">TOMCAT_HOME=/data/application/tomcat</span><br><span class="line">JAVA_HOME=/usr/local/java</span><br><span class="line">MAVEN_HOME=/usr/local/java/maven</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$JAVA_HOME/lib/tools.jar</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$MAVEN_HOME/bin</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH</span><br></pre></td></tr></table></figure><h4 id="配置脚本"><a href="#配置脚本" class="headerlink" title="配置脚本"></a>配置脚本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat local]# cat /opt/script/app-jenkins.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">本脚本适用于jenkins持续集成，实现备份war包到代码更新上线！使用时请注意全局变量。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">================</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Defining variables</span></span><br><span class="line">export JAVA_HOME=/usr/local/java</span><br><span class="line">webapp_path="/usr/local/tomcat/webapps"</span><br><span class="line">tomcat_run="/usr/local/tomcat/bin"</span><br><span class="line">updata_path="/data/update/`date +%F-%T`"</span><br><span class="line">backup_path="/data/backup/`date +%F-%T`"</span><br><span class="line">tomcat_pid=`ps -ef | grep tomcat | grep -v grep | awk '&#123;print $2&#125;'`</span><br><span class="line">files_dir="easy-springmvc-maven"</span><br><span class="line">files="easy-springmvc-maven.war"</span><br><span class="line">job_path="/root/upload"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Preparation environment</span></span><br><span class="line">echo "Creating related directory"</span><br><span class="line">mkdir -p $updata_path</span><br><span class="line">mkdir -p $backup_path</span><br><span class="line"></span><br><span class="line">echo "Move the uploaded war package to the update directory"</span><br><span class="line">mv $job_path/$files $updata_path</span><br><span class="line"></span><br><span class="line">echo "========================================================="</span><br><span class="line">cd /opt</span><br><span class="line">echo "Backing up java project"</span><br><span class="line">if [ -f $webapp_path/$files ];then</span><br><span class="line">tar czf $backup_path/`date +%F-%H`.tar.gz $webapp_path</span><br><span class="line">if [ $? -ne 0 ];then</span><br><span class="line">echo "打包失败，自动退出"</span><br><span class="line">exit 1</span><br><span class="line">else</span><br><span class="line">echo "Checking if tomcat is started"</span><br><span class="line">if [ -n "$tomcat_pid" ];then</span><br><span class="line">kill -9 $tomcat_pid</span><br><span class="line">if [ $? -ne 0 ];then</span><br><span class="line">echo "tomcat关闭失败，将会自动退出"</span><br><span class="line">exit 2</span><br><span class="line">fi</span><br><span class="line">fi</span><br><span class="line">cd $webapp_path</span><br><span class="line">rm -rf $files &amp;&amp; rm -rf $files_dir</span><br><span class="line">cp $updata_path/$files $webapp_path</span><br><span class="line">cd /opt</span><br><span class="line"><span class="meta">$</span><span class="bash">tomcat_run/startup.sh</span></span><br><span class="line">sleep 5</span><br><span class="line">echo "显示tomcat的pid"</span><br><span class="line">echo "`ps -ef | grep tomcat | grep -v grep | awk '&#123;print $2&#125;'`"</span><br><span class="line">echo "tomcat startup"</span><br><span class="line">echo "请手动查看tomcat日志。脚本将会自动退出"</span><br><span class="line">fi</span><br><span class="line">else</span><br><span class="line">echo "Checking if tomcat is started"</span><br><span class="line">        if [ -n "$tomcat_pid" ];then</span><br><span class="line">        kill -9 $tomcat_pid</span><br><span class="line">                if [ $? -ne 0 ];then</span><br><span class="line">                echo "tomcat关闭失败，将会自动退出"</span><br><span class="line">                       exit 2</span><br><span class="line">                fi</span><br><span class="line">        fi</span><br><span class="line">cp $updata_path/$files $webapp_path</span><br><span class="line"><span class="meta">$</span><span class="bash">tomcat_run/startup.sh</span></span><br><span class="line">        sleep 5</span><br><span class="line">        echo "显示tomcat的pid"</span><br><span class="line">        echo "`ps -ef | grep tomcat | grep -v grep | awk '&#123;print $2&#125;'`"</span><br><span class="line">        echo "tomcat startup"</span><br><span class="line">        echo "请手动查看tomcat日志。脚本将会自动退出"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="构建测试"><a href="#构建测试" class="headerlink" title="构建测试"></a>构建测试</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652612259599-3cc9d776-4b04-45e8-bff1-039e611e8a9f.png#averageHue=%23f7f6f6&clientId=uac85a916-f04e-4&from=paste&height=328&id=ueb8dc7d2&originHeight=410&originWidth=708&originalType=binary&ratio=1&rotation=0&showTitle=false&size=33586&status=done&style=none&taskId=u03e1d9ee-3c0c-46dd-86c9-3e3295d894c&title=&width=566.4" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652612288024-409c6f1a-1b92-41ac-9115-1754b8a3b24b.png#averageHue=%23f8f7f7&clientId=uac85a916-f04e-4&from=paste&height=192&id=u3c072fde&originHeight=240&originWidth=988&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8407&status=done&style=none&taskId=u737b0840-f7d6-49bb-9ff7-aa6ab5a96fd&title=&width=790.4" alt="image.png"></p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652612332300-e4b305a3-214a-467f-b72d-ceecb03c64ad.png#averageHue=%23191512&clientId=uac85a916-f04e-4&from=paste&height=214&id=u8f55922b&originHeight=268&originWidth=1892&originalType=binary&ratio=1&rotation=0&showTitle=false&size=51166&status=done&style=none&taskId=uf98bb5b4-0429-49f1-9cf6-2ce168b520c&title=&width=1513.6" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652612358182-e6386625-b08f-4a44-b494-ec6bb5cab75a.png#averageHue=%23f9f8f7&clientId=uac85a916-f04e-4&from=paste&height=130&id=u8bd03ab1&originHeight=163&originWidth=598&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13201&status=done&style=none&taskId=u8f7b7bc2-a718-45f3-9e2a-4955a822fe2&title=&width=478.4" alt="image.png"><br>来一次版本回退试试<br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652612541841-e3e2a74b-797d-4641-a24a-1819f77cecb7.png#averageHue=%23f7f7f7&clientId=uac85a916-f04e-4&from=paste&height=294&id=ud5d87799&originHeight=368&originWidth=793&originalType=binary&ratio=1&rotation=0&showTitle=false&size=31992&status=done&style=none&taskId=ua322e0e5-a834-4dba-8456-d696291520b&title=&width=634.4" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1652612529056-cbf855c2-df50-47cf-b35a-91c305ac3505.png#averageHue=%23f9f9f8&clientId=uac85a916-f04e-4&from=paste&height=136&id=ubacbff0d&originHeight=170&originWidth=652&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14509&status=done&style=none&taskId=u9037453f-e71b-4c6f-9c80-2a4034fce5f&title=&width=521.6" alt="image.png"><br>没毛病</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://l66stbz.github.io/tags/Linux/"/>
    
      <category term="Ansible" scheme="https://l66stbz.github.io/tags/Ansible/"/>
    
      <category term="Jenkins" scheme="https://l66stbz.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins_CI_CD应用</title>
    <link href="https://l66stbz.github.io/2024/09/05/Jenkins_CI_CD%E5%BA%94%E7%94%A8/Jenkins_CI_CD%E5%BA%94%E7%94%A8/"/>
    <id>https://l66stbz.github.io/2024/09/05/Jenkins_CI_CD%E5%BA%94%E7%94%A8/Jenkins_CI_CD%E5%BA%94%E7%94%A8/</id>
    <published>2024-09-05T13:50:00.000Z</published>
    <updated>2024-09-07T03:00:14.263Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>什么是CI/CD</strong>：持续集成/持续发布—开发(git) –&gt;git主库–&gt;jenkins(git+jdk+tomcat+maven打包+测试）–&gt;发布到tomcat服务器。</p><p>Jenkins是一个功能强大的应用程序，允许<strong>持续集成和持续交付项目</strong>，无论用的是什么平台。这是一个免费的源代码，可以处理任何类型的构建或持续集成。集成Jenkins可以用于一些测试和部署技术。</p><p>为什么要 CI / CD 方法</p><p>简介</p><p>软件开发的连续方法基于自动执行脚本，以最大限度地减少在开发应用程序时引入错误的可能性。从新代码的开发到部署，它们需要较少的人为干预甚至根本不需要干预。</p><p>它涉及在每次小迭代中不断构建，测试和部署代码更改，从而减少基于有缺陷或失败的先前版本开发新代码的机会。</p><p>这种方法有三种主要方法，每种方法都根据最适合您的策略进行应用。</p><p><strong>持续集成</strong>(Continuous Integration, CI):  代码合并，构建，部署，测试都在一起，不断地执行这个过程，并对结果反馈。</p><p><strong>持续部署</strong>(Continuous Deployment, CD):　部署到测试环境、预生产环境/灰度环境、生产环境。</p><p><strong>持续交付</strong>(Continuous Delivery, CD):  将最终产品发布到生产环境、给用户使用。</p><h3 id="一、jenkins介绍"><a href="#一、jenkins介绍" class="headerlink" title="一、jenkins介绍"></a>一、jenkins介绍</h3><p>Jenkins是帮我们将代码进行统一的编译打包、还可以放到tomcat容器中进行发布。<br>我们通过配置，将以前：编译、打包、上传、部署到Tomcat中的过程交给Jenkins，Jenkins通过给定的代码地址URL（代码仓库地址），将代码拉取到其“宿主服务器”（Jenkins的安装位置），进行编译、打包和发布到Tomcat容器中。</p><h5 id="1、Jenkins概述"><a href="#1、Jenkins概述" class="headerlink" title="1、Jenkins概述"></a>1、Jenkins概述</h5><p>​    是一个开源的、提供友好操作界面的持续集成(CI)工具，主要用于持续、自动的构建的一些定时执行的任务。Jenkins用Java语言编写，可在Tomcat等流行的容器中运行，也可独立运行。</p><p>jenkins通常与版本管理工具(SCM)、构建工具结合使用；常用的版本控制工具有SVN、GIT。jenkins构建工具有Maven、Ant、Gradle。</p><h5 id="2、Jenkins目标"><a href="#2、Jenkins目标" class="headerlink" title="2、Jenkins目标"></a>2、Jenkins目标</h5><p>① 持续、自动地构建/测试软件项目。</p><p>② 监控软件开发流程，快速问题定位及处理，提高开发效率。</p><h5 id="3、Jenkins特性"><a href="#3、Jenkins特性" class="headerlink" title="3、Jenkins特性"></a>3、Jenkins特性</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">① 开源的java语言开发持续集成工具，支持CI，CD。</span><br><span class="line">② 易于安装部署配置：可通过yum安装,或下载war包以及通过docker容器等快速实现安装部署，可方便web界面配置管理。</span><br><span class="line">③ 消息通知及测试报告：集成RSS/E-mail通过RSS发布构建结果或当构建完成时通过e-mail通知，生成JUnit/TestNG测试报告。</span><br><span class="line">④ 分布式构建：支持Jenkins能够让多台计算机一起构建/测试。</span><br><span class="line">⑤ 文件识别:Jenkins能够跟踪哪次构建生成哪些jar，哪次构建使用哪个版本的jar等。</span><br><span class="line">⑥ 丰富的插件支持:支持扩展插件，你可以开发适合自己团队使用的工具，如git，svn，maven，docker等。</span><br></pre></td></tr></table></figure><p>工作流程图:</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1569246908031.png#id=pHA8p&originHeight=338&originWidth=1149&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">测试环境中：</span><br><span class="line">1.开发者会将代码上传到版本库中。</span><br><span class="line">2.jenkins通过配置版本库的连接地址，获取到源代码。</span><br><span class="line">3.jenkins获取到源代码之后通过参数化构建(或者触发器)开始编译打包。</span><br><span class="line">4.jenkins通过调用maven（Ant或者Gradle）命令实现编译打包过程。</span><br><span class="line">5.生成的war包通过ssh插件上传到远程tomcat服务器中通过shell脚本自动发布项目。</span><br><span class="line"></span><br><span class="line">生产环境：</span><br><span class="line">测试环境将项目测试没问题后，将项目推送到线上正式环境。</span><br><span class="line">1.可以选择手动。</span><br><span class="line">2.也可以通过调用脚本推送过去。</span><br></pre></td></tr></table></figure><h5 id="4、产品发布流程"><a href="#4、产品发布流程" class="headerlink" title="4、产品发布流程"></a>4、产品发布流程</h5><p>产品设计成型 -&gt; 开发人员开发代码 -&gt; 测试人员测试功能 -&gt; 运维人员发布上线</p><p>持续集成（Continuous integration，简称CI）</p><p>持续部署（continuous deployment）</p><p>持续交付（Continuous delivery）</p><h3 id="二、部署应用Jenkins-Gitlub-Tomcat实战"><a href="#二、部署应用Jenkins-Gitlub-Tomcat实战" class="headerlink" title="二、部署应用Jenkins+Gitlub+Tomcat实战"></a>二、部署应用Jenkins+Gitlub+Tomcat实战</h3><p>准备环境:</p><p>两台机器</p><p>git-server    —-<a href="https://github.com/bingyue/easy-springmvc-maven" target="_blank" rel="noopener">https://github.com/bingyue/easy-springmvc-maven</a></p><p>jenkins-server    —192.168.246.212—最好是3个G以上</p><h5 id="java-server-—–192-168-246-210"><a href="#java-server-—–192-168-246-210" class="headerlink" title="java-server   —–192.168.246.210"></a>java-server   —–192.168.246.210</h5><p><a href="https://github.com/bingyue/easy-springmvc-maven" target="_blank" rel="noopener">https://github.com/bingyue/easy-springmvc-maven</a></p><h3 id="Jenkins2-303-1版本安装"><a href="#Jenkins2-303-1版本安装" class="headerlink" title="Jenkins2.303.1版本安装"></a>Jenkins2.303.1版本安装</h3><h4 id="1-下载安装包"><a href="#1-下载安装包" class="headerlink" title="1. 下载安装包"></a>1. 下载安装包</h4><p>百度搜索openjdk11、tomcat、maven、jenkins<br>openjdk11经过测试之后，不能运行当前版本jenkins。我这里换成了jdk1.8的<br>jdk官网：<a href="https://www.oracle.com/java/technologies/downloads/" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/downloads/</a><br>jenkins官网：<a href="https://www.jenkins.io/" target="_blank" rel="noopener">https://www.jenkins.io/</a><br>tomcat官网：<a href="https://tomcat.apache.org/" target="_blank" rel="noopener">https://tomcat.apache.org/</a><br>maven官网：<a href="https://maven.apache.org/" target="_blank" rel="noopener">https://maven.apache.org/</a></p><p><strong>因为jenkins本身BUG比较多的原因，在做以下些许实验时会出现很多报错属于正常现象。当然也可以解决。</strong></p><p><strong>也可以选取别的jenkins版本。本人在完成以后又采用了别的版本进行尝试，效果还不错。</strong></p><p><strong>使用的是yum安装的jenkins2.475，jdk17，编译安装Maven3.9.9。</strong></p><p><strong>最终在构建build过程可能会报一个问题，说插件版本怎么，什么6版本7版本什么的等等。</strong></p><p><strong>如果出现该问题，可以去管理页面工具内，将Maven修改为自动安装，版本选择3.9.9，jdk可以自己在jenkins机器上再在opt下解压一个jdk11版本，不需要配置环境变量，然后jdk安装选择自己安装，路径就写刚刚opt下解压的jdk家目录。然后应用保存，再次构建build，success！！！</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]# wget https://get.jenkins.io/war/2.461/jenkins.war</span><br><span class="line">[root@jenkins ~]# wget https://downloads.apache.org/maven/maven-3/3.8.2/binaries/apache-maven-3.8.2-bin.tar.gz</span><br><span class="line">[root@jenkins ~]# wget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.45/bin/apache-tomcat-8.5.45.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]<span class="comment"># ls</span></span><br><span class="line">apache-maven-3.8.5-bin.tar.gz  apache-tomcat-8.5.45.tar.gz  jdk-11.0.20_linux-x64_bin.tar.gz  jenkins.war</span><br><span class="line"></span><br><span class="line">[root@jenkins ~]<span class="comment"># tar xf apache-maven-3.8.5-bin.tar.gz  -C /usr/local/</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># tar xf jdk-11.0.20_linux-x64_bin.tar.gz  -C /usr/local/</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># tar xf apache-tomcat-8.5.45.tar.gz  -C /usr/local/</span></span><br><span class="line"></span><br><span class="line">[root@jenkins ~]<span class="comment"># cd /usr/local/</span></span><br><span class="line">[root@jenkins <span class="built_in">local</span>]<span class="comment"># mv apache-maven-3.8.5/ maven</span></span><br><span class="line">[root@jenkins <span class="built_in">local</span>]<span class="comment"># mv apache-tomcat-8.5.45/  tomcat</span></span><br><span class="line">[root@jenkins <span class="built_in">local</span>]<span class="comment"># mv jdk-11.0.20/ java</span></span><br><span class="line"></span><br><span class="line">[root@jenkins ~]<span class="comment"># cat &gt;&gt; /etc/profile.d/java.sh &lt;&lt;-EOF</span></span><br><span class="line">JAVA_HOME=/usr/<span class="built_in">local</span>/java</span><br><span class="line">MAVEN_HOME=/usr/<span class="built_in">local</span>/maven</span><br><span class="line">PATH=\<span class="variable">$PATH</span>:\<span class="variable">$JAVA_HOME</span>/bin:\<span class="variable">$MAVEN_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL JAVA_HOME MAVEN_HOME</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">[root@jenkins <span class="built_in">local</span>]<span class="comment"># source /etc/profile.d/java.sh </span></span><br><span class="line"></span><br><span class="line">[root@jenkins bin]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">"11.0.20"</span> 2023-07-18 LTS</span><br><span class="line">Java(TM) SE Runtime Environment 18.9 (build 11.0.20+9-LTS-256)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.20+9-LTS-256, mixed mode)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@jenkins <span class="built_in">local</span>]<span class="comment"># mvn -v</span></span><br><span class="line">Apache Maven 3.8.5 (3599d3414f046de2324203b78ddcf9b5e4388aa0)</span><br><span class="line">Maven home: /usr/<span class="built_in">local</span>/maven</span><br><span class="line">Java version: 17.0.12, vendor: Oracle Corporation, runtime: /usr/<span class="built_in">local</span>/java</span><br><span class="line">Default locale: zh_CN, platform encoding: UTF-8</span><br><span class="line">OS name: <span class="string">"linux"</span>, version: <span class="string">"3.10.0-1160.el7.x86_64"</span>, arch: <span class="string">"amd64"</span>, family: <span class="string">"unix"</span></span><br><span class="line"></span><br><span class="line">[root@jenkins <span class="built_in">local</span>]<span class="comment"># cd ~</span></span><br><span class="line"></span><br><span class="line">[root@jenkins ~]<span class="comment"># rm -rf /usr/local/tomcat/webapps/*</span></span><br><span class="line"></span><br><span class="line">[root@jenkins ~]<span class="comment"># cp jenkins.war  /usr/local/tomcat/webapps/</span></span><br><span class="line"></span><br><span class="line">[root@jenkins ~]<span class="comment"># /usr/local/tomcat/bin/catalina.sh  start</span></span><br><span class="line">Using CATALINA_BASE:   /usr/<span class="built_in">local</span>/tomcat</span><br><span class="line">Using CATALINA_HOME:   /usr/<span class="built_in">local</span>/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /usr/<span class="built_in">local</span>/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr/<span class="built_in">local</span>/java</span><br><span class="line">Using CLASSPATH:       /usr/<span class="built_in">local</span>/tomcat/bin/bootstrap.jar:/usr/<span class="built_in">local</span>/tomcat/bin/tomcat-juli.jar</span><br><span class="line">Using CATALINA_OPTS:   </span><br><span class="line">Tomcat started.</span><br><span class="line"></span><br><span class="line">    [root@jenkins ~]<span class="comment"># yum install fontconfig  -y</span></span><br></pre></td></tr></table></figure><blockquote><p>Jenkins 中插件依赖 <code>fontconfig</code> 来渲染字体。<code>fontconfig</code> 是一个库，主要用于管理和配置系统中的字体，使得应用程序能够正确地找到和使用字体文件。</p></blockquote><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409030943902.png" alt="image-20240903094334603"></p><h4 id="2-访问登录"><a href="#2-访问登录" class="headerlink" title="2. 访问登录"></a>2. 访问登录</h4><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409030945715.png" alt="image-20240903094549627"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409030947165.png" alt="image-20240903094719930"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409030949929.png" alt="image-20240903094913864"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408312227364.png" alt="image-20240831222710254"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408312253909.png" alt="image-20240831225301810"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408312253474.png" alt="image-20240831225337384"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408312254272.png" alt="image-20240831225404169"></p><blockquote><p>Username:admin</p><p>password：cat ~/.jenkins/secrets/initialAdminPassword<br>9ab0d5cf97d94dadbacfe5aa588f0c61</p></blockquote><h4 id="3-插件安装"><a href="#3-插件安装" class="headerlink" title="3. 插件安装"></a>3. 插件安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">安装插件:</span><br><span class="line">所需的插件:</span><br><span class="line">• Maven插件 Maven Integration plugin</span><br><span class="line">• 发布插件 Deploy to container Plugin</span><br><span class="line">需要安装插件如下：</span><br><span class="line">安装插件</span><br><span class="line">`Deploy to container    ---支持自动化代码部署到tomcat容器`</span><br><span class="line">`GIT plugin  可能已经安装,可在已安装列表中查询出来`</span><br><span class="line">`Maven Integration   jenkins利用Maven编译，打包所需插件`</span><br><span class="line">`Publish Over SSH  通过ssh连接`</span><br><span class="line">`ssh  插件`</span><br><span class="line"></span><br><span class="line">安装过程:</span><br><span class="line">系统管理---&gt;插件管理----&gt;可选插件---&gt;过滤Deploy to container----&gt;勾选---&gt;直接安装</span><br></pre></td></tr></table></figure><ol><li><strong>选择Jenkins配置管理</strong></li></ol><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408312256265.png" alt="image-20240831225603191"></p><ol start="2"><li>==点击完成以后，进入Jenkins配置。往下拉找到<strong><code>Plugins</code></strong>==</li></ol><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408312258924.png" alt="image-20240831225826850"></p><ol start="3"><li><strong>更换国内插件下载地址</strong></li></ol><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408312303909.png" alt="image-20240831230303843"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408312304600.png" alt="image-20240831230446526"></p><blockquote><p>插件链接：<a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a> </p></blockquote><ol start="4"><li><strong>更新插件</strong></li></ol><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408312306862.png" alt="image-20240831230629797"></p><ol start="5"><li><strong>下载插件</strong></li></ol><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408312308451.png" alt="image-20240831230847378"></p><h5 id="5-邮箱配置-可选"><a href="#5-邮箱配置-可选" class="headerlink" title="5.邮箱配置(可选)"></a>5.邮箱配置(可选)</h5><p>安装邮件插件，才能确保邮件发送成功。否则可能不会发送邮件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Email Extension Template</span><br><span class="line">Email Ext Recipients Column</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052117930.png" alt="image-20240605211735834"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052118645.png" alt="image-20240605211806552"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052119412.png" alt="image-20240605211939322"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052128190.png" alt="image-20240605212833063"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052125567.png" alt="image-20240605212526477"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052131280.png" alt="image-20240605213106207"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052132032.png" alt="image-20240605213200921"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052144905.png" alt="image-20240605214417819"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052144361.png" alt="image-20240605214458248"></p><h5 id="6-配置Jenkins私钥"><a href="#6-配置Jenkins私钥" class="headerlink" title="6.配置Jenkins私钥"></a>6.配置Jenkins私钥</h5><p>​    说明：Jenkins需要去Gitlab中拉取代码，Jenkins服务器的公钥需要配置Gitlab SSH中，Jenkins私钥配置Jenkins服务中，目的是为了实现Jenkins服务加载到本地私钥，实现服务之间密钥认证。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]# ssh-keygen</span><br><span class="line">[root@jenkins ~]# cat /root/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052152131.png" alt="image-20240605215247049"></p><h5 id="7-添加后端服务器"><a href="#7-添加后端服务器" class="headerlink" title="7.添加后端服务器"></a>7.添加后端服务器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 公钥发送到后端服务器，才能实现免密；</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># ssh-copy-id -i root@192.168.153.194</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052219851.png" alt="image-20240605221943775"></p><h5 id="8-配置JDK和Maven"><a href="#8-配置JDK和Maven" class="headerlink" title="8.配置JDK和Maven"></a>8.配置JDK和Maven</h5><p>虽然Jenkins服务器上，已经安装了JDK和maven工具，但是，还需要在Jenkins服务中，进行配置；</p><p>这样Jenkins才能自动化的使用两个工具；</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052230149.png" alt="image-20240605223015075"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052230960.png" alt="image-20240605223041884"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052233436.png" alt="image-20240605223326356"></p><p>JDK配置</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052234005.png" alt="image-20240605223430949"></p><p>maven配置</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052237362.png" alt="image-20240605223711300"></p><p><strong>如果有多个jdk和maven需要配置的话，可以点击新增jdk或者新增maven</strong></p><p>==========================</p><h5 id="9-构建发布任务"><a href="#9-构建发布任务" class="headerlink" title="9.构建发布任务"></a>9.构建发布任务</h5><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052241569.png" alt="image-20240605224145476"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052243447.png" alt="image-20240605224326357"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052253276.png" alt="image-20240605225328164"></p><p>拉取代码环节</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052251818.png" alt="image-20240605225142703"></p><p><a href="https://github.com/bingyue/easy-springmvc-maven" target="_blank" rel="noopener">https://github.com/bingyue/easy-springmvc-maven</a><br>或者用以下链接<br><a href="https://gitee.com/youngfit/easy-springmvc-maven.git" target="_blank" rel="noopener">https://gitee.com/youngfit/easy-springmvc-maven.git</a></p><p>这里是我再github上，找的一个开源项目。能进行编译打包<br>如果jenkins服务器还未安装git客户端，请先安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y git</span><br></pre></td></tr></table></figure><p>编译打包环节</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052256521.png" alt="image-20240605225610418"></p><p>测试拉取代码、编译打包环节</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052310474.png" alt="image-20240605231009330"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052310568.png" alt="image-20240605231049474"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052311123.png" alt="image-20240605231132040"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052314164.png" alt="image-20240605231442049"></p><p><strong>持续发布</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052315434.png" alt="image-20240605231556343"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052316155.png" alt="image-20240605231625066"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406052338169.png" alt="image-20240605233844052"></p><blockquote><p>如果有多个后端服务器，可以点击 ADD server进行添加</p></blockquote><h5 id="10-java服务器添加脚本"><a href="#10-java服务器添加脚本" class="headerlink" title="10.java服务器添加脚本"></a>10.java服务器添加脚本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 上传jdk</span></span><br><span class="line">[root@java-server ~]# tar xzf jdk-8u191-linux-x64.tar.gz -C /usr/local/</span><br><span class="line">[root@java-server ~]# cd /usr/local/</span><br><span class="line">[root@java-server local]# mv jdk1.8.0_191/ java</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载tomcat</span></span><br><span class="line">[root@java-server ~]# wget http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.42/bin/apache-tomcat-8.5.42.tar.gz</span><br><span class="line">[root@java-server ~]# tar xzf apache-tomcat-8.5.42.tar.gz -C /usr/local</span><br><span class="line">[root@java-server ~]# cd /usr/local</span><br><span class="line">[root@java-server local]# mv apache-tomcat-8.5.42/ tomcat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置环境变量</span></span><br><span class="line">[root@java-server local]# vim /etc/profile</span><br><span class="line">export JAVA_HOME=/usr/local/java</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export TOMCAT_HOME=/data/application/tomcat</span><br><span class="line">[root@java-server local]# source /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试:</span></span><br><span class="line">[root@java-server local]# java -version </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除tomcat默认发布目录下面的内容:</span></span><br><span class="line">[root@java-server local]# rm -rf /usr/local/tomcat/webapps/*</span><br><span class="line">[root@java-server local]# cd /usr/local/tomcat/webapps/</span><br><span class="line">[root@java-server webapps]# ls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建目录和脚本:</span></span><br><span class="line">[root@java-server ~]# mkdir /opt/script  #创建脚本目录</span><br><span class="line">[root@java-server ~]# vim app-jenkins.sh   #创建脚本</span><br><span class="line"><span class="meta">#</span><span class="bash"> 脚本内容在后面：</span></span><br><span class="line">[root@java-server ~]# chmod +x app-jenkins.sh  #添加执行权限</span><br><span class="line">[root@java-server ~]# mv app-jenkins.sh /opt/script/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 脚本内容:</span></span><br><span class="line">[root@java-server script]# cat app-jenkins.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">本脚本适用于jenkins持续集成，实现备份war包到代码更新上线！使用时请注意全局变量。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">================</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Defining variables</span></span><br><span class="line">export JAVA_HOME=/usr/local/java</span><br><span class="line">webapp_path="/usr/local/tomcat/webapps"</span><br><span class="line">tomcat_run="/usr/local/tomcat/bin"</span><br><span class="line">updata_path="/data/update/`date +%F-%T`"</span><br><span class="line">backup_path="/data/backup/`date +%F-%T`"</span><br><span class="line">tomcat_pid=`ps -ef | grep tomcat | grep -v grep | awk '&#123;print $2&#125;'`</span><br><span class="line">files_dir="easy-springmvc-maven"</span><br><span class="line">files="easy-springmvc-maven.war"</span><br><span class="line">job_path="/root/upload"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Preparation environment</span></span><br><span class="line">echo "Creating related directory"</span><br><span class="line">mkdir -p $updata_path</span><br><span class="line">mkdir -p $backup_path</span><br><span class="line"></span><br><span class="line">echo "Move the uploaded war package to the update directory"</span><br><span class="line">mv $job_path/$files $updata_path</span><br><span class="line"></span><br><span class="line">echo "========================================================="</span><br><span class="line">cd /opt</span><br><span class="line">echo "Backing up java project"</span><br><span class="line">if [ -f $webapp_path/$files ];then</span><br><span class="line">tar czf $backup_path/`date +%F-%H`.tar.gz $webapp_path</span><br><span class="line">if [ $? -ne 0 ];then</span><br><span class="line">echo "打包失败，自动退出"</span><br><span class="line">exit 1</span><br><span class="line">else</span><br><span class="line">echo "Checking if tomcat is started"</span><br><span class="line">if [ -n "$tomcat_pid" ];then</span><br><span class="line">kill -9 $tomcat_pid</span><br><span class="line">if [ $? -ne 0 ];then</span><br><span class="line">echo "tomcat关闭失败，将会自动退出"</span><br><span class="line">exit 2</span><br><span class="line">fi</span><br><span class="line">fi</span><br><span class="line">cd $webapp_path</span><br><span class="line">rm -rf $files &amp;&amp; rm -rf $files_dir</span><br><span class="line">cp $updata_path/$files $webapp_path</span><br><span class="line">cd /opt</span><br><span class="line"><span class="meta">$</span><span class="bash">tomcat_run/startup.sh</span></span><br><span class="line">sleep 5</span><br><span class="line">echo "显示tomcat的pid"</span><br><span class="line">echo "`ps -ef | grep tomcat | grep -v grep | awk '&#123;print $2&#125;'`"</span><br><span class="line">echo "tomcat startup"</span><br><span class="line">echo "请手动查看tomcat日志。脚本将会自动退出"</span><br><span class="line">fi</span><br><span class="line">else</span><br><span class="line">echo "Checking if tomcat is started"</span><br><span class="line">        if [ -n "$tomcat_pid" ];then</span><br><span class="line">        kill -9 $tomcat_pid</span><br><span class="line">                if [ $? -ne 0 ];then</span><br><span class="line">                echo "tomcat关闭失败，将会自动退出"</span><br><span class="line">                       exit 2</span><br><span class="line">                fi</span><br><span class="line">        fi</span><br><span class="line">cp $updata_path/$files $webapp_path</span><br><span class="line"><span class="meta">$</span><span class="bash">tomcat_run/startup.sh</span></span><br><span class="line">        sleep 5</span><br><span class="line">        echo "显示tomcat的pid"</span><br><span class="line">        echo "`ps -ef | grep tomcat | grep -v grep | awk '&#123;print $2&#125;'`"</span><br><span class="line">        echo "tomcat startup"</span><br><span class="line">        echo "请手动查看tomcat日志。脚本将会自动退出"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h5 id="11-启用邮箱"><a href="#11-启用邮箱" class="headerlink" title="11.启用邮箱"></a>11.启用邮箱</h5><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/image-20210902225124311.png#id=FYeGR&originHeight=348&originWidth=1180&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><h5 id="12-构建项目"><a href="#12-构建项目" class="headerlink" title="12.构建项目"></a>12.构建项目</h5><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/image-20210908135616162.png#id=KdAEl&originHeight=690&originWidth=1032&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/image-20210908135410486.png#id=v6wk4&originHeight=843&originWidth=1516&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><h5 id="13-访问tomcat测试"><a href="#13-访问tomcat测试" class="headerlink" title="13.访问tomcat测试"></a>13.访问tomcat测试</h5><h5 id="14-更新测试"><a href="#14-更新测试" class="headerlink" title="14.更新测试"></a>14.更新测试</h5><p>随便找台机器，作为开发人员</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> git <span class="built_in">clone</span> https://gitee.com/youngfit/easy-springmvc-maven.git</span></span><br><span class="line">[root@tomcat-server ~]# cd easy-springmvc-maven/</span><br><span class="line">[root@tomcat-server easy-springmvc-maven]# vim src/main/webapp/index.jsp</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1670918518215-2552f3ca-ca0a-4a47-8b76-009acbafcbd2.png#averageHue=%2319120f&clientId=ue8bb4b21-b411-4&from=paste&height=270&id=ub6d69520&originHeight=337&originWidth=1374&originalType=binary&ratio=1&rotation=0&showTitle=false&size=45475&status=done&style=none&taskId=u1348085e-6537-4a05-82a6-afe703b709b&title=&width=1099.2" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat-server easy-springmvc-maven]# git add *</span><br><span class="line">[root@tomcat-server easy-springmvc-maven]# git config --global user.email "feigeyoungfit@163.com"</span><br><span class="line">[root@tomcat-server easy-springmvc-maven]# git config --global user.name "feigeyoungfit"</span><br><span class="line">[root@tomcat-server easy-springmvc-maven]# git commit -m "username &amp; password"</span><br><span class="line">[master 5e9f4fd] username &amp; password</span><br><span class="line"> 1 file changed, 2 insertions(+), 2 deletions(-)</span><br><span class="line">[root@tomcat-server easy-springmvc-maven]# git push origin master</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1670919912187-f18cd605-47a6-4f10-8a12-ca11021e0e23.png#averageHue=%23e1e0e0&clientId=ue8bb4b21-b411-4&from=paste&height=537&id=ue4e4287b&originHeight=671&originWidth=828&originalType=binary&ratio=1&rotation=0&showTitle=false&size=71982&status=done&style=none&taskId=uf0b6f731-f9a5-425e-9a51-271bd54b105&title=&width=662.4" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1670919928266-aa1943a1-8b17-4a64-9e53-2a4fa91bbf92.png#averageHue=%23f9f8f6&clientId=ue8bb4b21-b411-4&from=paste&height=138&id=u6b6d26de&originHeight=172&originWidth=867&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22742&status=done&style=none&taskId=u523f16b2-2c0f-4398-8763-4b2d6d13623&title=&width=693.6" alt="image.png"></p><h5 id="16-准备开源项目"><a href="#16-准备开源项目" class="headerlink" title="16.准备开源项目"></a>16.准备开源项目</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1670919078484-e544e579-a23f-4806-9af8-c0625b6d369c.png#averageHue=%23fdfbfb&clientId=ue8bb4b21-b411-4&from=paste&height=753&id=u4588efc7&originHeight=941&originWidth=1436&originalType=binary&ratio=1&rotation=0&showTitle=false&size=106808&status=done&style=none&taskId=ucb40a564-95ff-4402-ba46-7a0979e49c1&title=&width=1148.8" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1670919234756-2fbc5a36-7d89-4fc0-a874-c4fe88dfa40b.png#averageHue=%23e6e6e5&clientId=ue8bb4b21-b411-4&from=paste&height=542&id=u0ccb950b&originHeight=677&originWidth=1431&originalType=binary&ratio=1&rotation=0&showTitle=false&size=73115&status=done&style=none&taskId=u6b8737ae-ae21-403b-9c44-51a226acaab&title=&width=1144.8" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1670919255822-92e587de-9e8e-4ed7-b6da-b9867306135c.png#averageHue=%23fbfafa&clientId=ue8bb4b21-b411-4&from=paste&height=392&id=ub4c62a24&originHeight=490&originWidth=1247&originalType=binary&ratio=1&rotation=0&showTitle=false&size=47692&status=done&style=none&taskId=ucc0c67fa-5f9e-4a51-b054-ade525e3d73&title=&width=997.6" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1670919270148-4cbef903-4c46-45ed-aa52-5050b9dbb2ec.png#averageHue=%23fbfaf9&clientId=ue8bb4b21-b411-4&from=paste&height=371&id=ua0e36b8b&originHeight=464&originWidth=1427&originalType=binary&ratio=1&rotation=0&showTitle=false&size=59493&status=done&style=none&taskId=u8e5eb6d2-9958-448a-a909-033584fd918&title=&width=1141.6" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1670919311801-1ed69934-9bf2-4ac0-bf64-476be3affd3c.png#averageHue=%23fbf7f4&clientId=ue8bb4b21-b411-4&from=paste&height=372&id=ue6281309&originHeight=465&originWidth=1330&originalType=binary&ratio=1&rotation=0&showTitle=false&size=77373&status=done&style=none&taskId=ue0f2857e-bd61-4872-a256-54de1f07375&title=&width=1064" alt="image.png"><br>随便找台机器，作为开发人员的开发环境，需要安装git，以及配置git邮箱、用户名；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat-server tmp]# git clone https://gitee.com/youngfit/testweb.git</span><br><span class="line">[root@tomcat-server tmp]# cd testweb/</span><br></pre></td></tr></table></figure><p>将easy-springmvc-maven-master.zip 源码包，上传到开发人员机器<br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1670919554706-240cfaa3-2ac9-43f1-b76e-c5b493b9684c.png#averageHue=%231a100e&clientId=ue8bb4b21-b411-4&from=paste&height=60&id=u80be9d1b&originHeight=75&originWidth=956&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9004&status=done&style=none&taskId=u09afd9a8-a675-446d-8bc5-537ea9d1b20&title=&width=764.8" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat-server testweb]# yum -y install unzip</span><br><span class="line">[root@tomcat-server testweb]# unzip easy-springmvc-maven-master.zip</span><br><span class="line">[root@tomcat-server testweb]# cp -r easy-springmvc-maven-master/* .</span><br><span class="line">cp: overwrite ‘./README.md’? y</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1670919639327-a296021b-c0c2-4495-bfd4-26b4538475fb.png#averageHue=%23100a09&clientId=ue8bb4b21-b411-4&from=paste&height=66&id=ub370334a&originHeight=82&originWidth=1611&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14170&status=done&style=none&taskId=u6297a9cc-c9cc-472c-9e76-8bdf8f5b8b0&title=&width=1288.8" alt="image.png"><br>因为已经拷贝出来了。删除没用的压缩包、目录、文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@tomcat-server testweb]# rm -rf easy-springmvc-maven-master easy-springmvc-maven-master.zip </span><br><span class="line">[root@tomcat-server testweb]# ls</span><br><span class="line">pom.xml  README.en.md  README.md  src</span><br><span class="line">[root@tomcat-server testweb]# rm -rf README.en.md </span><br><span class="line">[root@tomcat-server testweb]# ls</span><br><span class="line">pom.xml  README.md  src</span><br><span class="line">[root@tomcat-server testweb]# git add *</span><br><span class="line">[root@tomcat-server testweb]# git commit -m "version1"</span><br><span class="line">[root@tomcat-server testweb]# git push origin master</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1670919712737-dd65eae8-d3b5-4747-bce8-2b2ad0e6ae05.png#averageHue=%2314110f&clientId=ue8bb4b21-b411-4&from=paste&height=261&id=u362b0106&originHeight=326&originWidth=987&originalType=binary&ratio=1&rotation=0&showTitle=false&size=43757&status=done&style=none&taskId=u0293cfea-497b-4f34-93cd-327b3cdd417&title=&width=789.6" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1670919730307-6ed78e76-c901-4f1d-9b7a-61473ef21966.png#averageHue=%23fbf9f7&clientId=ue8bb4b21-b411-4&from=paste&height=459&id=u666e6a25&originHeight=574&originWidth=1181&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57690&status=done&style=none&taskId=u3a97539a-8010-41f1-b0be-9b3c680f3bb&title=&width=944.8" alt="image.png"></p><hr><h3 id="三、Jenkins-Gitlab-maven项目实战"><a href="#三、Jenkins-Gitlab-maven项目实战" class="headerlink" title="三、Jenkins+Gitlab+maven项目实战"></a>三、Jenkins+Gitlab+maven项目实战</h3><p>Jenkins服务器去拉取代码。所以要下载git客户端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins-server ~]# yum -y install git</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409050943547.png" alt="image-20240905094347496"></p><p><strong>关闭ssh密钥认证</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406060714828.png" alt="image-20240606071447681"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409050942962.png" alt="image-20240905094202917"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406060712798.png" alt="img"></p><p><strong>开始构建maven项目</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409050941876.png" alt="image-20240905094127648"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406060719247.png" alt="image-20240606071945163"></p><p>[root@jenkins ~]# cat /root/.ssh/id_rsa</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1670984467041-34a29369-80a9-4899-aa2b-ac9d87da0b2f.png#averageHue=%23faf6f6&clientId=u57f8f598-4783-4&from=paste&height=546&id=u6adabec6&originHeight=683&originWidth=1393&originalType=binary&ratio=1&rotation=0&showTitle=false&size=55101&status=done&style=none&taskId=uc846644c-9248-4ed5-bb22-fec57d76c8f&title=&width=1114.4" alt="image.png"></p><p>==<strong>Gitlab配置jenkins公钥</strong>==</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]# cat /root/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409050944325.png" alt="image-20240905094444287"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409050945288.png" alt="image-20240905094527221"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409050947183.png" alt="image-20240905094720026"></p><p>==<strong>编译后设置</strong>==</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406060722445.png" alt="image-20240606072233374"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406060723001.png" alt="image-20240606072318936"></p><p><img src="/2024/09/05/Jenkins_CI_CD%E5%BA%94%E7%94%A8/Jenkins_CI_CD%E5%BA%94%E7%94%A8/C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240905094825309.png" alt="image-20240905094825309"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409050949100.png" alt="image-20240905094908060"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1670984967094-cb72f86f-bc21-492d-960a-0bac7994bf76.png#averageHue=%23f1f1f0&clientId=u57f8f598-4783-4&from=paste&height=578&id=uf941f65c&originHeight=722&originWidth=1628&originalType=binary&ratio=1&rotation=0&showTitle=false&size=71489&status=done&style=none&taskId=ucb0896d2-21a2-4103-9a09-132151d0fe0&title=&width=1302.4" alt="image.png"></p><p><strong>访问测试</strong><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409050950396.png" alt="image-20240905095008329"><br><strong>开发更新代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@git-client mnt]# git clone git@192.168.91.168:root&#x2F;cloudweb.git</span><br><span class="line">[root@git-client mnt]# cd cloudweb&#x2F;</span><br><span class="line">[root@git-client mnt]# vim src&#x2F;main&#x2F;webapp&#x2F;index.jsp</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1670985229589-55325db8-cc65-4369-baf6-91c3e369e7e9.png#averageHue=%23100a09&clientId=u57f8f598-4783-4&from=paste&height=254&id=u37402819&originHeight=317&originWidth=1362&originalType=binary&ratio=1&rotation=0&showTitle=false&size=37929&status=done&style=none&taskId=u47116c1a-9c12-4b57-ba0f-81ce0e09d87&title=&width=1089.6" alt="image.png"></p><h3 id="四、Jenkins-git参数化构建"><a href="#四、Jenkins-git参数化构建" class="headerlink" title="四、Jenkins git参数化构建"></a>四、Jenkins git参数化构建</h3><p>git参数化构建：开发人员推送代码之前，对此版本的代码，打一个标签(tag)。我们可以认作为是此套代码的版本号。后续可以方便我们进行版本之间的切换。尤其是刚上线一套代码有问题，可以运用jenkins立即进行版本回退/切换；</p><p>Gitlab仓库代码准备：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1654067572140-a2b87e7c-1721-430e-b0d4-664bb7bbe168.png#averageHue=%23f8f6f5&clientId=u6057b347-398d-4&from=paste&height=566&id=ubade1162&originHeight=708&originWidth=1399&originalType=binary&ratio=1&rotation=0&showTitle=false&size=82385&status=done&style=none&taskId=u0fba8d82-3adc-41d3-83fb-c8bb62a7fde&title=&width=1119.2" alt="image.png"><br>首先，需要安装插件”Git Parameter”。如图</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/image-20220326112424871.png#id=c9sRL&originHeight=619&originWidth=1782&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><strong>手动测试：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@git-client ~]# git clone git@192.168.91.168:root/cloudweb.git</span><br><span class="line">[root@git-client ~]# cd cloudweb</span><br><span class="line">[root@git-client cloudweb]# vim src/main/webapp/index.jsp</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/image-20220326113630658.png#id=C2EuJ&originHeight=463&originWidth=1289&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab easy-springmvc-maven]# git add *</span><br><span class="line">[root@gitlab easy-springmvc-maven]# git commit -m "修改用户为密码"</span><br><span class="line">[root@gitlab easy-springmvc-maven]# git tag -a "v1.0" -m "修改用户为密码"</span><br><span class="line">[root@gitlab easy-springmvc-maven]# git tag  #查看一下</span><br><span class="line">v1.0</span><br><span class="line">[root@gitlab easy-springmvc-maven]# git push origin v1.0</span><br><span class="line">[root@gitlab easy-springmvc-maven]#</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1670987518538-79276bf9-3ac9-443a-9e89-06d8cadf420d.png#averageHue=%23faf8f6&clientId=u57f8f598-4783-4&from=paste&height=558&id=u5ab13157&originHeight=698&originWidth=1224&originalType=binary&ratio=1&rotation=0&showTitle=false&size=60919&status=done&style=none&taskId=u9e62e22f-f157-4f65-b376-03f22aa5879&title=&width=979.2" alt="image.png"></p><h4 id="1-配置Jenkins参数化构建（tag方式）"><a href="#1-配置Jenkins参数化构建（tag方式）" class="headerlink" title="1. 配置Jenkins参数化构建（tag方式）"></a>1. 配置Jenkins参数化构建（tag方式）</h4><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406060125491.png" alt="image-20240606012539201"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406060126396.png" alt="image-20240606012642272"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406060127090.png" alt="image-20240606012743783"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409042309949.png" alt="image-20240904230953886"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409042311411.png" alt="image-20240904231101366"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409051610470.png" alt="image-20240905161021397"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406060143446.png" alt="image-20240606014338355"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406060143393.png" alt="image-20240606014352191"></p><p><strong>开发人员再次更新代码，推送仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git-client cloudweb]# vim src/main/webapp/index.jsp</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1670988048171-5da1ebd5-d6ad-4f68-ac47-6e268998ed00.png#averageHue=%23070302&clientId=u57f8f598-4783-4&from=paste&height=254&id=u9452d61e&originHeight=318&originWidth=1358&originalType=binary&ratio=1&rotation=0&showTitle=false&size=34425&status=done&style=none&taskId=u4ba042e4-bd77-4868-8219-5eabca205b1&title=&width=1086.4" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@git-client cloudweb]# git add *</span><br><span class="line">[root@git-client cloudweb]# git commit -m "用户user &amp; 密码pass"</span><br><span class="line">[master ffa6acf] 用户user &amp; 密码pass</span><br><span class="line"> 1 file changed, 2 insertions(+), 2 deletions(-)</span><br><span class="line">[root@git-client cloudweb]# git tag -a "v1.1" -m "用户user &amp; 密码pass"</span><br><span class="line">[root@git-client cloudweb]# git tag</span><br><span class="line">v1.0</span><br><span class="line">v1.1</span><br><span class="line">[root@git-client cloudweb]# git push origin v1.1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1670988152608-80c3a16b-83e9-4363-b7f4-ba00d661a53c.png#averageHue=%23faf8f6&clientId=u57f8f598-4783-4&from=paste&height=526&id=ua1da8988&originHeight=657&originWidth=1247&originalType=binary&ratio=1&rotation=0&showTitle=false&size=59352&status=done&style=none&taskId=ue251d857-c5bd-422e-9950-f730f20c6f6&title=&width=997.6" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1670988252805-47ea6916-a09e-44c6-a3a1-efd91dfdc5f4.png#averageHue=%23fbfafa&clientId=u57f8f598-4783-4&from=paste&height=437&id=u152c49b0&originHeight=546&originWidth=860&originalType=binary&ratio=1&rotation=0&showTitle=false&size=34691&status=done&style=none&taskId=u1a502756-cb0b-46f3-abcb-5c6105cba0f&title=&width=688" alt="image.png"><br>访问测试<br>尝试进行版本切换，再访问测试</p><h4 id="2-配置Jenkins参数化构建-commit修订号"><a href="#2-配置Jenkins参数化构建-commit修订号" class="headerlink" title="2. 配置Jenkins参数化构建(commit修订号)"></a>2. 配置Jenkins参数化构建(commit修订号)</h4><p>开发人员如果不会打标签，或者说他们不愿意配合打标签<br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409042313326.png" alt="image-20240904231317277"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409042313722.png" alt="image-20240904231352677"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409042314229.png" alt="image-20240904231415192"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409042314484.png" alt="image-20240904231444426"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409042315878.png" alt="image-20240904231509849"></p><blockquote><p><strong>Root POM    # 指定编译文件</strong><br><strong>Goals and options    # 编译命令</strong></p></blockquote><p>测试：</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409042315313.png" alt="image-20240904231547271"></p><h3 id="五、Jenkins多节点配置"><a href="#五、Jenkins多节点配置" class="headerlink" title="五、Jenkins多节点配置"></a>五、Jenkins多节点配置</h3><p>在企业里面使用Jenkins自动部署+测试平台时，每天更新发布几个网站版本,很频繁,但是对于一些大型的企业来讲，Jenkins就需要同时处理很多的任务，这时候就需要借助Jenkins多个node或者我们所说的Jenkins分布式SLAVE，今天我们带大家来学习Jenkins多实例的配置；</p><p>添加Linux平台Jenkins SLAVE配置：</p><ol><li>由于Jenkins是Java程序，添加的SLAVE客户端服务器必须安装Java JDK环境；</li><li>创建远程执行Jenkins任务的用户，一般为Jenkins用户，工作目录为/home/Jenkins;</li><li>Jenkins服务器免秘钥登录Slave服务器或者通过用户名和密码登录；</li></ol><h4 id="1-添加从节点"><a href="#1-添加从节点" class="headerlink" title="1.添加从节点"></a>1.添加从节点</h4><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/image-20211009204536504.png#id=SoNjI&originHeight=845&originWidth=1692&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/image-20211009204609760.png#id=de9Yc&originHeight=631&originWidth=1893&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/image-20211009204648831.png#id=qbSD8&originHeight=558&originWidth=1895&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><h4 id="2-参数详解"><a href="#2-参数详解" class="headerlink" title="2.参数详解"></a>2.参数详解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">名字：节点的名字</span><br><span class="line">描述：说明这个节点的用途等</span><br><span class="line">of executors:并发构建数量</span><br><span class="line">远程工作目录：用于存放jenkins的工作空间的</span><br><span class="line">标签：分配job会以标签的名称去分配</span><br><span class="line">用法：节点的使用策略</span><br><span class="line">启动方法：windows的话就不要给自己添堵了，选择 Java web start</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/image-20220328104326621.png#id=kdaUn&originHeight=620&originWidth=1300&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/image-20211009221943512.png#id=qG4LQ&originHeight=607&originWidth=924&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/image-20211009221815103.png#id=ubYos&originHeight=655&originWidth=945&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><h4 id="3-指定java命令路径"><a href="#3-指定java命令路径" class="headerlink" title="3.指定java命令路径"></a>3.指定java命令路径</h4><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/image-20211009221903569.png#id=fMA2s&originHeight=811&originWidth=933&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/image-20211009222015840.png#id=d2gER&originHeight=366&originWidth=1264&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><h4 id="4-测试从节点"><a href="#4-测试从节点" class="headerlink" title="4.测试从节点"></a>4.测试从节点</h4><p>项目指定到哪个节点运行。</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/image-20220328104400072.png#id=yHjLw&originHeight=528&originWidth=1559&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/image-20211009222752678.png#id=ZbUbb&originHeight=691&originWidth=1584&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/image-20211009224634465.png#id=pjo2H&originHeight=270&originWidth=1481&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt>    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://l66stbz.github.io/tags/Linux/"/>
    
      <category term="Ansible" scheme="https://l66stbz.github.io/tags/Ansible/"/>
    
      <category term="Jenkins" scheme="https://l66stbz.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab企业级代码管理</title>
    <link href="https://l66stbz.github.io/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/"/>
    <id>https://l66stbz.github.io/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/</id>
    <published>2024-09-04T13:50:00.000Z</published>
    <updated>2024-09-07T03:20:21.062Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[TOC]</p><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>GitLab 是一个综合性的 DevOps 平台，主要用于代码存储和项目管理。它集成了 Git 仓库管理、持续集成和持续交付（CI/CD）、项目管理、安全性等多种功能。  </p><h3 id="2、功能"><a href="#2、功能" class="headerlink" title="2、功能"></a>2、功能</h3><ul><li>提供 Git 仓库托管服务，支持分支管理、代码审查和合并请求。  </li><li>提供详细的代码历史记录和变更日志，方便开发人员跟踪代码变动。  </li><li>持续集成（CI），自动化构建、测试和集成代码 。<h3 id="3、Gitlab安装"><a href="#3、Gitlab安装" class="headerlink" title="3、Gitlab安装"></a>3、Gitlab安装</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]<span class="comment"># ls</span></span><br><span class="line">gitlab-ce-12.6.3-ce.0.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Gitlab</span></span><br><span class="line">[root@gitlab ~]<span class="comment"># yum  localinstall -y gitlab-ce-12.6.3-ce.0.el7.x86_64.rpm</span></span><br></pre></td></tr></table></figure><p><img src="/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/2.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建ssl证书存放路径</span></span><br><span class="line">[root@gitlab ~]<span class="comment"># mkdir /etc/gitlab/ssl</span></span><br><span class="line"><span class="comment"># 上传证书</span></span><br><span class="line">[root@gitlab ssl]<span class="comment"># ll /etc/gitlab/ssl/privkey.pem </span></span><br><span class="line">-rw-r--r--. 1 root root 241 6月   4 20:32 /etc/gitlab/ssl/privkey.pem</span><br><span class="line">[root@gitlab ssl]<span class="comment"># ll /etc/gitlab/ssl/fullchain.pem </span></span><br><span class="line">-rw-r--r--. 1 root root 3306 6月   4 20:32 /etc/gitlab/ssl/fullchain.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">[root@gitlab ~]<span class="comment">#  egrep -v "^(#|$)" /etc/gitlab/gitlab.rb </span></span><br><span class="line"><span class="comment"># 定义 GitLab 实例的外部访问 URL。用户通过此 URL 访问 GitLab 界面。</span></span><br><span class="line">external_url <span class="string">'https://gitlab.tanke.love'</span></span><br><span class="line"><span class="comment"># 设置 GitLab 的时区为 "Asia/Shanghai"。这影响到 GitLab 中时间显示的区域设置。</span></span><br><span class="line">gitlab_rails[<span class="string">'time_zone'</span>] = <span class="string">'Asia/Shanghai'</span></span><br><span class="line"><span class="comment"># 定义 Git 数据存储的路径。</span></span><br><span class="line">git_data_dirs(&#123;</span><br><span class="line">  <span class="string">"default"</span> =&gt; &#123;</span><br><span class="line">    <span class="string">"path"</span> =&gt; <span class="string">"/mnt/nfs-01/git-data"</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment"># 设置 GitLab Shell 使用的 SSH 端口。</span></span><br><span class="line">gitlab_rails[<span class="string">'gitlab_shell_ssh_port'</span>] = 22</span><br><span class="line"><span class="comment"># 启用 Nginx，GitLab 使用 Nginx 作为 Web 服务器。</span></span><br><span class="line">nginx[<span class="string">'enable'</span>] = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 设置最大请求体大小为 250MB</span></span><br><span class="line">nginx[<span class="string">'client_max_body_size'</span>] = <span class="string">'250m'</span></span><br><span class="line"><span class="comment"># 启用 HTTP 到 HTTPS 的重定向，确保所有流量通过 HTTPS。</span></span><br><span class="line">nginx[<span class="string">'redirect_http_to_https'</span>] = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 设置重定向端口为 80。</span></span><br><span class="line">nginx[<span class="string">'redirect_http_to_https_port'</span>] = 80</span><br><span class="line"><span class="comment"># 指定 SSL 证书和密钥的位置，用于 HTTPS。</span></span><br><span class="line">nginx[<span class="string">'ssl_certificate'</span>] = <span class="string">"/tmp/fullchain.pem"</span></span><br><span class="line">nginx[<span class="string">'ssl_certificate_key'</span>] = <span class="string">"/tmp/privkey.pem"</span></span><br><span class="line">nginx[<span class="string">'ssl_ciphers'</span>] = <span class="string">"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384"</span></span><br><span class="line">nginx[<span class="string">'ssl_prefer_server_ciphers'</span>] = <span class="string">"off"</span></span><br><span class="line"><span class="comment"># 定义支持的 SSL/TLS 协议版本。</span></span><br><span class="line">nginx[<span class="string">'ssl_protocols'</span>] = <span class="string">"TLSv1.2 TLSv1.3"</span></span><br><span class="line"><span class="comment"># 配置 SSL 会话缓存，提高性能。</span></span><br><span class="line">nginx[<span class="string">'ssl_session_cache'</span>] = <span class="string">"shared:SSL:10m"</span></span><br><span class="line"><span class="comment"># 超时时间。</span></span><br><span class="line">nginx[<span class="string">'ssl_session_timeout'</span>] = <span class="string">"1d"</span></span><br><span class="line"><span class="comment"># 启用 Gzip 压缩，提高传输效率。</span></span><br><span class="line">nginx[<span class="string">'gzip_enabled'</span>] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">[root@gitlab ~]<span class="comment"># gitlab-ctl  reconfigure</span></span><br></pre></td></tr></table></figure><p><img src="/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/3.png" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/gitlab/initial_root_password #密码存放地</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动实例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># gitlab-ctl start</span></span><br></pre></td></tr></table></figure><p><img src="/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/4.png" alt="image.png"><br><img src="/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/5.png" alt="image.png"><br><img src="/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/6.png" alt="image.png"></p><blockquote><p>任何人都可以注册帐户。<br>只允许任何人在GitLab实例上注册您打算供任何人使用的帐户。允许任何人注册会使GitLab实例更容易受到攻击。</p></blockquote><h3 id="更改Root密码"><a href="#更改Root密码" class="headerlink" title="更改Root密码"></a>更改Root密码</h3><p><img src="/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/7.png" alt="image.png"><br><img src="/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/8.png" alt="image.png"><br><img src="/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/9.png" alt="image.png"></p><h1 id="创建新项目"><a href="#创建新项目" class="headerlink" title="创建新项目"></a>创建新项目</h1><p><img src="/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/10.png" alt="image.png"><br><img src="/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/11.png" alt="image.png"><br><img src="/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/12.png" alt="image.png"><br><img src="/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/13.png" alt="image.png"></p><h2 id="拉取项目代码仓库"><a href="#拉取项目代码仓库" class="headerlink" title="拉取项目代码仓库"></a>拉取项目代码仓库</h2><p><img src="/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/14.png" alt="image.png"></p><h2 id="上传SSH公钥"><a href="#上传SSH公钥" class="headerlink" title="上传SSH公钥"></a>上传SSH公钥</h2><p><img src="/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/15.png" alt="image.png"><br><img src="/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/16.png" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本地公钥</span></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/qf2401 (master)</span><br><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDN9T3s7uqnOSI2hME0EOdyWQvVw8Cu0uBFFH/vEIaBsyzJylAPI/td0QxLHnCSbRrD+GrIfh99/5giVTx0vNo6dBwhiTp3BlrQhVgBXCqd9evH5Mn03JZBK9aIrUumliaBpWezXh4Se2OSxlpAKt1aNopw8Acvh9IvLCPEOcKHdwEloogz4nRqkG9ZGfuObXeu9sxWt7efg3eASExA7H+x9bvGOkVLm33V+LFWD1/ln4nwGbkvQkh0fCTHZiWbSCTpXKQtmknvBfrT7Fn2VtUhP4jWZhfuft1Ty2j2Jmajc6ZbgEc5z1M3JQo+KoVYlKlaONs5+u/Pmj6pdqpinMo0klwI4hJsO2J0TN+j9S6tR8V60yB5Ep8KpDpsRwANEXVaHwsBfIZEh7Cqn1rabf/mE2bXoXmRb8DDc4b/ycF9DLi8ZtHs9CcJWcs8eTuiqgyON75wNGILC4pxJLCFHEQ7JMCa3yCN/2XVSNRIeXdgaOScj2x68ezcJ+zEWEKio6E= hjm131641@163.com</span><br></pre></td></tr></table></figure><p><img src="/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/17.png" alt="image.png"></p><h2 id="拉取代码"><a href="#拉取代码" class="headerlink" title="拉取代码"></a>拉取代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取代码</span></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop</span><br><span class="line">$ git <span class="built_in">clone</span> git@gitlab.tanke.love:gitlab-instance-d5d699e8/study-test-cloud.git</span><br><span class="line">Cloning into <span class="string">'study-test-cloud'</span>...</span><br><span class="line">remote: Enumerating objects: 3, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Receiving objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop</span><br><span class="line">$ ls</span><br><span class="line">Bandicam/  desktop.ini  qf2401/  study-test-cloud/  work/  郑州千锋/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/study-test-cloud (main)</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"# 铭哥真帅"</span> &gt; test.md</span><br><span class="line"></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/study-test-cloud (main)</span><br><span class="line">$ git add .</span><br><span class="line">warning: <span class="keyword">in</span> the working copy of <span class="string">'test.md'</span>, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line"></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/study-test-cloud (main)</span><br><span class="line">$ git commit  -am <span class="string">"first commit"</span></span><br><span class="line">[main 1416f75] first commit</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 test.md</span><br><span class="line"></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/study-test-cloud (main)</span><br><span class="line">$ git push origin main</span><br><span class="line">Enumerating objects: 4, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (4/4), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 32 threads</span><br><span class="line">Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 280 bytes | 280.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)</span><br><span class="line">To gitlab.tanke.love:gitlab-instance-d5d699e8/study-test-cloud.git</span><br><span class="line">   7f887e5..1416f75  main -&gt; main</span><br></pre></td></tr></table></figure><p><img src="/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/18.png" alt="image.png"></p><h2 id="Tag版本推送"><a href="#Tag版本推送" class="headerlink" title="Tag版本推送"></a>Tag版本推送</h2><p>GitLab 的 tag（标签）在版本控制中主要用于标记某个特定的提交（commit）点。这些标签通常用于表示软件的发布版本，使得开发者能够轻松地引用和查找这些重要的提交点。</p><ol><li><strong>版本标记</strong>：<ul><li>标签可以标记代码库中的特定版本，如 v1.0.0、v2.1.3 等。这有助于开发者和其他利益相关者（如产品经理、测试人员、用户等）清楚地了解代码的当前状态和历史版本。</li></ul></li><li><strong>发布管理</strong>：<ul><li>当软件达到某个稳定状态并准备发布时，可以为该状态创建一个标签。这有助于在后续开发过程中追踪和比较不同版本之间的差异。</li><li>通过标签，可以轻松地回滚到以前的版本，如果新版本出现严重问题或不符合预期。</li></ul></li><li><strong>构建和部署</strong>：<ul><li>在持续集成/持续部署（CI/CD）流程中，标签经常用于触发构建和部署操作。例如，当一个新的标签被推送到代码库时，CI/CD 系统可以自动构建和部署该版本的软件。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/study-test-cloud (main)</span><br><span class="line">$ vim tag.txt</span><br><span class="line"></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/study-test-cloud (main)</span><br><span class="line">$ git add .</span><br><span class="line">warning: <span class="keyword">in</span> the working copy of <span class="string">'tag.txt'</span>, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line"></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/study-test-cloud (main)</span><br><span class="line">$ git commit  -m <span class="string">"net tag.txt"</span></span><br><span class="line">[main 3461e18] net tag.txt</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 tag.txt</span><br><span class="line"></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/study-test-cloud (main)</span><br><span class="line">$ git tag  -a <span class="string">"v1.1"</span> -m <span class="string">"new e.txt"</span></span><br><span class="line"></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/study-test-cloud (main)</span><br><span class="line">$ git push origin  main</span><br><span class="line"></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/study-test-cloud (main)</span><br><span class="line">$ git push origin  v1.1</span><br><span class="line">Enumerating objects: 5, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 32 threads</span><br><span class="line">Compressing objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (4/4), 424 bytes | 424.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 4 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)</span><br><span class="line">To gitlab.tanke.love:gitlab-instance-d5d699e8/study-test-cloud.git</span><br><span class="line"> * [new tag]         v1.1 -&gt; v1.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/study-test-cloud (main)</span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit 3461e180cc300dddd9ea289c619b74f771e57dd9 (HEAD -&gt; main, tag: v1.1)</span><br><span class="line">Author: jiaming &lt;hjm131641@163.com&gt;</span><br><span class="line">Date:   Tue Jun 4 23:30:26 2024 +0800</span><br><span class="line"></span><br><span class="line">    net tag.txt</span><br><span class="line"></span><br><span class="line">commit c3aba0f8f1d3fa73789ce7562ed97526433628b0 (origin/main, origin/HEAD)</span><br><span class="line">Author: jiaming &lt;hjm131641@163.com&gt;</span><br><span class="line">Date:   Tue Jun 4 23:22:26 2024 +0800</span><br><span class="line"></span><br><span class="line">    first commit</span><br><span class="line"></span><br><span class="line">commit 1416f75324c274ae5b813ee7ce8d80a09d61212b</span><br><span class="line">Author: jiaming &lt;hjm131641@163.com&gt;</span><br><span class="line">Date:   Tue Jun 4 23:02:44 2024 +0800</span><br><span class="line"></span><br><span class="line">    first commit</span><br><span class="line"></span><br><span class="line">commit 7f887e5c316766a6cab4b81ba73cfd00e1230fc2</span><br><span class="line">Author: Administrator &lt;admin@example.com&gt;</span><br><span class="line">Date:   Tue Jun 4 22:55:52 2024 +0800</span><br><span class="line"></span><br><span class="line">    Initial commit</span><br></pre></td></tr></table></figure><h2 id="Gitlab备份"><a href="#Gitlab备份" class="headerlink" title="Gitlab备份"></a>Gitlab备份</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看Gitlab的版本</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /opt/gitlab/embedded/service/gitlab-rails/VERSION </span></span><br><span class="line">15.1.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开配置文件数据备份</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/gitlab/gitlab.rb </span></span><br><span class="line">gitlab_rails[<span class="string">'backup_path'</span>] = <span class="string">"/var/opt/gitlab/backups"</span><span class="comment">#备份的路径</span></span><br><span class="line">gitlab_rails[<span class="string">'backup_archive_permissions'</span>] = 0644<span class="comment">#备份文件的默认权限</span></span><br><span class="line">gitlab_rails[<span class="string">'backup_keep_time'</span>] = 604800<span class="comment">#保留时长，秒为单位</span></span><br></pre></td></tr></table></figure>设置备份保留时长，防止每天执行备份，肯定有目录被爆满的风险，打开/etc/gitlab/gitlab.rb配置文件，找到如下配置<br>该项定义了默认备份出文件的路径，可以通过修改该配置，并执行 <strong>gitlab-ctl reconfigure 或者 gitlab-ctl  restart</strong> 重启服务生效。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># gitlab-ctl reconfigure</span></span><br><span class="line">或者</span><br><span class="line">[root@localhost ~]<span class="comment"># gitlab-ctl  restart</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># echo $?</span></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行备份命令进行备份</span></span><br><span class="line">[root@localhost ~]<span class="comment"># gitlab-rake gitlab:backup:create</span></span><br></pre></td></tr></table></figure><img src="/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/19.png" alt="image.png"><br>也可以添加到 crontab 中定时执行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 2 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure>可以到/var/opt/gitlab/backups找到备份包，解压查看，会发现备份的还是比较全面的，数据库、repositories、build、upload等分类还是比较清晰的。备份完成，会在备份目录中生成一个当天日期的tar包。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ll /var/opt/gitlab/backups/</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="Gitlab数据恢复"><a href="#Gitlab数据恢复" class="headerlink" title="Gitlab数据恢复"></a>Gitlab数据恢复</h2><p>特别注意：</p><ul><li>备份目录和gitlab.rb中定义的备份目录必须一致</li><li>GitLab的版本和备份文件中的版本必须一致，否则还原时会报错。</li></ul><p>模拟删除数据<br><img src="/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/20.png" alt="image.png"><br><img src="/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/21.png" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#  cd /var/opt/gitlab/backups</span></span><br><span class="line">[root@localhost backups]<span class="comment"># ls</span></span><br><span class="line">1717517821_2024_06_05_15.1.2_gitlab_backup.tar</span><br><span class="line">[root@localhost ~]<span class="comment">#  gitlab-rake gitlab:backup:restore BACKUP=/var/opt/gitlab/backups/</span></span><br><span class="line"><span class="comment"># 注意恢复文件的名称</span></span><br></pre></td></tr></table></figure><p><img src="/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/22.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/40379882/1717519006307-206d83b4-2a2c-4afb-8e06-2ba73f12538b.png#averageHue=%230f0d0c&clientId=ued8afcd3-562e-4&from=paste&height=444&id=u3c1082bf&originHeight=666&originWidth=1674&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=95727&status=done&style=none&taskId=ub7b8d439-5831-4b8e-b61c-bfe69b20fb3&title=&width=1116" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/40379882/1717519030944-9de30b46-c1fb-4ffc-a9d4-7fce862bff83.png#averageHue=%23150e0d&clientId=ued8afcd3-562e-4&from=paste&height=335&id=u2dfcc94d&originHeight=502&originWidth=2305&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=88401&status=done&style=none&taskId=ua70807c8-3ba2-492c-9bbe-c5e8bd05a9a&title=&width=1536.6666666666667" alt="image.png"><br>恢复完成后，启动刚刚的两个服务，或者重启所有服务，再打开浏览器进行访问，发现数据和之前的一致：<br><strong>注意：通过备份文件恢复gitlab必须保证两台主机的gitlab版本一致，否则会提示版本不匹配</strong></p><p>再次查看Gitlab<br><img src="/2024/09/04/gitlab%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/Gitlab%E4%BC%81%E4%B8%9A%E7%BA%A7%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/23.png" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://l66stbz.github.io/tags/Linux/"/>
    
      <category term="Gitlab" scheme="https://l66stbz.github.io/tags/Gitlab/"/>
    
  </entry>
  
  <entry>
    <title>Git工具与gitee、gitlab和github</title>
    <link href="https://l66stbz.github.io/2024/09/03/Git%E5%B7%A5%E5%85%B7/Git%E5%B7%A5%E5%85%B7%E4%B8%8Egitee%E3%80%81gitlab%E5%92%8Cgithub/"/>
    <id>https://l66stbz.github.io/2024/09/03/Git%E5%B7%A5%E5%85%B7/Git%E5%B7%A5%E5%85%B7%E4%B8%8Egitee%E3%80%81gitlab%E5%92%8Cgithub/</id>
    <published>2024-09-03T13:50:00.000Z</published>
    <updated>2024-09-07T02:05:14.619Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="为什么要管理代码？"><a href="#为什么要管理代码？" class="headerlink" title="为什么要管理代码？"></a>为什么要管理代码？</h2><ol><li>版本控制：可以追踪代码的变更记录，并且可以看到修改的内容，以及版本的回滚；</li><li>分支管理：可以让我们同时处理多个任务。并且不会影响稳定的分支(主分支)；</li><li>团队协作：可以让多人协作开发，并且在没有相互影响的条件下独立完成工作。</li></ol><h2 id="主流的代码仓库"><a href="#主流的代码仓库" class="headerlink" title="主流的代码仓库"></a>主流的代码仓库</h2><ol><li>Github</li><li>Gitee</li><li>Gitlab</li></ol><h2 id="Git工具"><a href="#Git工具" class="headerlink" title="Git工具"></a>Git工具</h2><p>gitfor官网：<a href="https://gitforwindows.org/" target="_blank" rel="noopener">https://gitforwindows.org/</a></p><p>下载链接：<a href="https://github.com/git-for-windows/git/releases/download/v2.45.2.windows.1/Git-2.45.2-64-bit.exe" target="_blank" rel="noopener">https://github.com/git-for-windows/git/releases/download/v2.45.2.windows.1/Git-2.45.2-64-bit.exe</a></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032210422.png" alt="image-20240603221000246"></p><ol><li><strong>安装</strong></li></ol><p>​        略</p><ol start="2"><li><strong>打开Git终端</strong></li></ol><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032211246.png" alt="image-20240603221115825" style="zoom:50%;"><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032212101.png" alt="image-20240603221217058"></p><ol start="3"><li><strong>Git初始化配置</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看用户</span></span><br><span class="line">$ git config  user.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看邮箱</span></span><br><span class="line">$ git config  user.email</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置</span></span><br><span class="line">$ git config  --list</span><br></pre></td></tr></table></figure><ol start="4"><li>配置全局用户名和邮箱</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置用户</span></span><br><span class="line">$ git config --global user.name <span class="string">"你的名字"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置邮箱</span></span><br><span class="line">$ git config --global user.email 你的邮箱</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置ssh密钥</span></span><br><span class="line">$ ssh-keygen.exe -t rsa -C <span class="string">"你的邮箱"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Key</span></span><br><span class="line">$ cat ~/.ssh/</span><br><span class="line">id_rsa       id_rsa.pub   known_hosts</span><br></pre></td></tr></table></figure><h2 id="Gitee使用"><a href="#Gitee使用" class="headerlink" title="Gitee使用"></a>Gitee使用</h2><p>官网链接：<a href="https://gitee.com/" target="_blank" rel="noopener">https://gitee.com/</a></p><p><strong>注册</strong></p><p>​    略</p><p>gitee使用</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032229980.png" alt="image-20240603222912881"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032230796.png" alt="image-20240603223005695"></p><p><strong>GItee配置SSH公钥</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032230685.png" alt="image-20240603223057609"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032231438.png" alt="image-20240603223139358"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看ssh 公钥</span></span><br><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDN9T3s7uqnOSI2hME0EOdyWQvVw8Cu0uBFFH/vEIaBsyzJylAPI/td0QxLHnCSbRrD+GrIfh99/5giVTx0vNo6dBwhiTp3BlrQhVgBXCqd9evH5Mn03JZBK9aIrUumliaBpWezXh4Se2OSxlpAKt1aNopw8Acvh9IvLCPEOcKHdwEloogz4nRqkG9ZGfuObXeu9sxWt7efg3eASExA7H+x9bvGOkVLm33V+LFWD1/ln4nwGbkvQkh0fCTHZiWbSCTpXKQtmknvBfrT7Fn2VtUhP4jWZhfuft1Ty2j2Jmajc6ZbgEc5z1M3JQo+KoVYlKlaONs5+u/Pmj6pdqpinMo0klwI4hJsO2J0TN+j9S6wsBfIZEh7Cqn1rabf/mE2bXoXmRb8DDc4b/ycF9DLi8ZtHs9CcJWcs8eTuiqgyON75wNGILC4pxJLCFHEQ7JMCa3yCN/2XVSNRIeXdgaOScj2x68ezcJ+zEWEKio6E= hjm131641@163.com</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032233218.png" alt="image-20240603223317148"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032235277.png" alt="image-20240603223526218"></p><p><strong>gitee命令使用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆仓库</span></span><br><span class="line">$ git <span class="built_in">clone</span> git@gitee.com:rulaipo/git-test.git</span><br><span class="line">Cloning into <span class="string">'git-test'</span>...</span><br><span class="line">warning: You appear to have cloned an empty repository.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换目录</span></span><br><span class="line">$ <span class="built_in">cd</span> git-test/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试文件</span></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/git-test (master)</span><br><span class="line">$ vim README.MD</span><br><span class="line"><span class="comment"># 铭哥真帅</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line">warning: <span class="keyword">in</span> the working copy of <span class="string">'README.MD'</span>, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传到本地仓库</span></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/git-test (master)</span><br><span class="line">$ git commit  -m <span class="string">"first commit"</span></span><br><span class="line">[master (root-commit) ee63a1e] first commit</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 README.MD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传到git仓库</span></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/git-test (master)</span><br><span class="line">$ git push origin  master</span><br><span class="line">Enumerating objects: 3, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 221 bytes | 221.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)</span><br><span class="line">remote: Powered by GITEE.COM [GNK-6.4]</span><br><span class="line">To gitee.com:rulaipo/git-test.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure><p>回到Gitee</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032242643.png" alt="image-20240603224226584"></p><p>案例二：开发人员本地先进行代码开发，然后在上传到新的Gitee仓库</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032252493.png" alt="image-20240603225257452"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032252530.png" alt="image-20240603225245462"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换目录</span></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop</span><br><span class="line">$ <span class="built_in">cd</span> git-test/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/git-test</span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> C:/Users/lenovo/Desktop/git-test/.git/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加至暂存区</span></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/git-test (master)</span><br><span class="line">$ git add .</span><br><span class="line">warning: <span class="keyword">in</span> the working copy of <span class="string">'README.MD'</span>, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加仓库，将远程仓库添加到你当前的 Git 仓库中。</span></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/git-test (master)</span><br><span class="line">$ git remote add origin git@gitee.com:rulaipo/git-test.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加到本地，创建一个新的提交（commit）的命令，表示将暂存区中的所有更改保存到本地仓库的历史记录中。</span></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/git-test (master)</span><br><span class="line">$ git commit -m <span class="string">"first commit"</span></span><br><span class="line">[master (root-commit) fd6f97a] first commit</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 README.MD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送代码至Gitee仓库</span></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/git-test (master)</span><br><span class="line">$ git push origin master</span><br><span class="line">Enumerating objects: 3, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 232 bytes | 232.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)</span><br><span class="line">remote: Powered by GITEE.COM [GNK-6.4]</span><br><span class="line">To gitee.com:rulaipo/git-test.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032257521.png" alt="image-20240603225732448"></p><p>案例三：同一个代码仓库多人开发，导致本地仓库和远程仓库的代码不一致。需要重新同步代码</p><p>模拟远程仓库</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032305304.png" alt="image-20240603230554264"></p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032306018.png" alt="image-20240603230644949" style="zoom:50%;"><p><strong>查看本地仓库代码</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032307217.png" alt="image-20240603230756187"></p><p><strong>重新同步代码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/git-test (master)</span><br><span class="line">$ git pull origin master</span><br><span class="line">remote: Enumerating objects: 5, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3/3), 949 bytes | 94.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">From gitee.com:rulaipo/git-test</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">   fd6f97a..6c1820f  master     -&gt; origin/master</span><br><span class="line">Updating fd6f97a..6c1820f</span><br><span class="line">Fast-forward</span><br><span class="line"> README.MD | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032309587.png" alt="image-20240603230957544"></p><h2 id="Git命令详解"><a href="#Git命令详解" class="headerlink" title="Git命令详解"></a>Git命令详解</h2><h3 id="Git基础命令"><a href="#Git基础命令" class="headerlink" title="Git基础命令"></a>Git基础命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆远程已有的仓库至本地</span></span><br><span class="line">$ git <span class="built_in">clone</span> 远程地址</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新本地代码（拉取远程仓库中的新代码到本地）</span></span><br><span class="line">$ git pull &lt;shortname&gt; &lt;remote_branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有修改的文件，但不包含删除文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有修改的文件以及删除的文件到暂存区</span></span><br><span class="line">$ git add -A (--all)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加单个或者多个文件/目录到暂存区</span></span><br><span class="line">$ git add file1/dir1 file2/dir2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把文件从暂存区提交至本地仓库</span></span><br><span class="line"><span class="comment"># -a: 类似于 git add，但是不包含新添加的文件</span></span><br><span class="line"><span class="comment"># -m: 注释内容</span></span><br><span class="line">$ git commit -m <span class="string">"提交信息"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把本地仓库的代码提交至远程仓库</span></span><br><span class="line"><span class="variable">$git</span> push &lt;shortname&gt; &lt;remote_branch&gt;</span><br></pre></td></tr></table></figure><h3 id="Git-分支管理"><a href="#Git-分支管理" class="headerlink" title="Git 分支管理"></a>Git 分支管理</h3><p>简介：Git 分支可以看作是代码库中的一个独立工作目录。每个分支都有自己的提交历史和工作目录，允许开发者在不同的分支上进行不同的开发工作，而不会干扰到其他分支的代码。</p><h4 id="分支的作用"><a href="#分支的作用" class="headerlink" title="分支的作用"></a>分支的作用</h4><ol><li><strong>隔离开发工作</strong>：不同的开发任务（例如新功能、修复 bug）可以在不同的分支上进行。</li><li><strong>并行开发</strong>：团队中的多个开发者可以同时在不同的分支上工作，不会相互影响。</li><li><strong>代码管理</strong>：通过分支，可以更好地管理代码变更，确保主分支（通常是 <code>main</code> 或 <code>master</code>）始终保持稳定。</li></ol><h4 id="常见的分支类型"><a href="#常见的分支类型" class="headerlink" title="常见的分支类型"></a>常见的分支类型</h4><ol><li>主分支（Main/Master）<ul><li><code>main</code> 或 <code>master</code> 分支是代码库中的主分支，通常存储的是稳定的代码。</li></ul></li><li>开发分支（Develop）<ul><li><code>develop</code> 分支通常是一个集成分支，包含最新的开发代码。完成的功能分支会合并到 <code>develop</code> 分支。</li></ul></li><li>功能分支（Feature Branches）<ul><li>功能分支用于开发新的功能。通常从 <code>develop</code> 分支创建，完成后合并回 <code>develop</code> 分支。</li><li>命名示例：<code>feature/awesome-feature</code></li></ul></li><li>修复分支（Hotfix Branches）<ul><li>修复分支用于紧急修复生产环境中的 bug。通常从 <code>main</code> 或 <code>master</code> 分支创建，修复完成后合并回 <code>main</code> 和 <code>develop</code> 分支。</li><li>命名示例：<code>hotfix/urgent-bugfix</code></li></ul></li><li>发布分支（Release Branches）<ul><li>发布分支用于准备新的发布版本。通常从 <code>develop</code> 分支创建，完成后合并回 <code>main</code> 和 <code>develop</code> 分支。</li><li>命名示例：<code>release/1.0.0</code></li></ul></li></ol><p><strong>网页查看分支</strong></p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032321308.png" alt="image-20240603232154262" style="zoom: 50%;"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建分支（不常用）：</span></span><br><span class="line">$ git branch NEW_BRANCH_NAME</span><br><span class="line"><span class="comment"># 注意：如果创建的分支基于某个分支去创建，则创建的分支继承了原分支所有的代码</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032332839.png" alt="image-20240603233228809"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换分支：</span></span><br><span class="line">$ git checkout BRANCH_NAME</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032333237.png" alt="image-20240603233337208"></p><blockquote><p><code>提示：此时在develop分支中所有的操作都不会影响master分支</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建分支并切换到新分支（常用）</span></span><br><span class="line">$ git checkout -b NEW_BRANCH_NAME</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032336037.png" alt="image-20240603233612005"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本地仓库所有分支：</span></span><br><span class="line">$ git branch</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032337609.png" alt="image-20240603233726577"></p><blockquote><p><strong>注意：上述图片中是本地分支，并不是远程仓库分支。记得把本地分支推送至远程仓库哟！<code>嘿嘿</code></strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看远程仓库的所有分支：</span></span><br><span class="line">$ git branch -r</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032340977.png" alt="image-20240603234022942"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看远程和本地所有分支：</span></span><br><span class="line">$ git branch -a</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032341052.png" alt="image-20240603234142016"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同步新分支到远程仓库</span></span><br><span class="line">$ git push origin NEW_BRANCH_NAME</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032344376.png" alt="image-20240603234400316"></p><p><strong>Gitee查看分支</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032345331.png" alt="image-20240603234510256"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除本地分支</span></span><br><span class="line">$ git branch -d BRANCH_NAME</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032349881.png" alt="image-20240603234919852"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 强制本地删除分支</span></span><br><span class="line">$ git branch -D BRANCH_NAME</span><br></pre></td></tr></table></figure><blockquote><p>注意： -d 在删除会对删除的分支做一个校验，确保该分支已经合并，如果没有则会出现报错</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除远程仓库分支</span></span><br><span class="line">$ git push origin --delete BRANCH_NAME</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032353675.png" alt="image-20240603235328641"></p><p><strong>Gitee查看</strong></p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406032354159.png" alt="image-20240603235414100" style="zoom:50%;"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并分支：</span></span><br><span class="line">$ git merge BRANCH_NAME</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406040001878.png" alt="image-20240604000137802"></p><h3 id="Git版本管理"><a href="#Git版本管理" class="headerlink" title="Git版本管理"></a>Git版本管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看仓库做了哪些更改</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406040738610.png" alt="image-20240604073817490"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看当前环境文件变更状态：</span></span><br><span class="line">$ git status</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406040739341.png" alt="image-20240604073944310"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看修改了什么内容：</span></span><br><span class="line">$ git diff FILE_NAME</span><br><span class="line"><span class="comment"># - 删除了某行</span></span><br><span class="line"><span class="comment"># + 添加的行</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406040744736.png" alt="image-20240604074435676"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对比两个版本的差异：</span></span><br><span class="line">$ git diff COMMIT_ID COMMIT_ID</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 撤销单个文件的修改：</span></span><br><span class="line">$ git checkout -- FILE_NAME</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406040746164.png" alt="image-20240604074602118"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406040747326.png" alt="image-20240604074752294"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 撤销所有文件的修改：</span></span><br><span class="line">$ git reset --hard</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406040750664.png" alt="image-20240604075014592"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回滚到某个版本</span></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/qf2401 (master)</span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit de60c5699a7e3ed3f5f69e830528238c3223fd4b (HEAD -&gt; master, origin/master)</span><br><span class="line">Author: jiaming &lt;hjm131641@163.com&gt;</span><br><span class="line">Date:   Wed Jun 5 07:25:27 2024 +0800</span><br><span class="line"></span><br><span class="line">    添加了111文件</span><br><span class="line"></span><br><span class="line">commit 67ac296cc6f13e3174beb135179179a76b67c11e</span><br><span class="line">Author: jiaming &lt;hjm131641@163.com&gt;</span><br><span class="line">Date:   Wed Jun 5 07:23:25 2024 +0800</span><br><span class="line"></span><br><span class="line">    first master</span><br><span class="line"></span><br><span class="line">commit ac5b719ef4ed2e97ff6c9237d071fdb570bc96ed (develop)</span><br><span class="line">Author: jiaming &lt;hjm131641@163.com&gt;</span><br><span class="line">Date:   Tue Jun 4 16:00:02 2024 +0800</span><br><span class="line"></span><br><span class="line">    我新添加了一个字段</span><br><span class="line"></span><br><span class="line">commit c784c2d15d5a0c58ad40150bfd263d2ffb7bfdb7</span><br><span class="line">Author: jiaming &lt;2423737643@qq.com&gt;</span><br><span class="line">Date:   Tue Jun 4 07:46:22 2024 +0000</span><br><span class="line"></span><br><span class="line">    update REDME.md.</span><br><span class="line"></span><br><span class="line">    Signed-off-by: jiaming &lt;2423737643@qq.com&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lenovo@LAPTOP-P0AL7U72 MINGW64 ~/Desktop/qf2401 (master)</span><br><span class="line">$ git reset --hard ac5b719ef4ed2e97ff6c9237d071fdb570bc96ed</span><br><span class="line">HEAD is now at ac5b719 我新添加了一个字段</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406050757619.png" alt="image-20240605075654565"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把回滚的内容强制推送至远程仓库</span></span><br><span class="line">$ git push origin --force</span><br></pre></td></tr></table></figure><h3 id="1-版本控制系统："><a href="#1-版本控制系统：" class="headerlink" title="1. 版本控制系统："></a>1. 版本控制系统：</h3><p>git   分布式  —没有中心代码库，所有机器之间的地位同等（每台机器上都有相同的代码）</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1569162553917.png#id=zet6v&originHeight=606&originWidth=501&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt=" "></p><p>svn  集中管理的 —有中心代码库，其他都是客户端</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1569162546959.png#id=fNnhX&originHeight=363&originWidth=518&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><h3 id="2-git与svn介绍"><a href="#2-git与svn介绍" class="headerlink" title="2.git与svn介绍"></a>2.git与svn介绍</h3><h5 id="1-git属于分布式版本控制系统"><a href="#1-git属于分布式版本控制系统" class="headerlink" title="1.git属于分布式版本控制系统"></a><strong>1.git属于</strong>分布式版本控制系统</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">客户端并不只提取最新版本的文件，而是把原始的代码仓库完整地克隆下来。</span><br><span class="line">优点：</span><br><span class="line">a.由于任何人每次提取操作，实际上都是一次对代码仓库的完整备份，因此近乎所有的操作都可以在本地执行，速度就是相当的快，并且可以在网络断开的时候操作仍然不受影响，可以频繁的进行提交更新，等到有网络的时候再上传到远程的仓库就可以了。</span><br><span class="line">b.git的分支模型，相当的轻量级，被称为“必杀技”。</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">a.每个开发人员都拥有所有的代码，不利于核心代码的保密（如果有重要代码需要保密，则不建议使用git）</span><br></pre></td></tr></table></figure><h5 id="2-svn属于集中式的版本控制系统"><a href="#2-svn属于集中式的版本控制系统" class="headerlink" title="2.svn属于集中式的版本控制系统"></a><strong>2.svn属于</strong>集中式的版本控制系统</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的成员通过客户端连接到这台服务器，进行文件上传和更新。</span><br><span class="line"></span><br><span class="line">优点：</span><br><span class="line">a.使用简单，比较符合我们的常规思维</span><br><span class="line">b.同步代码比较简单，只要一步操作即可。</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">a.丢失数据的风险：最显而易见的，由于集中化的特点，如果版本库的服务器磁盘发生故障等，你不能保证所有的数据已经有人提取出来了，最坏的情况是彻底的丢失整个项目的所有历史更改记录。</span><br><span class="line">b.网络中断的情况下，协作就无法进行了，因为无法连接服务器进行上传和更新。</span><br></pre></td></tr></table></figure><p>面试题：Git和SVN的区别？</p><h3 id="3-git-相关概念—纯命令行"><a href="#3-git-相关概念—纯命令行" class="headerlink" title="3.git 相关概念—纯命令行"></a>3.git 相关概念—纯命令行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">工作区</span><br><span class="line">版本库</span><br><span class="line">暂存区</span><br><span class="line">HEAD</span><br><span class="line">版本号</span><br><span class="line">版本日志</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.工作区（Working Directory）</span><br><span class="line">存放git版本仓库的目录就是工作区（放源代码的地方）</span><br><span class="line"></span><br><span class="line">2.暂存区：</span><br><span class="line">Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，（会将代码添加到缓存区，没有问题之后在提交到版本库）</span><br><span class="line"></span><br><span class="line">3.版本库（Repository）</span><br><span class="line">工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</span><br><span class="line"></span><br><span class="line">4.HEAD:指向你最近一次提交后的结果。（现在是哪个版本，头就会指向这个版本）</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565333052161.png#id=yxUDQ&originHeight=338&originWidth=609&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1570262838271.png#id=AJLkd&originHeight=328&originWidth=609&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p>1.添加文件到暂存区：</p><p>创建两个文件add到stage：<br>#git add  文件名<br>或者<br>#git add  *</p><p>从暂存区(stage)提交到当前master分支的HEAD：</p><p>git commit -m “版本描述信息”          #提交暂存区里的修改到版本库的分支</p><p>版本号：最核心用的是id号。每个版本都会有一个id号，也就是commit id，</p><p>查看版本号：<br>版本号可以通过版本日志查看</p><p>commit完成的功能类似快照，可以使用git log查看每次的commit记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@vm20 gittest]# git log</span><br><span class="line">commit fbecfa3d04ae5038aa11bf55942e46c840077ace                  //id号</span><br></pre></td></tr></table></figure><h3 id="二、git部署"><a href="#二、git部署" class="headerlink" title="二、git部署"></a>二、git部署</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">环境：</span><br><span class="line">    git-server    192.168.246.214  充当中心代码仓库服务器</span><br><span class="line">    client        192.168.246.213</span><br><span class="line"></span><br><span class="line">所有机器关闭防火墙和selinux</span><br><span class="line"></span><br><span class="line">安装：所有机器都安装</span><br><span class="line">   [root@git-server ~]# yum install -y git</span><br><span class="line">   [root@git-server ~]# git --version </span><br><span class="line">   git version 1.8.3.1</span><br><span class="line">   </span><br><span class="line">准备：</span><br><span class="line">    因为Git是分布式版本控制系统，所以，每个机器都必须注册：你的名字和Email地址。</span><br><span class="line">    注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置。</span><br><span class="line"></span><br><span class="line">所有的机器都添加，只要邮箱和用户不一样就可以。   </span><br><span class="line">    # git config --global user.email "soho@163.com"     ----设置邮箱</span><br><span class="line">    # git config --global user.name "soho"                   ----加添用户</span><br><span class="line">    # cat /root/.gitconfig</span><br><span class="line">    # git config --global color.ui true#语法高亮</span><br><span class="line">    # git config --list#查看全局配置</span><br></pre></td></tr></table></figure><h4 id="1、git使用"><a href="#1、git使用" class="headerlink" title="1、git使用"></a>1、git使用</h4><p><strong>创建版本库:</strong></p><p>1.创建一个空目录<strong>：</strong>在中心服务器上创建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@git-server ~]# mkdir /git-test</span><br><span class="line">[root@git-server ~]# useradd git   #创建一个git用户用来运行git</span><br><span class="line">[root@git-server ~]# passwd git  #给用户设置密码git</span><br><span class="line">[root@git-server ~]# cd /git-test/</span><br></pre></td></tr></table></figure><p>2.通过git init命令把这个目录变成Git可以管理的仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第1种情况：可以改代码，还能上传到别人的机器，别人也能从你这里下载但是别人不能上传代码到你的机器上。</span><br><span class="line">第2种情况：只是为了上传代码用，别人从这台机器上下载代码也可以上传代码到这台机器上，经常用于核心代码库。</span><br></pre></td></tr></table></figure><p><strong>创建裸库</strong>：  适用于作为远程中心仓库使用<br>创建裸库才可以从别处push（传）代码过来，使用–bare参数——裸</p><h1 id="git-init-–bare-库名字"><a href="#git-init-–bare-库名字" class="headerlink" title="git init –bare  库名字"></a>git init –bare  库名字</h1><p><strong>创建一裸库</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@git-server git-test]# git init --bare testgit</span><br><span class="line">Initialized empty Git repository in /git-test/testgit/</span><br><span class="line">[root@git-server ~]# chown git.git /git-test -R  #修改权限</span><br><span class="line">2.仓库创建完成后查看库目录：</span><br><span class="line">[root@git-server git-test]# cd testgit/</span><br><span class="line">[root@git-server testgit]# ls</span><br><span class="line">branches  config  description  HEAD  hooks  info  objects  refs</span><br></pre></td></tr></table></figure><h4 id="1-客户端"><a href="#1-客户端" class="headerlink" title="1.客户端"></a>1.客户端</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.配置免密登录</span><br><span class="line">[root@client ~]# ssh-keygen    #生成秘钥</span><br><span class="line">[root@client ~]# ssh-copy-id -i git@192.168.246.214   #将秘钥传输到git服务器中的git用户</span><br><span class="line">2.克隆git仓库</span><br><span class="line">[root@client ~]# yum install -y git</span><br><span class="line">[root@client ~]# git clone git@192.168.246.214:/git-test/testgit/</span><br><span class="line">Cloning into 'testgit'...</span><br><span class="line">warning: You appear to have cloned an empty repository.</span><br><span class="line">[root@client ~]# ls  #查看仓库已经克隆下来了</span><br><span class="line">anaconda-ks.cfg    testgit</span><br></pre></td></tr></table></figure><p>1.创建文件模拟代码提交到仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">1.在testgit目录下创建一个测试文件test.txt</span><br><span class="line">[root@client ~]# cd testgit/</span><br><span class="line">[root@client testgit]# vim test.txt   #随便写点东西</span><br><span class="line"></span><br><span class="line">2.把文件添加到暂存区：使用 "git add" 建立跟踪</span><br><span class="line">[root@client testgit]# git add test.txt</span><br><span class="line">注: 这里可以使用 git add * 或者 git add -A</span><br><span class="line"></span><br><span class="line">3.提交文件到仓库分支：</span><br><span class="line">[root@client testgit]# git commit -m "test1"</span><br><span class="line">[master (root-commit) 2b51ff9] test1</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 test.txt</span><br><span class="line"> -m:描述</span><br><span class="line"> </span><br><span class="line"> 4.查看git状态：</span><br><span class="line">[root@client testgit]# git status </span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master   <span class="comment">#分支位于master</span></span></span><br><span class="line">5.修改文件后再此查看状态：</span><br><span class="line">[root@client testgit]# echo '1122334' &gt;&gt; test.txt</span><br><span class="line">[root@client testgit]# git status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 位于分支 master</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 尚未暂存以备提交的变更：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   （使用 <span class="string">"git add &lt;file&gt;..."</span> 更新要提交的内容）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   （使用 <span class="string">"git checkout -- &lt;file&gt;..."</span> 丢弃工作区的改动）</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">修改：      readme.txt</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line">修改尚未加入提交（使用 "git add" 和/或 "git commit "</span><br><span class="line">6.先add</span><br><span class="line">[root@client testgit]# git add -A</span><br><span class="line">8.再次提交commit：</span><br><span class="line">[root@client testgit]# git commit  -m "add2"</span><br><span class="line">[master 73bf688] add2</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> [root@client testgit]# git status </span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure><h4 id="2、版本回退"><a href="#2、版本回退" class="headerlink" title="2、版本回退"></a>2、版本回退</h4><p>已经提交了不合适的修改到版本库时，想要撤销本次提交，使用版本回退，不过前提是没有推送到远程库。</p><p><strong>查看现在的版本：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@client testgit]# git log</span><br><span class="line">显示的哪个版本在第一个就是当前使用的版本。</span><br></pre></td></tr></table></figure><p><strong>版本回退(切换)：</strong><br>在Git中，上一个版本就是HEAD^，当然往上100个版本写100个比较容易数不过来，所以写成HEAD~100（一般使用id号来恢复）</p><p>回到上一个版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@client testgit]# git reset --hard HEAD^ </span><br><span class="line">HEAD is now at 0126755 test1</span><br><span class="line">2.回到指定的版本(根据版本号): </span><br><span class="line">[root@client testgit]# git reset --hard dd66ff</span><br><span class="line">HEAD is now at dd66ff9 add2</span><br><span class="line">==========================================================</span><br><span class="line">注：消失的ID号：</span><br><span class="line">回到早期的版本后再查看git log会发现最近的版本消失，可以使用reflog查看消失的版本ID，用于回退到消失的版本</span><br><span class="line">[root@vm20 gittest]# git reflog</span><br><span class="line">2a85982 HEAD@&#123;0&#125;: reset: moving to 2a859821a2385e136fe83f3a206b287eb0eb8c18</span><br><span class="line">f5bc8c1 HEAD@&#123;1&#125;: commit: test-version2</span><br><span class="line">2a85982 HEAD@&#123;2&#125;: commit (initial): test-version1</span><br><span class="line"></span><br><span class="line">[root@git-client testgit]# git reset --hard f5bc8c1</span><br></pre></td></tr></table></figure><h4 id="3、删除文件"><a href="#3、删除文件" class="headerlink" title="3、删除文件"></a>3、<strong>删除文件</strong></h4><p>从工作区删除test.txt，并且从版本库一起删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">工作区：</span><br><span class="line">[root@client testgit]# touch test.txt</span><br><span class="line">[root@client testgit]# git status</span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Untracked files:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       qf.txt</span></span><br><span class="line">nothing added to commit but untracked files present (use "git add" to track)</span><br><span class="line">[root@client testgit]# rm -rf test.txt  未添加到暂存区，可直接删除</span><br><span class="line">[root@client testgit]# git status</span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line">nothing to commit, working directory clean</span><br><span class="line"></span><br><span class="line">+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">已从工作区提交到暂存区：</span><br><span class="line">第一种方法</span><br><span class="line">[root@client testgit]# touch test.txt</span><br><span class="line">[root@client testgit]# git status</span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initial commit</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Untracked files:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       test.txt</span></span><br><span class="line">nothing added to commit but untracked files present (use "git add" to track)</span><br><span class="line"></span><br><span class="line">[root@client testgit]# git add test.txt</span><br><span class="line">[root@client testgit]# git status</span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initial commit</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Changes to be committed:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       new file:   test.txt</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"></span><br><span class="line">[root@client testgit]#  git rm --cache test.txt #从暂存区移除</span><br><span class="line">rm 'test.txt'</span><br><span class="line">[root@client testgit]# ls</span><br><span class="line">test.txt</span><br><span class="line">[root@client testgit]# git status</span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initial commit</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Untracked files:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       test.txt</span></span><br><span class="line">nothing added to commit but untracked files present (use "git add" to track)</span><br><span class="line">[root@client testgit]# rm -rf test.txt </span><br><span class="line">[root@client testgit]# git status</span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initial commit</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line">nothing to commit (create/copy files and use "git add" to track)</span><br><span class="line"></span><br><span class="line">第二种方法：</span><br><span class="line">[root@client testgit]# touch  b.txt</span><br><span class="line">[root@client testgit]# git add b.txt </span><br><span class="line">[root@client testgit]# git status</span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initial commit</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Changes to be committed:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       new file:   b.txt</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line">[root@client testgit]# git rm -f b.txt </span><br><span class="line">rm 'b.txt'</span><br><span class="line">[root@client testgit]# ls</span><br><span class="line">[root@client testgit]# git status</span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initial commit</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line">nothing to commit (create/copy files and use "git add" to track)</span><br><span class="line"></span><br><span class="line">+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">直接在暂存区rm掉文件，如何解决</span><br><span class="line">[root@client testgit]# touch c.txt</span><br><span class="line">[root@client testgit]# git add c.txt </span><br><span class="line">[root@client testgit]# ls</span><br><span class="line">c.txt</span><br><span class="line">[root@client testgit]# git status</span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initial commit</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Changes to be committed:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       new file:   c.txt</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line">[root@client testgit]# rm -rf c.txt </span><br><span class="line">[root@client testgit]# git status</span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initial commit</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Changes to be committed:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       new file:   c.txt</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Changes not staged <span class="keyword">for</span> commit:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git add/rm &lt;file&gt;..."</span> to update what will be committed)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       deleted:    c.txt</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line">[root@client testgit]# git rm --cache c.txt</span><br><span class="line">rm 'c.txt'</span><br><span class="line">[root@client testgit]# ls</span><br><span class="line">[root@client testgit]# git status</span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initial commit</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line">nothing to commit (create/copy files and use "git add" to track)</span><br><span class="line">[root@client testgit]# </span><br><span class="line">+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br></pre></td></tr></table></figure><h4 id="4、修改文件"><a href="#4、修改文件" class="headerlink" title="4、修改文件"></a>4、修改文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">暂存区修改名称</span><br><span class="line">[root@client testgit]# touch  a.txt</span><br><span class="line">[root@client testgit]# git status</span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Untracked files:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       a.txt</span></span><br><span class="line">nothing added to commit but untracked files present (use "git add" to track)</span><br><span class="line">[root@client testgit]# git add a.txt </span><br><span class="line">[root@client testgit]# git status</span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Changes to be committed:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       new file:   a.txt</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line">[root@client testgit]# git mv a.txt  d.txt</span><br><span class="line">[root@client testgit]# git status</span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Changes to be committed:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       new file:   d.txt</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line">[root@client testgit]# ls</span><br><span class="line">d.txt  test.txt</span><br><span class="line">[root@client testgit]# git rm --cache d.txt</span><br><span class="line">[root@client testgit]# rm -rf d.txt</span><br></pre></td></tr></table></figure><h4 id="5、将代码上传到仓库的master分支"><a href="#5、将代码上传到仓库的master分支" class="headerlink" title="5、将代码上传到仓库的master分支"></a>5、将代码上传到仓库的master分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@client testgit]# vi a.txt   #创建一个新文件</span><br><span class="line">hello world</span><br><span class="line">[root@client testgit]# git add a.txt </span><br><span class="line">[root@client testgit]# git commit -m "add"</span><br><span class="line">[root@client testgit]# git push origin master   #上传到中心仓库master分支</span><br><span class="line">Counting objects: 11, done.</span><br><span class="line">Compressing objects: 100% (4/4), done.</span><br><span class="line">Writing objects: 100% (11/11), 828 bytes | 0 bytes/s, done.</span><br><span class="line">Total 11 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@192.168.246.214:/git-test/testgit/</span><br><span class="line"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure><p>测试:</p><p>在客户端将仓库删除掉然后在克隆下来查看仓库中是否有文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@client testgit]# cd</span><br><span class="line">[root@client ~]# rm -rf testgit/</span><br><span class="line">[root@client ~]# git clone git@192.168.246.214:/git-test/testgit/</span><br><span class="line">Cloning into 'testgit'...</span><br><span class="line">remote: Counting objects: 11, done.</span><br><span class="line">remote: Compressing objects: 100% (4/4), done.</span><br><span class="line">remote: Total 11 (delta 0), reused 0 (delta 0)</span><br><span class="line">Receiving objects: 100% (11/11), done.</span><br><span class="line">[root@client ~]# cd testgit/</span><br><span class="line">[root@client testgit]# ls</span><br><span class="line">a.txt</span><br><span class="line">[root@client testgit]# cat a.txt </span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><h3 id="三、创建分支并合并分支"><a href="#三、创建分支并合并分支" class="headerlink" title="三、创建分支并合并分支"></a>三、创建分支并合并分支</h3><p>每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即<code>master</code>分支。<code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。</p><p>在客户端操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@client ~]# git clone git@192.168.246.214:/git-test/testgit/</span><br><span class="line">[root@client testgit]# git status </span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master   <span class="comment">#当前所在为master分支</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initial commit</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line">nothing to commit (create/copy files and use "git add" to track)</span><br><span class="line">注意：刚创建的git仓库默认的master分支要在第一次commit之后才会真正建立。然后先git add .添加所有项目文件到本地仓库缓存，再git commit -m "init commit"提交到本地仓库，之后就可以随心所欲地创建或切换分支了。</span><br><span class="line">创建分支:</span><br><span class="line">[root@client testgit]# git branch dev   #创建分支。</span><br><span class="line">[root@client testgit]# git branch    #查看分支。*在哪里就表示当前是哪个分支</span><br><span class="line">  dev</span><br><span class="line">* master</span><br><span class="line">切换分支:</span><br><span class="line">[root@client testgit]# git checkout dev</span><br><span class="line">Switched to branch 'dev'</span><br><span class="line">[root@client testgit]# git branch </span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">在dev分支创建一个文件；</span><br><span class="line">[root@client testgit]# vi test.txt</span><br><span class="line">[root@client testgit]# git add test.txt </span><br><span class="line">[root@client testgit]# git commit -m "add dev"</span><br><span class="line">[dev f855bdf] add dev</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 test.txt</span><br><span class="line">现在，dev分支的工作完成，我们就可以切换回master分支：</span><br><span class="line"> [root@client testgit]# git checkout master</span><br><span class="line">Switched to branch 'master'</span><br></pre></td></tr></table></figure><p>切换回<code>master</code>分支后，再查看一个<code>test.txt</code>文件，刚才添加的内容不见了！因为那个提交是在<code>dev</code>分支上，而<code>master</code>分支此刻的提交点并没有变：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@client testgit]# ls</span><br><span class="line">a.txt</span><br></pre></td></tr></table></figure><p>现在，我们把<code>dev</code>分支的工作成果合并到<code>master</code>分支上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@client testgit]# git merge dev</span><br><span class="line">Updating 40833e0..f855bdf</span><br><span class="line">Fast-forward</span><br><span class="line"> test.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 test.txt</span><br><span class="line">[root@client testgit]# ls</span><br><span class="line">a.txt  test.txt</span><br><span class="line">现在已经将dev分支的内容合并到master上。确认没有问题上传到远程仓库:</span><br><span class="line">[root@client testgit]# git push origin master</span><br></pre></td></tr></table></figure><p><code>git merge</code>命令用于合并指定分支到当前分支。合并后，再查看<code>test.txt</code>的内容，就可以看到，和<code>dev</code>分支的最新提交是完全一样的。</p><p>合并完成后，就可以放心地删除<code>dev</code>分支了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@client testgit]# git branch -d dev</span><br><span class="line">Deleted branch dev (was f855bdf).</span><br></pre></td></tr></table></figure><p>删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@client testgit]# git branch </span><br><span class="line">* master</span><br></pre></td></tr></table></figure><h2 id="部署gitlab服务"><a href="#部署gitlab服务" class="headerlink" title="部署gitlab服务"></a>部署gitlab服务</h2><p>准备环境:  关闭防火墙和selinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.246.214  #gitlab服务器</span><br></pre></td></tr></table></figure><p>1.配置yum源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@git-server ~]# cd /etc/yum.repos.d/</span><br><span class="line">[root@git-server yum.repos.d]# vi gitlab-ce.repo</span><br><span class="line">[gitlab-ce]</span><br><span class="line">name=Gitlab CE Repository</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">安装相关依赖</span><br><span class="line">[root@git-server yum.repos.d]# yum install -y postfix curl policycoreutils-python openssh-server</span><br><span class="line">[root@git-server yum.repos.d]# systemctl enable sshd</span><br><span class="line">[root@git-server yum.repos.d]# systemctl start sshd</span><br><span class="line">安装postfix</span><br><span class="line">[root@git-server yum.repos.d]# yum install postfix  -y   #安装邮箱</span><br><span class="line">[root@git-server yum.repos.d]# systemctl enable postfix</span><br><span class="line">[root@git-server yum.repos.d]# systemctl start postfix</span><br><span class="line">[root@git-server yum.repos.d]# yum install -y gitlab-ce  #将会安装gitlab最新版本</span><br></pre></td></tr></table></figure><p>配置gitlab登录链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@git-server ~]# vim /etc/gitlab/gitlab.rb</span><br><span class="line">1.# 添加对外的域名（gitlab.papamk.com请添加A记录指向本服务器的公网IP）：将原来的修改为</span><br><span class="line">external_url 'http://192.168.246.214'</span><br><span class="line">2.设置地区</span><br><span class="line">gitlab_rails['time_zone'] = 'Asia/Shanghai'</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565608710245.png#id=MrREw&originHeight=97&originWidth=757&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p>将数据路径的注释去掉，可以更改</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1569160187589.png#id=tgyur&originHeight=197&originWidth=448&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p>开启ssh服务:</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1569160284570.png#id=Wo9Z4&originHeight=126&originWidth=517&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p>初始化Gitlab:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git-server ~]# gitlab-ctl reconfigure   #重新加载，需要等很长时间</span><br></pre></td></tr></table></figure><p>…</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565609606025.png#id=uJbWU&originHeight=231&originWidth=1201&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/23214851/1678269039108-af471574-abf7-4a49-9676-eeb975ed8634.png#averageHue=%230e0b0a&clientId=ud1472ba6-6034-4&from=paste&height=387&id=u0f1a19c2&originHeight=484&originWidth=1584&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=48664&status=done&style=none&taskId=u25a89faa-be67-4eb9-82f5-5b374c470e2&title=&width=1267.2" alt="image.png"></p><p>…</p><p>启动Gitlab服务:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git-server ~]# gitlab-ctl start  #启动</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565611373574.png#id=ZIbLl&originHeight=381&originWidth=500&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt><br>在gitlab14版本以上，会有默认的root用户，密码存在/etc/gitlab/initial_root_password<br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1665390163318-ce29218e-37b4-4695-a286-2cef61b68341.png#averageHue=%23110e0c&clientId=u82105d95-bd8a-4&from=paste&height=354&id=u2c2c9e2d&originHeight=443&originWidth=1907&originalType=binary&ratio=1&rotation=0&showTitle=false&size=58561&status=done&style=none&taskId=u0ac06ada-87ba-4a97-b67b-e492b1d679e&title=&width=1525.6" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1665390227373-c2bbb9a1-ed2f-4d17-80aa-b5ebd7ae164a.png#averageHue=%23faf7f7&clientId=u82105d95-bd8a-4&from=paste&height=526&id=udf93211e&originHeight=658&originWidth=1813&originalType=binary&ratio=1&rotation=0&showTitle=false&size=96180&status=done&style=none&taskId=u908e38df-4de9-4b29-9430-cb57e565e5a&title=&width=1450.4" alt="image.png"><br>Gitlab 设置 HTTPS 方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如果想要以上的 https 方式正常生效使用，则需要把 letsencrypt 自动生成证书的配置打开，这样在执行重</span><br><span class="line">新让配置生效命令 (gitlab-ctl reconfigure) 的时候会自动给域名生成免费的证书并自动在 gitlab 自带的</span><br><span class="line"> nginx 中加上相关的跳转配置，都是全自动的，非常方便。</span><br><span class="line">letsencrypt[&#39;enable&#39;] &#x3D; true </span><br><span class="line">letsencrypt[&#39;contact_emails&#39;] &#x3D; [&#39;caryyu@qq.com&#39;]     # 这应该是一组要添加为联系人的电子邮件地址</span><br></pre></td></tr></table></figure><p>测试访问:<a href="http://192.168.246.214/" target="_blank" rel="noopener">http://192.168.246.214</a></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/23214851/1678269170036-612a9b24-029a-441c-9384-11aee58f67f7.png#averageHue=%23fcfcfb&clientId=ud1472ba6-6034-4&from=paste&height=572&id=ua837e710&originHeight=715&originWidth=1590&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=78787&status=done&style=none&taskId=u8e0b076d-49a1-4653-9244-cbdba4f1d3f&title=&width=1272" alt="image.png"></p><p>用户为:root<br>密码:本人设置的密码是12345678</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565623375752.png#id=P1HyY&originHeight=739&originWidth=1610&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565623426334.png#id=BTnCa&originHeight=813&originWidth=1656&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565623540821.png#id=WdE33&originHeight=899&originWidth=1913&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565624343965.png#id=tXl0W&originHeight=571&originWidth=1349&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565623653858.png#id=ENgtQ&originHeight=998&originWidth=1864&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p>需要创建秘钥</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1570975815122.png#id=kysbb&originHeight=312&originWidth=390&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565623702669.png#id=hsigP&originHeight=931&originWidth=1828&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@client ~]# ssh-keygen</span><br><span class="line">[root@client ~]# cd .ssh/</span><br><span class="line">[root@client .ssh]# ls </span><br><span class="line">[root@client .ssh]# cat id_rsa.pub </span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0HeO8gaua13h9HCJK5RXVc/cjet9DpLYq2dqmQ0LXfP0Vwj6YjKxu7lE1i/4Y2cmu5lDe8bG22aikyaW38Fnz0bkGfEurdVZii/KCiHBz2lXS1ocuAdloJT4wnc2MUjh/gwc4FuNkWdYvpbMLXSSHIVjv8vB9YbHlPMTMy5N89kMwMmta5C87/8fBO5VtGijgGOueywM+xAzovlfoJbprV/ZBKkhiskSKz4fHyoGFGwllX3kMkNR/soGF5XXA+/99iO3UqSaloF0UzfUCgqfMfMVB5zDHGIB6uTrMe6ccfKp9gnVyD7m4Zmk7MwouBwAfMLIiHmvekBGXqb1YCTgJ root@client</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565624058819.png#id=og8Do&originHeight=866&originWidth=1549&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565624178664.png#id=IZJRq&originHeight=462&originWidth=1508&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565624224328.png#id=yxhRp&originHeight=931&originWidth=1832&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565624437658.png#id=TOWHA&originHeight=304&originWidth=846&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1570328552487.png#id=W0GUn&originHeight=496&originWidth=991&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1570328571506.png#id=iRfIF&originHeight=407&originWidth=863&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1570328591422.png#id=fM1rq&originHeight=566&originWidth=816&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1588670878842.png#id=ZGpsw&originHeight=512&originWidth=561&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p>创建一个文件:</p><p>1.newfile:先新建一个文件。<br>2.uploadfile:再上传即可。</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565625483341.png#id=bYJwo&originHeight=567&originWidth=1483&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565625592468.png#id=lkxMU&originHeight=855&originWidth=1387&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565625640933.png#id=pUF3G&originHeight=377&originWidth=1363&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p>上传一个文件：</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1588748354679.png#id=G0dDX&originHeight=308&originWidth=916&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565625920395.png#id=zsUGh&originHeight=577&originWidth=1202&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565625940144.png#id=JorMq&originHeight=495&originWidth=796&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565625991547.png#id=cYMGZ&originHeight=681&originWidth=1326&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565626014378.png#id=w3Zet&originHeight=508&originWidth=792&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565626038365.png#id=d0Dt8&originHeight=576&originWidth=1356&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565626050705.png#id=Hby47&originHeight=378&originWidth=1083&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565626301515.png#id=dXH33&originHeight=535&originWidth=1175&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565626323048.png#id=Fsu3d&originHeight=361&originWidth=1179&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565626346960.png#id=F9kL7&originHeight=338&originWidth=1332&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565626357793.png#id=Vsr1C&originHeight=260&originWidth=375&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1565626486555.png#id=xFWvT&originHeight=308&originWidth=472&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><h3 id="新建普通用户"><a href="#新建普通用户" class="headerlink" title="新建普通用户"></a>新建普通用户</h3><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1569165847777.png#id=oHScK&originHeight=698&originWidth=1085&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt><br><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1569165939543.png#id=ntAdf&originHeight=721&originWidth=1080&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1569165986396.png#id=fq8rR&originHeight=542&originWidth=1092&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1569166002625.png#id=urQwc&originHeight=592&originWidth=1065&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p>新添加的用户创建成功！</p><h3 id="Gitlab新建文件"><a href="#Gitlab新建文件" class="headerlink" title="Gitlab新建文件"></a>Gitlab新建文件</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/23214851/1678326499013-e554c294-34d3-43bc-884b-f0ec27dc7232.png#averageHue=%23f9f9f9&clientId=u5ded4a05-c9b7-4&from=paste&height=543&id=uf9cc6e7e&originHeight=679&originWidth=1304&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=68613&status=done&style=none&taskId=u7ec73b03-40d5-4533-8259-8d37c8f97e6&title=&width=1043.2" alt="image.png"></p><h3 id="在git客户端"><a href="#在git客户端" class="headerlink" title="在git客户端"></a>在git客户端</h3><p>ssh方式拉取代码<br><img src="https://cdn.nlark.com/yuque/0/2023/png/23214851/1678326190924-eddccf49-a2f8-4bef-b4ec-8c08a4ae0b0f.png#averageHue=%2392bd7b&clientId=u5ded4a05-c9b7-4&from=paste&height=322&id=u59766616&originHeight=403&originWidth=1842&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=65780&status=done&style=none&taskId=u4fa26fd5-148a-4960-8534-782b21251e9&title=&width=1473.6" alt="image.png"><br>查看客户端的公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@client ~]# cat /root/.ssh/id_rsa.pub </span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCodOD/MhqMO9VQAXlZ/dpZ9dsgwKfE8HBY4aA3z+GTyKbgGDWtSg/VFPyOlwcqxzUXhUf7zVCXHAQ0OKwsVpmaQTyOSyd1eqOjb+WBIt3OA8TjWIwkcb98rob0lKy73P0GYEWUyKP8rdzH/Gxkb6adbk+NhC/rm44xOwLs+3FEV5jCtAMHgCm3u6dRXz6gwWYxASYJE2MrQpqzz/fp9ZvkCo+BL+zAj4ly2IQLKjoUz2wjHaKjHhW2MbiDL68aqJXnuEqBVcwP45m6xkO4sFP2UH8N4KQervLhIxP0enANKC2VvmqSXLLU/qWNtB0Y1urYpdKkPUYHsTUFoD9WVXvn root@redis-3</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/23214851/1678326233806-32ccff1e-090a-4f7d-9b65-c1fe0936ca3d.png#averageHue=%23faf8f7&clientId=u5ded4a05-c9b7-4&from=paste&height=608&id=u8d114754&originHeight=760&originWidth=1854&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=120365&status=done&style=none&taskId=ua17f10c7-c028-4eae-ae99-f2d1b8907c8&title=&width=1483.2" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@client ~]# git clone git@192.168.246.214:root/testapp.git</span><br><span class="line">Cloning into 'testapp'...</span><br><span class="line">remote: Enumerating objects: 6, done.</span><br><span class="line">remote: Counting objects: 100% (6/6), done.</span><br><span class="line">remote: Compressing objects: 100% (4/4), done.</span><br><span class="line">remote: Total 6 (delta 0), reused 0 (delta 0)</span><br><span class="line">Receiving objects: 100% (6/6), done.</span><br><span class="line">[root@client ~]# ls</span><br><span class="line">testapp</span><br><span class="line">[root@client ~]# cd testapp/</span><br><span class="line">[root@client testapp]# ls</span><br><span class="line">test.txt  同步时间.txt</span><br><span class="line">[root@client testapp]#</span><br></pre></td></tr></table></figure><p>http方式拉取代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@client ~]# rm -rf testgit/</span><br><span class="line">[root@client ~]# git clone http://192.168.246.214/root/testapp.git</span><br><span class="line">Cloning into 'testapp'...</span><br><span class="line">Username for 'http://192.168.246.214': root</span><br><span class="line">Password for 'http://root@192.168.246.214':12345678  #为自己设置的密码</span><br><span class="line">remote: Enumerating objects: 6, done.</span><br><span class="line">remote: Counting objects: 100% (6/6), done.</span><br><span class="line">remote: Compressing objects: 100% (4/4), done.</span><br><span class="line">remote: Total 6 (delta 0), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (6/6), done.</span><br><span class="line">[root@client ~]# ls</span><br><span class="line">testapp</span><br></pre></td></tr></table></figure><h3 id="提交代码到gitlab仓库"><a href="#提交代码到gitlab仓库" class="headerlink" title="提交代码到gitlab仓库"></a>提交代码到gitlab仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@client testapp]# vim update.txt</span><br><span class="line">1000phone</span><br><span class="line">[root@client testapp]# git add .</span><br><span class="line">[root@client testapp]# git commit -m "update_version1"</span><br><span class="line">[master 091798d] update_version1</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 update.txt</span><br><span class="line"></span><br><span class="line">[root@nginx-server testapp2]# git push origin main</span><br><span class="line">Username for 'http://192.168.62.166': root</span><br><span class="line">Password for 'http://root@192.168.62.166': </span><br><span class="line">Counting objects: 4, done.</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (3/3), 307 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To http://192.168.62.166/root/testapp2.git</span><br><span class="line">   201f479..091798d  master -&gt; master</span><br></pre></td></tr></table></figure><h3 id="调整上传文件的大小"><a href="#调整上传文件的大小" class="headerlink" title="调整上传文件的大小"></a>调整上传文件的大小</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/23214851/1678327355423-26c31a72-8ec7-493e-9dc5-a6e70d7bd076.png#averageHue=%23f2e9e5&clientId=u5ded4a05-c9b7-4&from=paste&height=689&id=ufad65cd5&originHeight=861&originWidth=1839&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=122844&status=done&style=none&taskId=ub24bc53d-0f03-4da9-ba96-f6dea9466e6&title=&width=1471.2" alt="image.png"></p><p>默认是10M，可根据情况调整<br><img src="https://cdn.nlark.com/yuque/0/2023/png/23214851/1678327395712-6918de21-86a7-495c-bf93-2a94bb20a67c.png#averageHue=%23f3f3f3&clientId=u5ded4a05-c9b7-4&from=paste&height=352&id=u2c85a853&originHeight=440&originWidth=1230&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=36058&status=done&style=none&taskId=ud3154564-7347-41dd-9c7f-bfa3bf869d3&title=&width=984" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">拓展：</span><br><span class="line">1.cat /proc/swaps 查看swap分区是否启动（无）</span><br><span class="line">2.创建 ：</span><br><span class="line">dd if=/dev/zero of=/data/swap bs=512 count=8388616</span><br><span class="line">创建swap大小为bs*count=4294971392(4G)；</span><br><span class="line">/data/swap目录若无则找/mnt/swap</span><br><span class="line">3.通过mkswap命令将上述空间制作成swap分区：</span><br><span class="line">mkswap /data/swap</span><br><span class="line">4.查看内核参数vm.swappiness中的数值是否为0，如果为0则根据实际需要调 整成60：</span><br><span class="line">查看： cat /proc/sys/vm/swappiness</span><br><span class="line">设置： sysctl -w vm.swappiness=60</span><br><span class="line">若想永久修改，则编辑/etc/sysctl.conf文件，改文件中有vm.swappiness变量配置，默认为0</span><br><span class="line">5.启用分区：</span><br><span class="line">swapon /data/swap</span><br><span class="line">echo “/data/swap swap swap defaults 0 0” &gt;&gt; /etc/fstab</span><br><span class="line">6.再次使用cat /proc/swaps 查看swap分区是否启动</span><br></pre></td></tr></table></figure><h3 id="tag版本推送"><a href="#tag版本推送" class="headerlink" title="tag版本推送"></a>tag版本推送</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@git-client testweb]# vim e.txt</span><br><span class="line">hello eee</span><br><span class="line">[root@git-client testweb]# git add *</span><br><span class="line">[root@git-client testweb]# git commit -m "new e.txt"</span><br><span class="line">[root@git-client testweb]# git tag -a "v1.1" -m "new e.txt"</span><br><span class="line">[root@git-client testweb]# git push origin v1.1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1670832397607-c05eb909-672c-473f-bfa3-fe1e648d1eb4.png#averageHue=%23fbfbfa&clientId=udc9ff9b1-e17f-4&from=paste&height=407&id=ue0f8000f&originHeight=509&originWidth=1262&originalType=binary&ratio=1&rotation=0&showTitle=false&size=41843&status=done&style=none&taskId=ud75dcea7-9074-4564-ba0e-f70d1e6ca44&title=&width=1009.6" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1670832377022-43ca2fb5-9493-4f5c-ac92-24b469333621.png#averageHue=%23fcfbfb&clientId=udc9ff9b1-e17f-4&from=paste&height=174&id=u94e1fe07&originHeight=217&originWidth=1534&originalType=binary&ratio=1&rotation=0&showTitle=false&size=18867&status=done&style=none&taskId=ua3dd1e22-c80a-4b8a-999c-6a7d1581e0a&title=&width=1227.2" alt="image.png"></p><h3 id="分支版本推送"><a href="#分支版本推送" class="headerlink" title="分支版本推送"></a>分支版本推送</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@git-client testweb]# git branch dev</span><br><span class="line">[root@git-client testweb]# git branch</span><br><span class="line">  dev</span><br><span class="line">* master</span><br><span class="line">[root@git-client testweb]# git checkout dev</span><br><span class="line">Switched to branch 'dev'</span><br><span class="line">[root@git-client testweb]# ls</span><br><span class="line">b.txt  c.txt  d.txt</span><br><span class="line">[root@git-client testweb]# vim dev.txt</span><br><span class="line">[root@git-client testweb]# git add *</span><br><span class="line">[root@git-client testweb]# git commit -m "new dev branch"</span><br><span class="line">[dev 6c3fea1] new dev branch</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 dev.txt</span><br><span class="line">[root@git-client testweb]# git push origin dev</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1670832570010-d048e08b-d954-498e-a26e-1d8302749129.png#averageHue=%23fcfbfb&clientId=udc9ff9b1-e17f-4&from=paste&height=497&id=u5ea3a29b&originHeight=621&originWidth=1387&originalType=binary&ratio=1&rotation=0&showTitle=false&size=40338&status=done&style=none&taskId=u9f0789bc-059a-4cc5-a4b6-7150ff37b33&title=&width=1109.6" alt="image.png"></p><h2 id="Gitlab-备份与恢复"><a href="#Gitlab-备份与恢复" class="headerlink" title="Gitlab 备份与恢复"></a>Gitlab 备份与恢复</h2><h3 id="1、查看系统版本和软件版本"><a href="#1、查看系统版本和软件版本" class="headerlink" title="1、查看系统版本和软件版本"></a>1、查看系统版本和软件版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@git-server ~]# cat /etc/redhat-release </span><br><span class="line">CentOS Linux release 7.4.1708 (Core)</span><br><span class="line"></span><br><span class="line">[root@git-server ~]# cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</span><br><span class="line">8.15.4</span><br></pre></td></tr></table></figure><h3 id="2、数据备份"><a href="#2、数据备份" class="headerlink" title="2、数据备份"></a>2、数据备份</h3><p>打开/etc/gitlab/gitlab.rb配置文件，查看一个和备份相关的配置项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@git-server backups]# vim /etc/gitlab/gitlab.rb</span><br><span class="line">gitlab_rails['backup_path'] = "/var/opt/gitlab/backups"#备份的路径</span><br><span class="line">gitlab_rails['backup_archive_permissions'] = 0644#备份文件的默认权限</span><br><span class="line">gitlab_rails['backup_keep_time'] = 604800#保留时长，秒为单位</span><br></pre></td></tr></table></figure><p>设置备份保留时长，防止每天执行备份，肯定有目录被爆满的风险，打开/etc/gitlab/gitlab.rb配置文件，找到如下配置</p><p>该项定义了默认备份出文件的路径，可以通过修改该配置，并执行 <strong>gitlab-ctl reconfigure 或者 gitlab-ctl  restart</strong> 重启服务生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@git-server backups]# gitlab-ctl reconfigure</span><br><span class="line">或者</span><br><span class="line">[root@git-server backups]# gitlab-ctl  restart</span><br></pre></td></tr></table></figure><p>执行备份命令进行备份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git-server backups]# /opt/gitlab/bin/gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1588671804467.png#id=fYw8E&originHeight=355&originWidth=762&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p>也可以添加到 crontab 中定时执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 2 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><p>可以到/var/opt/gitlab/backups找到备份包，解压查看，会发现备份的还是比较全面的，数据库、repositories、build、upload等分类还是比较清晰的。</p><p>备份完成，会在备份目录中生成一个当天日期的tar包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@git-server ~]# ll /var/opt/gitlab/backups/</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1588674873071.png#id=xzBBf&originHeight=59&originWidth=751&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><h3 id="3、数据恢复"><a href="#3、数据恢复" class="headerlink" title="3、数据恢复"></a>3、数据恢复</h3><p>特别注意：</p><ul><li>备份目录和gitlab.rb中定义的备份目录必须一致</li><li>GitLab的版本和备份文件中的版本必须一致，否则还原时会报错。</li></ul><p><strong>在恢复之前，可以删除一个文件，以便查看效果</strong></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1588671953485.png#id=FUTgJ&originHeight=287&originWidth=1128&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p>执行恢复操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@git-server ~]# cd /var/opt/gitlab/backups</span><br><span class="line">[root@git-server  backups]# /opt/gitlab/bin/gitlab-rake gitlab:backup:restore BACKUP=/var/opt/gitlab/backups/1678342140_2023_03_09_15.1.0</span><br><span class="line">注意恢复文件的名称</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1588672033757.png#id=Gw1sC&originHeight=166&originWidth=812&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1588672066970.png#id=ceRYj&originHeight=336&originWidth=660&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1588672081738.png#id=K9Ysn&originHeight=237&originWidth=731&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p>恢复完成后，启动刚刚的两个服务，或者重启所有服务，再打开浏览器进行访问，发现数据和之前的一致：</p><p><strong>注意：通过备份文件恢复gitlab必须保证两台主机的gitlab版本一致，否则会提示版本不匹配</strong></p><p>查看gitlab端，可以看到数据恢复成功</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1588754052558.png#id=fDWQC&originHeight=480&originWidth=1274&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><h2 id="Gitlab配置邮箱"><a href="#Gitlab配置邮箱" class="headerlink" title="Gitlab配置邮箱"></a>Gitlab配置邮箱</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab-server ~]# vim /etc/gitlab/gitlab.rb</span><br><span class="line">QOOJRFWGOZBHQMSQ</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32511478/1665561059297-e52d0714-33f2-44ed-aca2-020d4d2cc248.png#averageHue=%231a0703&from=url&id=iI99U&originHeight=297&originWidth=882&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab-server ~]# gitlab-ctl reconfigure</span><br><span class="line">或者</span><br><span class="line">[root@gitlab-server ~]# gitlab-ctl restart</span><br><span class="line"></span><br><span class="line">[root@gitlab ~]# gitlab-rails console</span><br><span class="line">irb(main):001:0&gt; Notify.test_email('XXXXXX@gmail.com','test Gitlab Email','Test').deliver_now#输入收件人的邮箱</span><br><span class="line">Delivered mail 610835daa71d5_21d35a645978a@sage.novalocal.mail (40062.2ms)=&gt; #&lt;Mail::Message:173540, Multipart: false, Headers: &lt;Date: Mon, 02 Aug 2021 18:13:46 +0000&gt;, &lt;From: GitLab &lt;xxxxxx@qq.com&gt;&gt;, &lt;Reply-To: GitLab &lt;noreply@xx.xx.4.62&gt;&gt;, &lt;To: xxxxxxx@gmail.com&gt;, &lt;Message-ID: &lt;610835daa71d5_21d35a645978a@sage.novalocal.mail&gt;&gt;, &lt;Subject: test Gitlab Email&gt;, &lt;Mime-Version: 1.0&gt;, &lt;Content-Type: text/html; charset=UTF-8&gt;, &lt;Content-Transfer-Encoding: 7bit&gt;, &lt;Auto-Submitted: auto-generated&gt;, &lt;X-Auto-Response-Suppress: All&gt;&gt;#出现这段报文就说明配置成功</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1666248151784-63df5c13-bae6-43fc-9717-0b4b5eff4b79.png#averageHue=%2314110f&clientId=u6d9fcd4d-2bdd-4&from=paste&height=518&id=u0d6de7b8&originHeight=648&originWidth=1911&originalType=binary&ratio=1&rotation=0&showTitle=false&size=130113&status=done&style=none&taskId=u2aabbffb-822e-440c-af83-f8d076559cc&title=&width=1528.8" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/23214851/1666248195382-6f169cf5-8944-47f4-a64b-0d1392f95a58.png#averageHue=%23d7c888&clientId=u6d9fcd4d-2bdd-4&from=paste&height=298&id=u387b636e&originHeight=372&originWidth=723&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28763&status=done&style=none&taskId=u69d2645c-e432-4b6c-8c8a-00415a517db&title=&width=578.4" alt="image.png"></p><h2 id="Gitlab配置https方式访问"><a href="#Gitlab配置https方式访问" class="headerlink" title="Gitlab配置https方式访问"></a>Gitlab配置https方式访问</h2><h3 id="配置ssl证书"><a href="#配置ssl证书" class="headerlink" title="配置ssl证书"></a>配置ssl证书</h3><p>我们可以配置私有CA，也可以在阿里云官网上面购买域名之后获取SSL证书</p><h3 id="创建私有CA证书"><a href="#创建私有CA证书" class="headerlink" title="创建私有CA证书"></a>创建私有CA证书</h3><p>首先在一台服务器上安装一些需要用到的应用</p><h4 id="1、检查安装openssl"><a href="#1、检查安装openssl" class="headerlink" title="1、检查安装openssl"></a>1、检查安装openssl</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]# rpm -qa|grep openssl</span><br><span class="line">openssl098e-0.9.8e-29.el7.centos.3.x86_64</span><br><span class="line">openssl-libs-1.0.2k-25.el7_9.x86_64</span><br><span class="line">xmlsec1-openssl-1.2.20-7.el7_4.x86_64</span><br><span class="line">openssl-devel-1.0.2k-25.el7_9.x86_64</span><br><span class="line">openssl-1.0.2k-25.el7_9.x86_64</span><br></pre></td></tr></table></figure><p>如果未安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]#yum install openssl openssl-devel -y</span><br><span class="line">创建所需要的文件</span><br><span class="line">根CA服务器：因为只有 CA 服务器的角色，所以用到的目录只有/etc/pki/CA</span><br><span class="line">网站服务器：只是证书申请者的角色，所以用到的目录只有/etc/pki/tls</span><br><span class="line">[root@www ~]#cd /etc/pki/CA/</span><br><span class="line">[root@www CA]# ls</span><br><span class="line">certs  crl  newcerts  private</span><br><span class="line">[root@www CA]# touch index.txt   #创建生成证书索引数据库文件</span><br><span class="line">[root@www CA]# ls</span><br><span class="line">certs  crl  index.txt  newcerts  private</span><br><span class="line">[root@www CA]# echo 01 &gt; serial   #指定第一个颁发证书的序列号</span><br><span class="line">[root@www CA]# ls</span><br><span class="line">certs  crl  index.txt  newcerts  private  serial</span><br><span class="line">[root@www CA]#</span><br></pre></td></tr></table></figure><h4 id="2、创建密钥"><a href="#2、创建密钥" class="headerlink" title="2、创建密钥"></a>2、创建密钥</h4><p>在根CA服务器上创建密钥，密钥的位置必须为<code>/etc/pki/CA/private/cakey.pem</code>，这个是openssl.cnf中中指定的路径，只要与配置文件中指定的匹配即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@www CA]# (umask 066; openssl genrsa -out private/cakey.pem 2048)</span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">...........+++</span><br><span class="line">...............+++</span><br><span class="line">e is 65537 (0x10001)</span><br></pre></td></tr></table></figure><h4 id="3、生成自签名证书"><a href="#3、生成自签名证书" class="headerlink" title="3、生成自签名证书"></a>3、生成自签名证书</h4><p>根CA自签名证书，根CA是最顶级的认证机构，没有人能够认证他，所以只能自己认证自己生成自签名证书。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@www CA]# openssl req -new -x509 -key /etc/pki/CA/private/cakey.pem -days 7300 -out /etc/pki/CA/cacert.pem -days 7300</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter '.', the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:BEIJING</span><br><span class="line">Locality Name (eg, city) [Default City]:BEIJING</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:CA</span><br><span class="line">Organizational Unit Name (eg, section) []:OPT</span><br><span class="line">Common Name (eg, your name or your server's hostname) []:ca.qf.com</span><br><span class="line">Email Address []:</span><br><span class="line">[root@www CA]# ls</span><br><span class="line">cacert.pem  certs  crl  index.txt  newcerts  private  serial</span><br></pre></td></tr></table></figure><h3 id="客户端（gitlab服务器）CA证书申请域名"><a href="#客户端（gitlab服务器）CA证书申请域名" class="headerlink" title="客户端（gitlab服务器）CA证书申请域名"></a>客户端（gitlab服务器）CA证书申请域名</h3><h4 id="1、安装openssl"><a href="#1、安装openssl" class="headerlink" title="1、安装openssl"></a>1、安装openssl</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]# yum install openssl openssl-devel  -y</span><br></pre></td></tr></table></figure><h4 id="2、客户端生成密钥文件"><a href="#2、客户端生成密钥文件" class="headerlink" title="2、客户端生成密钥文件"></a>2、客户端生成密钥文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]# (umask 066; openssl genrsa -out /etc/pki/tls/private/www.git123.com.key 2048)</span><br><span class="line">Generating RSA private key, 2048 bit long modulus</span><br><span class="line">..............................+++</span><br><span class="line">..........+++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line">[root@gitlab ~]# cd /etc/pki/tls/private/</span><br><span class="line">[root@gitlab private]# ls</span><br><span class="line">www.git123.com.key</span><br><span class="line">[root@gitlab private]#</span><br></pre></td></tr></table></figure><h4 id="3、客户端用私钥加密生成证书请求"><a href="#3、客户端用私钥加密生成证书请求" class="headerlink" title="3、客户端用私钥加密生成证书请求"></a>3、客户端用私钥加密生成证书请求</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab private]# ls ../</span><br><span class="line">cert.pem  certs  misc  openssl.cnf  private</span><br><span class="line">[root@gitlab private]# openssl req -new -key /etc/pki/tls/private/www.qf.com.key -days 365 -out /etc/pki/tls/www.qf.com.csr</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter '.', the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:BEIJING</span><br><span class="line">Locality Name (eg, city) [Default City]:BEIJING</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:QF</span><br><span class="line">Organizational Unit Name (eg, section) []:OPT</span><br><span class="line">Common Name (eg, your name or your server's hostname) []:www.git123.com</span><br><span class="line">Email Address []:</span><br><span class="line"></span><br><span class="line">Please enter the following 'extra' attributes</span><br><span class="line">to be sent with your certificate request</span><br><span class="line">A challenge password []:</span><br><span class="line">An optional company name []:</span><br><span class="line">[root@gitlab private]# ls ../</span><br><span class="line">cert.pem  certs  misc  openssl.cnf  private  www.git123.com.csr</span><br><span class="line">[root@gitlab private]#</span><br></pre></td></tr></table></figure><p><strong>4、CA 签署证书</strong>（在ca服务器上面操作）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]# vim /etc/pki/tls/openssl.cnf</span><br><span class="line">policy          = policy_match</span><br><span class="line"> 82 </span><br><span class="line"> 83 # For the CA policy</span><br><span class="line"> 84 [ policy_match ]</span><br><span class="line"> 85 countryName             = match</span><br><span class="line"> 86 stateOrProvinceName     = match</span><br><span class="line"> 87 organizationName        = supplied</span><br><span class="line"> 88 organizationalUnitName  = optional</span><br><span class="line"> 89 commonName              = supplied</span><br><span class="line"> 90 emailAddress            = optional</span><br></pre></td></tr></table></figure><p>CA签署证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]# openssl ca -in /etc/pki/CA/private/www.git123.com.csr -out /etc/pki/CA/certs/www.git123.com.crt -days 365</span><br><span class="line">Using configuration from /etc/pki/tls/openssl.cnf</span><br><span class="line">Check that the request matches the signature</span><br><span class="line">Signature ok</span><br><span class="line">Certificate Details:</span><br><span class="line">        Serial Number: 1 (0x1)</span><br><span class="line">        Validity</span><br><span class="line">            Not Before: Jul  3 10:12:23 2019 GMT</span><br><span class="line">            Not After : Jul  2 10:12:23 2020 GMT</span><br><span class="line">        Subject:</span><br><span class="line">            countryName               = CN</span><br><span class="line">            stateOrProvinceName       = BEIJING</span><br><span class="line">            organizationName          = QF</span><br><span class="line">            organizationalUnitName    = OPT</span><br><span class="line">            commonName                = www.qf.com</span><br><span class="line">        X509v3 extensions:</span><br><span class="line">            X509v3 Basic Constraints: </span><br><span class="line">                CA:FALSE</span><br><span class="line">            Netscape Comment: </span><br><span class="line">                OpenSSL Generated Certificate</span><br><span class="line">            X509v3 Subject Key Identifier: </span><br><span class="line">                E3:AC:1A:55:2B:28:B9:80:DC:9C:C2:13:70:53:27:AD:3D:44:8F:D3</span><br><span class="line">            X509v3 Authority Key Identifier: </span><br><span class="line">                keyid:5D:2A:81:B2:E7:8D:D8:88:E5:7B:94:CA:75:65:9C:82:2B:A9:B2:3C</span><br><span class="line"></span><br><span class="line">Certificate is to be certified until Jul  2 10:12:23 2020 GMT (365 days)</span><br><span class="line">Sign the certificate? [y/n]:y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1 out of 1 certificate requests certified, commit? [y/n]y</span><br><span class="line">Write out database with 1 new entries</span><br><span class="line">Data Base Updated</span><br></pre></td></tr></table></figure><h4 id="查看证书的信息"><a href="#查看证书的信息" class="headerlink" title="查看证书的信息"></a>查看证书的信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]# openssl x509 -in /etc/pki/CA/certs/www.qf.com.crt -noout -subject</span><br><span class="line">subject= /C=CN/ST=BEIJING/O=QF/OU=OPT/CN=www.git123.com</span><br></pre></td></tr></table></figure><h4 id="将生成的证书发放给请求客户端（Gitlab服务器）"><a href="#将生成的证书发放给请求客户端（Gitlab服务器）" class="headerlink" title="将生成的证书发放给请求客户端（Gitlab服务器）"></a>将生成的证书发放给请求客户端（Gitlab服务器）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]# cd /etc/pki/CA/certs/</span><br><span class="line">[root@www certs]# scp www.git123.com.ctr 10.8.156.42:/etc/pki/CA/certs/</span><br></pre></td></tr></table></figure><h3 id="Gitlab中修改配置"><a href="#Gitlab中修改配置" class="headerlink" title="Gitlab中修改配置"></a>Gitlab中修改配置</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32511478/1665561337459-46a564b8-e095-4597-8b2a-8fa43d1bbdf2.png#averageHue=%230e0201&clientId=ua3f70022-3104-4&errorMessage=unknown%20error&from=paste&height=126&id=RpXNY&originHeight=147&originWidth=723&originalType=binary&ratio=1&rotation=0&showTitle=false&size=24917&status=error&style=none&taskId=u685df66a-197d-4d1f-b1ff-8b03a0940bc&title=&width=617.9487406149427" alt="image.png">)<img src="https://cdn.nlark.com/yuque/0/2022/png/32511478/1665561451361-121a4d5b-0f29-441e-8c44-408c73a23b97.png#averageHue=%230b0101&clientId=ua3f70022-3104-4&errorMessage=unknown%20error&from=paste&height=214&id=KmI48&originHeight=250&originWidth=624&originalType=binary&ratio=1&rotation=0&showTitle=false&size=24609&status=error&style=none&taskId=u3d46a275-43f1-4727-a961-10bc9fa20a5&title=&width=533.3333528958841" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/32511478/1665561225403-cbd2e780-5301-41ae-b2d0-900d220e8f66.png#averageHue=%230a0101&clientId=ua3f70022-3104-4&errorMessage=unknown%20error&from=paste&height=124&id=ufwA0&originHeight=145&originWidth=768&originalType=binary&ratio=1&rotation=0&showTitle=false&size=20146&status=error&style=none&taskId=u39906c6b-980b-4425-8a32-8c2fead5c29&title=&width=656.4102804872421" alt="image.png"></p><h3 id="在gitlab前面配置Nginx做转发"><a href="#在gitlab前面配置Nginx做转发" class="headerlink" title="在gitlab前面配置Nginx做转发"></a>在gitlab前面配置Nginx做转发</h3><p>首先把gitlab内部nginx的端口修改一下<br><img src="https://cdn.nlark.com/yuque/0/2022/png/32511478/1665561613131-04053ee8-7c53-40f5-b511-b58a6f96ca9b.png#averageHue=%230f0201&clientId=ua3f70022-3104-4&errorMessage=unknown%20error&from=paste&height=154&id=gQL38&originHeight=180&originWidth=489&originalType=binary&ratio=1&rotation=0&showTitle=false&size=27179&status=error&style=none&taskId=udee6f51a-ba2a-4d97-9c70-87b57df483a&title=&width=417.94873327898614" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim/etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">upstream  git&#123;</span><br><span class="line">        server  127.0.0.1:8888;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name www.git123.com;</span><br><span class="line">    ssl_certificate                                 /etc/pki/CA/certs/www.git123.com.crt;</span><br><span class="line">    ssl_certificate_key                            /etc/pki/tls/private/www.git123.com.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line"></span><br><span class="line">            client_max_body_size 50m;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_pass http://git;</span><br><span class="line">            index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name www.git123.com;</span><br><span class="line"></span><br><span class="line">        rewrite ^(.*)$ https://$host$1 permanent;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">        return 301 https://www.git123.com:443$request_uri;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32511478/1665581764306-e04d398a-3689-4d2b-b8b8-0ae39b69e012.png#averageHue=%23fbfbfa&clientId=ua3f70022-3104-4&errorMessage=unknown%20error&from=paste&height=889&id=udcd7febb&originHeight=1040&originWidth=1920&originalType=binary&ratio=1&rotation=0&showTitle=false&size=103307&status=error&style=none&taskId=ub186537d-9662-4482-88b9-7f835500a41&title=&width=1641.025701218105" alt="image.png"></p><h2 id="Github-远程仓库"><a href="#Github-远程仓库" class="headerlink" title="Github 远程仓库"></a>Github 远程仓库</h2><p>1、github.com 注册账户<br>2、在github上创建仓库<br>本人账户：<br>用户名：youngfityu<br>邮箱：   <a href="mailto:908367919@qq.com">908367919@qq.com</a><br>密码：   ***<br><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1588673609788.png#id=rBMCe&originHeight=342&originWidth=1004&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1588673721676.png#id=m6bVu&originHeight=550&originWidth=864&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p>3、客户端生成本地ssh key</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ssh-keygen -t rsa -C 'meteor@163.com' # 邮箱要与github上注册的相同</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:RiE6UR1BtzV5avyE2uz6TNPsVHa2D2eHprghrJEkd/g meteor@163.com</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|    ..oo=o. o.   |</span><br><span class="line">|     o ..o o...  |</span><br><span class="line">|    o   . .. +   |</span><br><span class="line">|     . o    = .  |</span><br><span class="line">|    . + S  = o  =|</span><br><span class="line">|     + *  . oo.=o|</span><br><span class="line">|      o E ..o B.+|</span><br><span class="line">|       o . =.* +o|</span><br><span class="line">|      .   +++ . .|</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line">[root@localhost ~]#</span><br><span class="line">[root@localhost ~]# cat .ssh/id_rsa.pub </span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVThfq4brrlsPGtAknVB0TLPx+7Dd3qlxTbSIrUOsGC5Y8JuNqVTlIntZB4oNj8cSQrWvec9CKm0a8o7WwaJIiqpxurz+YpQHP2KbapftKIxsX4hPf/z+p0El1U6arQa35/xmNsq+cJLH/bDdRG+EMDhuCBmjVZOlLj/hEdeIT6s56AnnCkaWoF+sq58KCF7Tk54jRbs/YiyE4SN7FuA70r+07sA/uj0+lmuk4E190KtQUELhjX/E9stivlqiRhxnKvVUqXDywsjfM8Rtvbi4Fg9R8Wt9fpd4QwnWksYUoR5qZJFYXO4hSZrUnSMruPK14xXjDJcFDcP2eHIzKgLD1 meteor@163.com</span><br></pre></td></tr></table></figure><p>4、复制以上的公钥，在github 中添加ssh key</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1588673639512.png#id=NvduQ&originHeight=444&originWidth=517&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1588673667402.png#id=YFvgK&originHeight=468&originWidth=1032&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p>创建好库之后，在库里创建几个文件，方便测试</p><p>5、测试：拉取github仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum install git</span><br><span class="line">[root@localhost ~]# git config --global user.name 'meteor_by'</span><br><span class="line">[root@localhost ~]# git config --global user.email 'meteor@163.com'</span><br><span class="line">[root@localhost tmp]# cd /tmp</span><br><span class="line"></span><br><span class="line">[root@localhost tmp]# git clone git@github.com:youngfit/youngfit.git</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1588673833960.png#id=tqykj&originHeight=272&originWidth=721&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p>7、在本地添加远程仓库，并推送至github仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost tmp]# cd /tmp/youngfit/</span><br><span class="line">[root@localhost youngfit]# ls</span><br><span class="line">qf.txt  README.md</span><br><span class="line">[root@localhost youngfit]# cat qf.txt </span><br><span class="line">this is 2002 test file</span><br><span class="line">[root@client youngfit]# ls</span><br><span class="line">qf.txt  README.md</span><br><span class="line">[root@localhost youngfit]# vim a.txt</span><br><span class="line">[root@localhost youngfit]# git add .</span><br><span class="line">[root@localhost youngfit]# git commit -m "yufei"</span><br><span class="line">[master 0f6a3de] yufei</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 a.txt</span><br><span class="line">[root@client youngfit]# git push origin master</span><br><span class="line">Counting objects: 4, done.</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (3/3), 288 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@github.com:youngfit/youngfit.git</span><br><span class="line">   ba8225d..0f6a3de  master -&gt; master</span><br></pre></td></tr></table></figure><p>去github界面查看</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1588674573283.png#id=iNWl5&originHeight=550&originWidth=1097&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p>8、连接远程仓库方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">[root@localhost testapp]<span class="comment"># git remote -v </span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">origingit@github.com:meteor/python1804.git (fetch)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">origingit@github.com:meteor/python1804.git (push)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">[root@localhost python1804]<span class="comment">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">[root@localhost python1804]<span class="comment">#  git remote rm origin  (如果连接远程的方式不是ssh,可以删除重新添加)</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">[root@localhost ~]<span class="comment"># git remote add origin git@github.com:meteor/python1804.git</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">或</span></span><br><span class="line"><span class="meta">#</span><span class="bash">git remote add origin https://github.com/meteor/python1804.git</span></span><br><span class="line"><span class="meta">#</span><span class="bash">git push -u origin master</span></span><br><span class="line"></span><br><span class="line">[root@client youngfit]# git remote -v</span><br><span class="line">origin  git@github.com:youngfit/youngfit.git (fetch)</span><br><span class="line">origin  git@github.com:youngfit/youngfit.git (push)</span><br><span class="line">[root@client youngfit]# git remote rm origin</span><br><span class="line">[root@client youngfit]# git remote add origin git@192.168.62.131:root/testapp.git</span><br><span class="line">[root@client youngfit]# ls</span><br><span class="line">a.txt  qf.txt  README.md</span><br><span class="line">[root@client youngfit]# pwd</span><br><span class="line"></span><br><span class="line">[root@client ~]# cd /root/testapp/</span><br><span class="line">[root@client testapp]# ls</span><br><span class="line">test.sql  test.txt  update.txt</span><br><span class="line">[root@client testapp]# vim modify.txt</span><br><span class="line">[root@client testapp]# git add .</span><br><span class="line">[root@client testapp]# git commit -m "modify gitlab from github"</span><br><span class="line">[master fde12c2] modify gitlab from github</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 modify.txt</span><br><span class="line"></span><br><span class="line">[root@client testapp]# git push origin master</span><br><span class="line">Username for 'http://192.168.62.131': root</span><br><span class="line">Password for 'http://root@192.168.62.131': </span><br><span class="line">Counting objects: 4, done.</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (3/3), 337 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To http://192.168.62.131/root/testapp.git</span><br><span class="line">   23bae45..fde12c2  master -&gt; master</span><br></pre></td></tr></table></figure><p>去自己部署的gitlab上查看</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1588674319140.png#id=oEkTm&originHeight=612&originWidth=1074&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://l66stbz.github.io/tags/Linux/"/>
    
      <category term="Git" scheme="https://l66stbz.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>study</title>
    <link href="https://l66stbz.github.io/2024/09/03/study/test/"/>
    <id>https://l66stbz.github.io/2024/09/03/study/test/</id>
    <published>2024-09-03T13:50:00.000Z</published>
    <updated>2024-09-03T12:27:22.248Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="http://192.168.100.150:80" target="_blank" rel="noopener">http://192.168.100.150:80</a><br>默认用户: admin  默认密码: ChangeMe</p><p>你仨低价阿萨德</p><p><img src="/2024/09/03/study/test/1.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://l66stbz.github.io/tags/Linux/"/>
    
      <category term="Ansible" scheme="https://l66stbz.github.io/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>IPtables</title>
    <link href="https://l66stbz.github.io/2024/09/02/IPtables/iptables/"/>
    <id>https://l66stbz.github.io/2024/09/02/IPtables/iptables/</id>
    <published>2024-09-02T13:50:00.000Z</published>
    <updated>2024-09-07T02:06:00.309Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="企业级iptables防火墙"><a href="#企业级iptables防火墙" class="headerlink" title="企业级iptables防火墙"></a>企业级iptables防火墙</h1><p>[TOC]</p><h2 id="一、Iptables介绍"><a href="#一、Iptables介绍" class="headerlink" title="一、Iptables介绍"></a>一、Iptables介绍</h2><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202409011357391.png" alt="img"></p><p>​    <code>Iptables</code>是unix/linux自带的一款优秀且<strong>开源的，基于包过滤(对OSI模型的四层或者是四层以下进行过滤)的防火墙工具对流入和流出服务器的数据包进行很精细的控制。主要针对网络访问。</strong></p><p>​    <code>iptables</code>不是真正的防火墙，为一个客户端的代理，<strong>用户是通过iptables这个代理，将用户的安全设定执行到对应的“安全框架”中，这个“安全框架”才是真正的防火墙。这个框架叫做“<code>netfilter</code>”。</strong></p><p>​    包过滤防火墙在网络层截取网络数据包的<strong>包头</strong>（header），针对数据包的包头，根据事先定义好的防火墙过滤规则进行对比，根据对比结果，再执行不同的动作。包过滤防火墙一般工作在网络层，所以也称为“网络防火墙”，通过检查数据流中每一个数据包的源ip地址，目标ip地址，源端口，目标端口，协议类型（tcp,udp,icmp等），状态等信息来判断是否符合规则。</p><ul><li><strong>netfilter</strong>：<strong><code>内核空间</code></strong>，真正实现防火墙的功能。</li><li><strong>iptables</strong>：<strong><code>用户空间</code></strong>，在/sbin/iptables存在的防火墙，通过iptables提供<strong>管理</strong>、<strong>修改</strong>、<strong>删除</strong>或者<strong>插入</strong>规则；<strong>用户和内核交互的工具就是iptables。简单理解为“iptables”是真正实现用户防火墙规则的“桥梁”。</strong></li></ul><p><strong>Iptable弊端：</strong>大并发的情况，考虑不要开启iptables。因为高并发，iptables会加大延迟。除非并发小，如果服务器必须处于公网。考虑开启防火墙。建议利用硬件防火墙提升架构安全。</p><h3 id="1-iptables工作原理分类"><a href="#1-iptables工作原理分类" class="headerlink" title="1. iptables工作原理分类"></a>1. iptables工作原理分类</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">主机防火墙：主要是用来防范单台主机的进出报文；-----filter表 INPUT链</span><br><span class="line">网络防火墙: 能够实现对进出本网络的所有主机报文加以防护----nat表</span><br><span class="line">raw  mangle  nat  filter</span><br><span class="line"></span><br><span class="line">raw表：用于对数据包进行连接跟踪前的处理。</span><br><span class="line">mangle表：用于修改数据包的IP头或其他信息。</span><br><span class="line">nat表：用于网络地址转换，如源地址转换和目标地址转换。</span><br><span class="line">filter表：用于执行包过滤，是最常用的表，决定数据包是否被接受、丢弃或拒绝。</span><br><span class="line">========================================================================</span><br><span class="line"></span><br><span class="line">iptables缺点：</span><br><span class="line">（1）防火墙虽然可以过滤互联网的数据包，但却无法过滤内部网络的数据包。因此若有人从内部网络攻击时，防火墙没有作用。</span><br><span class="line">（2）电脑本身的操作系统亦可能因一些系统漏洞，使入侵者可以利用这些漏洞绕过防火墙过滤，从而入侵电脑。</span><br><span class="line">（3）防火墙无法有效阻挡病毒攻击，尤其是隐藏在数据中的病毒。</span><br></pre></td></tr></table></figure><h3 id="2-iptables工作流程"><a href="#2-iptables工作流程" class="headerlink" title="2. iptables工作流程"></a>2. iptables工作流程</h3><ol><li><strong>防火墙是一层层过滤的。</strong>按照配置规则的顺序从上到下，从前到后进行过滤的。此时，第一条规则匹配成功。则不会继续匹配。</li><li>如果匹配上了规则，即明确表明是阻止还是通过，此时数据包就不在向下匹配新规则了。匹配到即停止继续匹配。</li><li>如果所有规则中没有明确表明是阻止还是通过这个数据包，也就是没有匹配上规则，向下进行匹配，直到匹配默认规则得到明确的阻止还是通过。</li><li>防火墙的默认规则是对应链的所有的规则执行完以后才会执行的（最后执行的规则）。</li></ol><h2 id="二、iptables概念"><a href="#二、iptables概念" class="headerlink" title="二、iptables概念"></a>二、iptables概念</h2><h3 id="1-什么是-iptables"><a href="#1-什么是-iptables" class="headerlink" title="1. 什么是 iptables"></a>1. 什么是 iptables</h3><p>举个例子，如果把Netfilter看成是某个小区的一栋楼。那么表（tables)就是楼里的其中的一套房子。这套房子”表（tables)”属于这栋楼“Netfilter/iptables”。</p><h3 id="2-什么是表（tables）"><a href="#2-什么是表（tables）" class="headerlink" title="2. 什么是表（tables）"></a>2. 什么是表（tables）</h3><p>表（tables）是链的容器，即所有的链（chains）都属于其对应的表（tables）.如上，如果把Netfilter看成是某个小区的一栋楼.那么表（tables）就是楼里的其中的一套房子。</p><h3 id="3-什么是链（chains）"><a href="#3-什么是链（chains）" class="headerlink" title="3 什么是链（chains）"></a>3 什么是链（chains）</h3><p>链（chains）是规则（Policys）的容器。如果把表（tables）当作有一套房子，那么链（chains）就可以说是房子里的家具（柜子等）。</p><h3 id="4-什么是规则（Policy）"><a href="#4-什么是规则（Policy）" class="headerlink" title="4 什么是规则（Policy）"></a>4 什么是规则（Policy）</h3><p>规则（Policy）就比较容易理解了，就是iptables系列过滤信息的规范和具体方法条款了.可以理解为柜子如何增加并摆放柜子东西等。</p><ul><li>匹配规则：提供了需要执行对应动作的目标匹配机制。通常可以匹配协议类型、目的地址、源地址、目的端口、源端口、目的网段、源网段、接收数据包的网卡、发送数据包的网卡、协议头、连接状态等。</li><li>动作目标：又称为Target。是数据包满足匹配规则时触发的相应的动作。Target分为两种类型：终止目标和非终止目标。</li></ul><p>基本术语如下表格所示：</p><table><thead><tr><th><strong>Netfilter/iptables</strong></th><th><strong>表（tables）</strong></th><th><strong>链（chains）</strong></th><th><strong>规则（Policy）</strong></th></tr></thead><tbody><tr><td><strong>一栋楼</strong></td><td>楼里的房子</td><td>房子里的柜子</td><td>柜子里衣服，摆放规则</td></tr></tbody></table><h2 id="三、iptables-表和链"><a href="#三、iptables-表和链" class="headerlink" title="三、iptables 表和链"></a>三、iptables 表和链</h2><p>默认情况下，iptables根据功能和表的定义划分包含四个表，filter,nat,mangle,其每个表又包含不同的操作链。 实际iptables包含4张表和五个链,主要记住filter即可。</p><h3 id="1、四张表"><a href="#1、四张表" class="headerlink" title="1、四张表"></a><strong>1、四张表</strong></h3><ul><li><strong>raw 表</strong>：设置数据包的连接跟踪标志，通常用于在连接跟踪生效前对数据包进行处理。 设置数据包是否绕过连接跟踪机制。</li><li><strong>mangle 表</strong>：修改数据包的某些字段或标记数据包。修改数据包的标志位等。提供<strong><code>修改数据包IP头部</code></strong>的功能</li><li>==<strong>nat 表</strong>==：用于修改数据包的网络地址（如源地址和目的地址），主要应用于网络地址转换（NAT），如 SNAT 和 DNAT。修改数据包的源地址（<code>SNAT</code>）或目的地址（<code>DNAT</code>）。</li><li>==<strong>filter 表</strong>==：最常用的表，用来<strong><code>判断一个数据包是否可以通过</code></strong>。在防火墙领域，filter表提供的功能通常被称为“过滤”包。这个表提供了防火墙的一些常见功能。专门用于数据包的过滤（即决定数据包是否被接受、拒绝、或丢弃）。此表重要用于接受（<code>ACCEPT</code>）、拒绝（<code>REJECT</code>）、丢弃（<code>DROP</code>）数据包。</li></ul><p><strong>表的应用顺序</strong>：<code>：raw ---&gt; mangle ---&gt; nat ---&gt; filter</code></p><h3 id="2、五条链"><a href="#2、五条链" class="headerlink" title="2、五条链"></a><strong>2、五条链</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">五链：（必须是大写）链里面写的是规则。</span><br><span class="line">PREROUTING  -----------------进路由之前数据包</span><br><span class="line">INPUT  -----------------就是过滤进来的数据包（输入）</span><br><span class="line">FORWARD -----------------转发</span><br><span class="line">OUTPUT  -----------------发出去的数据包</span><br><span class="line">POSTROUTING -----------------路由之后数据包</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">所有的访问都是按顺序:</span></span><br><span class="line">入站:比如访问自身的web服务流量。先PREROUTING（是否改地址），再INPUT（是否允许）到达程序。</span><br><span class="line">转发:经过linux网关的流量.先PREROUTING（是否改地址），然后路由。转发给FORWARD（转发或者丢弃），最后经过POSTROUTING（看看改不改地址。）</span><br><span class="line">出站:源自linux自身的流量.先OUTPUT，再给POSTROUTING（是否改IP）。</span><br><span class="line"><span class="meta">#</span><span class="bash">规则顺序:逐条匹配，匹配即停止。</span></span><br></pre></td></tr></table></figure><h3 id="3、四表五链"><a href="#3、四表五链" class="headerlink" title="3、四表五链"></a><strong>3、四表五链</strong></h3><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">raw表里面：</span><br><span class="line">PREROUTING</span><br><span class="line">OUTPUT</span><br><span class="line">总结:数据包跟踪  内核模块iptables_raw</span><br><span class="line">===============================================================================</span><br><span class="line">mangel表里面有5个链：</span><br><span class="line">PREROUTING</span><br><span class="line">INPUT</span><br><span class="line">FORWARD</span><br><span class="line">OUTPUT</span><br><span class="line">POSTROUTING</span><br><span class="line">路由标记用的表。内核模块iptables_mangle</span><br><span class="line">================================================================================</span><br><span class="line">nat表里面的链：</span><br><span class="line">PREROUTING  # 在数据包到达netfilter系统时，在进行路由判断之前执行该链上的规则，作用是改变数据包的目的地址、目的端口等，起到DNAT的作用；</span><br><span class="line">INPUT</span><br><span class="line">OUTPUT# 用来处理从主机发出去的数据包。</span><br><span class="line">POSTROUTING # 数据包发出时，当数据包经过了路由判断后执行该链上的规则，作用是改变数据包的源地址、源端口等，起到SNAT的作用；</span><br><span class="line">转换地址的表(改IP，改端口。当网关使用的linux。保护内外网流量。内核模块叫iptable_nat)</span><br><span class="line">=================================================================================</span><br><span class="line">filter表有三个链：重点</span><br><span class="line">INPUT    # 用来过滤进入主机的数据包；</span><br><span class="line">FORWARD  # 负责转发流经主机的数据包，起到转发的作用，和NAT关系很大。想要主机支持转发需要设置相关内核参数：net.ipv4.ip_forward=1</span><br><span class="line">OUTPUT   # 用来处理从主机发出去的数据包。</span><br><span class="line">总结:根据规则来处理数据包，如转或者丢。就是实现主机型防火墙的主要表。</span><br><span class="line">内核模块 iptable_filter</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1564207347956.png#id=D75Oy&originHeight=556&originWidth=910&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><h2 id="四-iptables操作"><a href="#四-iptables操作" class="headerlink" title="四 iptables操作"></a>四 iptables操作</h2><h4 id="1、安装Iptabls"><a href="#1、安装Iptabls" class="headerlink" title="1、安装Iptabls"></a><strong>1、安装Iptabls</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 安装Iptables</span></span><br><span class="line">[root@iptables ~]# yum install -y iptables iptables-services</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 关闭firewalld和selinux</span></span><br><span class="line">[root@iptables ~]# systemctl disable --now firewalld</span><br><span class="line">[root@iptables ~]# setenforce 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 启动iptables</span></span><br><span class="line">[root@iptables ~]# systemctl  enable --now  iptables</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt;查看版本</span></span><br><span class="line">[root@iptables ~]# iptables  -V</span><br><span class="line">iptables v1.4.21</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 记录规则配置文件</span></span><br><span class="line">[root@iptables ~]# rpm -ql iptables  | grep iptables</span><br><span class="line">/etc/sysconfig/iptables-config</span><br></pre></td></tr></table></figure><h5 id="2、参数解释"><a href="#2、参数解释" class="headerlink" title="2、参数解释"></a><strong>2、参数解释</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-L: 列出一个链或所有链中的规则信息</span><br><span class="line">-n：以数字形式显示地址、端口等信息</span><br><span class="line">-v：以更详细的方式显示规则信息</span><br><span class="line">--line-numbers：查看规则时，显示规则的序号（方便之处，通过需要删除规则-D INPUT 1</span><br><span class="line">-F：清空所有的规则（-X是清理自定义的链，用的少；-Z清零规则序号）</span><br><span class="line">-D：删除链内指定序号（或内容）的一条规则</span><br><span class="line">-P：为指定的链设置默认规则</span><br><span class="line">-A：在链的末尾追加一条规则</span><br><span class="line">-I：在链的开头（或指定序号）插入一条规则</span><br><span class="line">-t:  指定表名</span><br></pre></td></tr></table></figure><h5 id="3、参数使用：如果不写-t-默认使用filter表"><a href="#3、参数使用：如果不写-t-默认使用filter表" class="headerlink" title="3、参数使用：如果不写-t 默认使用filter表"></a><strong>3、参数使用</strong>：如果不写-t 默认使用filter表</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 查看指定表规则</span></span><br><span class="line">[root@iptables-server ~]# iptables -t nat -L</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 默认查看规则</span></span><br><span class="line">[root@iptables ~]# iptables  -L</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">ACCEPT     all  --  anywhere             anywhere             state RELATED,ESTABLISHED</span><br><span class="line">ACCEPT     icmp --  anywhere             anywhere            </span><br><span class="line">ACCEPT     all  --  anywhere             anywhere            </span><br><span class="line">ACCEPT     tcp  --  anywhere             anywhere             state NEW tcp dpt:ssh</span><br><span class="line">REJECT     all  --  anywhere             anywhere             reject-with icmp-host-prohibited</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 以数字的形式显示ip和端口与协议</span></span><br><span class="line">[root@iptables ~]# iptables -nL</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED</span><br><span class="line">ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            state NEW tcp dpt:22</span><br><span class="line">REJECT     all  --  0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">REJECT     all  --  0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 显示规则行号</span></span><br><span class="line">[root@iptables ~]# iptables -nL --line</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination         </span><br><span class="line">1    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED</span><br><span class="line">2    ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">3    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">4    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            state NEW tcp dpt:22</span><br><span class="line">5    REJECT     all  --  0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination         </span><br><span class="line">1    REJECT     all  --  0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 清空规则：</span></span><br><span class="line">[root@iptables ~]# iptables -F</span><br><span class="line">[root@iptables ~]# iptables -nL</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 清空单独的某一个链里面的规则</span></span><br><span class="line">[root@iptables ~]# iptables  -F  链名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 清空单独的某一个表里的，某一个链里面的规则</span></span><br><span class="line">[root@iptables ~]# iptables -t nat -F INPUT</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 删除某条规则</span></span><br><span class="line">[root@iptables ~]# iptables -t filter  -D INPUT 5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 保存规则：</span></span><br><span class="line">[root@iptables ~]# iptables-save &gt; /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure><h5 id="4、iptables语法"><a href="#4、iptables语法" class="headerlink" title="4、iptables语法"></a><strong>4、iptables语法</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">iptables -t 表名 动作  [链名] [-p 匹配条件] [-j 控制类型]</span><br><span class="line">-j：控制类型， 通过前面匹配到之后是丢弃还是保留数据包的处理方式: </span><br><span class="line">ACCEPT允许，</span><br><span class="line">REJECT拒绝， </span><br><span class="line">DROP丢弃。 不会给用户返回任何的拒绝消息，不推荐使用。</span><br><span class="line">======================================================</span><br><span class="line">动作：添规则还是删除规则</span><br><span class="line">-p：匹配条件：数据包特征ip，端口等</span><br><span class="line">如果不写-t 默认使用filter表</span><br><span class="line">=======================================================</span><br><span class="line">动作</span><br><span class="line">修改默认规则： -P （大p）</span><br><span class="line">删除规则：-D</span><br><span class="line">修改规则：-R</span><br><span class="line">追加规则: -A  默认追加到链的末尾</span><br><span class="line">插入规则：-I （大i），在链的开头（或指定序号）插入一条规则</span><br></pre></td></tr></table></figure><h5 id="5、查看添加删除规则"><a href="#5、查看添加删除规则" class="headerlink" title="5、查看添加删除规则"></a><strong>5、查看添加删除规则</strong></h5><p>观察iptable规则添加的方法，删除和查询的方法。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 插入规则到最后一行</span></span><br><span class="line"><span class="meta">$</span><span class="bash">iptables -t filter -A INPUT -p tcp -j ACCEPT    <span class="comment">#最后一行</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 插入规则到第一行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -I INPUT -p udp -j ACCEPT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 插入规则到第四行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -I INPUT 4 -p icmp -j ACCEPT </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 查看filter表所有的规则</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -nL</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 删除Filter表INPUT链中第三行规则</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -D INPUT 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 清空filter表中所有的规则</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -F</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 持久化规则</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables-save &gt; /etc/sysconfig/iptables</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 重启iptables</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart iptables</span></span><br></pre></td></tr></table></figure><h4 id="2、规则匹配条件"><a href="#2、规则匹配条件" class="headerlink" title="2、规则匹配条件"></a><strong>2、规则匹配条件</strong></h4><ol><li><strong>通用匹配（协议），可以独立使用。iptables只能匹配四层及四层一下的协议</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">协议：-p （小p）</span><br><span class="line">tcp ---用的最多</span><br><span class="line">udp</span><br><span class="line">icmp    ---ping的时候用的协议</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用协议的时候可以不指定端口，使用端口的时候必须指定协议。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 禁止自己被ping，在filter表的INPUT链插入一个拒绝icmp的规则。</span></span><br><span class="line">1）#&gt;&gt;&gt; 清空所有Iptables规则</span><br><span class="line">[root@iptables ~]# iptables -F</span><br><span class="line">2）#&gt;&gt;&gt; 禁止所有主机使用icmp协议ping自己</span><br><span class="line">[root@iptables ~]# iptables -A INPUT -p icmp -j REJECT</span><br><span class="line">[root@iptables ~]# iptables -nL</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">REJECT     icmp --  0.0.0.0/0            0.0.0.0/0            reject-with icmp-port-unreachable</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 验证:(更换其他主机测试)</span></span><br><span class="line">[root@localhost ~]# ping 192.168.174.141</span><br><span class="line">PING 192.168.174.141 (192.168.174.141) 56(84) bytes of data.</span><br><span class="line">From 192.168.174.141 icmp_seq=1 Destination Port Unreachable</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 丢弃所有主机通过icmp协议发过来的数据包</span></span><br><span class="line">[root@iptables ~]# iptables -I INPUT 1 -p icmp -j DROP（丢弃）</span><br><span class="line">[root@iptables ~]# iptables -nL</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">REJECT     icmp --  0.0.0.0/0            0.0.0.0/0            reject-with icmp-port-unreachable</span><br><span class="line">DROP       icmp --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 测试（其他主机测试）</span></span><br><span class="line">[root@localhost ~]# ping 192.168.174.141</span><br><span class="line">PING 192.168.174.141 (192.168.174.141) 56(84) bytes of data.</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>通过端口规则匹配:</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 端口：</span></span><br><span class="line">--sport    --源端口</span><br><span class="line">--dport    --目标端口</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 拒绝192.168.246.201这台机器通过ssh连接到这台服务器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -I INPUT -s 192.168.246.201 -p tcp --dport 22 -j REJECT</span></span><br><span class="line">[root@iptables ~]# iptables -Ln</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">REJECT     tcp  --  192.168.174.142      0.0.0.0/0            tcp dpt:22 reject-with icmp-port-unreachable</span><br><span class="line">REJECT     icmp --  0.0.0.0/0            0.0.0.0/0            reject-with icmp-port-unreachable</span><br><span class="line">DROP       icmp --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 拒绝192.168.246.201这台机器通过22端口到80端口的访问，包括22和80端口在内</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -I INPUT -s 192.168.246.201 -p tcp --dport 22:80 -j REJECT</span></span><br><span class="line">[root@iptables ~]# iptables -nL</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">REJECT     tcp  --  192.168.174.142      0.0.0.0/0            tcp dpts:22:80 reject-with icmp-port-unreachable</span><br><span class="line">REJECT     tcp  --  192.168.174.142      0.0.0.0/0            tcp dpt:22 reject-with icmp-port-unreachable</span><br><span class="line">REJECT     icmp --  0.0.0.0/0            0.0.0.0/0            reject-with icmp-port-unreachable</span><br><span class="line">DROP       icmp --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 验证:（更换192.168.246.201）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -I http://192.168.246.200</span></span><br><span class="line">curl: (7) Failed connect to 192.168.246.200:80; Connection refused</span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh root@192.168.246.200</span></span><br><span class="line">ssh: connect to host 192.168.246.200 port 22: Connection refused</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 拒绝所有机器通过ssh连接到这台服务器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -I INPUT  -p tcp --dport 22 -j REJECT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 拒绝所有机器通过22端口到80端口的访问，包括22和80端口在内</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -I INPUT  -p tcp --dport 22:80 -j REJECT</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>通过ip地址</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 禁止源192.168.246.201主机ping进来。（换个主机ping一下，就可以通信）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -I INPUT -s 192.168.246.201  -p icmp -j REJECT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 验证（切换192.168.2）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ping 192.168.246.200</span></span><br><span class="line">PING 192.168.246.200 (192.168.246.200) 56(84) bytes of data.</span><br><span class="line">From 192.168.246.200 icmp_seq=1 Destination Port Unreachable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 拒绝多个ip地址:后面跟ip地址可以更多个ip地址用逗号隔开</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -t filter -I INPUT -s 192.168.246.201,192.168.246.133  -p icmp -j REJECT</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -t filter -I INPUT -s 192.168.246.201,192.168.246.133  -p tcp --dport 22:80 -j REJECT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 验证:在源ip地址通过curl访问</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -I http://192.168.246.200</span></span><br><span class="line">curl: (7) Failed connect to 192.168.246.200:80; Connection refused</span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh root@192.168.246.200</span></span><br><span class="line">ssh: connect to host 192.168.246.200 port 22: Connection refused</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 限制源192.168.10.0/24网段的数据包。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -I INPUT -s 192.168.10.0/24  -j REJECT</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>修改规则</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> iptables -nL</span></span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">REJECT     tcp  --  192.168.246.133      anywhere             tcp dpts:ssh:http reject-wi</span><br><span class="line">REJECT     tcp  --  192.168.246.201      anywhere             tcp dpts:ssh:http reject-wi</span><br><span class="line">REJECT     icmp --  192.168.246.201      anywhere             reject-with icmp-port-unreachable</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 将修改第二条规则访问80端口</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -R INPUT 2 -p tcp --dport 80 -s 192.168.246.201 -j ACCEPT</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -L</span></span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">REJECT     tcp  --  192.168.246.133      anywhere             tcp dpts:ssh:http reject-with icmp-port-unreachable</span><br><span class="line">ACCEPT     tcp  --  192.168.246.201      anywhere             tcp dpt:http</span><br><span class="line">REJECT     icmp --  192.168.246.201      anywhere             reject-with icmp-port-unreachable</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 验证在修改为允许访问的源ip机器上</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -I http://192.168.246.200</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">=======================================================================================</span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -R INPUT 1 -p tcp -s 192.168.62.185 --dport 22 -j ACCEPT</span></span><br><span class="line">验证在修改为允许访问的源ip机器上:</span><br><span class="line"><span class="meta">#</span><span class="bash"> ssh 192.168.62.135</span></span><br></pre></td></tr></table></figure><p><strong>5、icmp类型匹配</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">禁止ping策略原则</span><br><span class="line">iptables服务器是ping命令发起者或是接受者</span><br><span class="line">-i --in-interface：在INPUT链配置规则中，指定从哪一个网卡接口进入的流量（只能配置在INPUT链上）</span><br><span class="line">-o --out-interface：在OUTPUT链配置规则中，指定从哪一个网卡接口出去的流量（只能配置在OUTPUT链上）</span><br><span class="line">====================================================================================================</span><br><span class="line">icmp的类型:</span><br><span class="line">0: Echo Reply——回显应答（Ping应答）ping的结果返回。</span><br><span class="line">8: Echo request——回显请求（Ping请求），发出去的请求。</span><br><span class="line">====================================================================================================</span><br><span class="line"></span><br><span class="line">iptables服务器-----发起者：ping 别的机器</span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 自己不能ping别人，但是别人可以ping自己:</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -I OUTPUT -o ens33 -p icmp --icmp-type 8 -j REJECT  <span class="comment"># ping发出的请求禁止掉了</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 本机验证</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ping 192.168.246.133  <span class="comment"># 将ping请求给禁止掉了。</span></span></span><br><span class="line">PING 192.168.246.133 (192.168.246.133) 56(84) bytes of data.</span><br><span class="line">ping: sendmsg: Operation not permitted</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 其他主机验证</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ping 192.168.246.200   <span class="comment">#可以ping通</span></span></span><br><span class="line">PING 192.168.246.200 (192.168.246.200) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.246.200: icmp_seq=1 ttl=64 time=0.280 ms</span><br><span class="line">====================================================================================================</span><br><span class="line"></span><br><span class="line">iptables服务器作为接受者。也就是别人ping自己：</span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 本机可以ping其他机器。其他机器不能ping通本机</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -I OUTPUT -o ens33 -p icmp --icmp-type 0 -j REJECT <span class="comment">#不给回应icmp包</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 验证</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ping 192.168.246.201   <span class="comment">#ping其他机器通</span></span></span><br><span class="line">PING 192.168.246.201 (192.168.246.201) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.246.201: icmp_seq=1 ttl=64 time=0.491 ms</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ping 192.168.246.200    <span class="comment">#其他机器ping不同</span></span></span><br><span class="line">PING 192.168.246.200 (192.168.246.200) 56(84) bytes of data.</span><br><span class="line">=========================================================================================</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 拒绝任何ping的协议</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> iptables -I INPUT -p icmp -j DROP</span></span><br></pre></td></tr></table></figure><h4 id="3、扩展匹配"><a href="#3、扩展匹配" class="headerlink" title="3、扩展匹配"></a>3、扩展匹配</h4><p>显示匹配:如端口匹配，IP范围，MAC地址，等特殊匹配</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> iptables -m iprange   --<span class="built_in">help</span></span></span><br><span class="line">1.指定ip范围:</span><br><span class="line">语法： -m iprange --src-range</span><br><span class="line"><span class="meta">#</span><span class="bash"> iptables -I INPUT -p tcp --dport 80 -m iprange --src-range 192.168.246.199-192.168.246.206 -j REJECT</span></span><br><span class="line"></span><br><span class="line">2.指定多端口范围：一次拒绝多个指定端口</span><br><span class="line">语法：</span><br><span class="line">-m multiport --sports   #源端口</span><br><span class="line">-m multiport --dports   #目的端口</span><br><span class="line"><span class="meta">#</span><span class="bash"> iptables -A INPUT -p tcp -m  multiport --dports 22,80 -s 192.168.246.133 -j REJECT</span></span><br><span class="line">验证:在246.133机器上</span><br><span class="line"><span class="meta">#</span><span class="bash"> ssh root@192.168.246.200  <span class="comment">#不通</span></span></span><br><span class="line">ssh: connect to host 192.168.246.200 port 22: Connection refused</span><br><span class="line"></span><br><span class="line">3.MAC地址匹配</span><br><span class="line">拒绝MAC地址的匹配：只能匹配源MAC地址</span><br><span class="line">语法: -m mac --mac-source</span><br><span class="line"><span class="meta">#</span><span class="bash"> iptables -I INPUT -p icmp -m mac --mac-source 0:0c:29:<span class="built_in">cd</span>:26:77 -j REJECT <span class="comment">#拒绝指定的MAC地址服务通过icmp协议请求到本地</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> iptables -I INPUT -m mac --mac-source 00:0C:29:64:E3:8D -j REJECT  <span class="comment">#将指定的MAC地址服务请求全部禁止了</span></span></span><br></pre></td></tr></table></figure><p>通过网卡接口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> iptables -I INPUT -i ens33 -j DROP  <span class="comment">#谁也连不上了.</span></span></span><br></pre></td></tr></table></figure><p>保存和删除规则</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">删除:</span><br><span class="line"><span class="meta">#</span><span class="bash"> iptables -D INPUT 3  <span class="comment">#通过查看行号，指定行号删除；   </span></span></span><br><span class="line">=========================================================================================</span><br><span class="line">保存:</span><br><span class="line">[root@iptables-server ~]# iptables-save &gt; /etc/sysconfig/iptables</span><br><span class="line">最后写完规则后记得保存！</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">题库：</span><br><span class="line">1. 开放本机的22端口，对所有地址开放？</span><br><span class="line">iptables -t filter -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">2. 开放本机的80端口，对所有地址开放？</span><br><span class="line">iptables -t filter -A INPUT -p tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure><h4 id="企业案例："><a href="#企业案例：" class="headerlink" title="企业案例："></a>企业案例：</h4><p>工作中。Mysql，Redis等服务一般放在内网服务器上，但是为了保证其绝对的安全性，可能会把防火墙打开，打开之后，需要我们配置一些规则，来拒绝大都数的访问，只允许指定的ip地址来访问自身的服务</p><p>案例：redis服务器允许指定ip地址访问自身服务：<br><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1570370350312.png#id=ke02o&originHeight=203&originWidth=394&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis服务器上操作：</span><br><span class="line"><span class="meta">#</span><span class="bash"> iptables -I INPUT -p tcp --dport 6379 -s 192.168.62.188 -j ACCEPT</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> iptables -I INPUT -p tcp --dport 6379 -s 192.168.62.185 -j ACCEPT</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> iptables -I INPUT -p tcp --dport 6379 -j REJECT</span></span><br><span class="line"></span><br><span class="line">注意，顺序不能乱</span><br><span class="line">被允许ip服务器上验证：</span><br><span class="line"><span class="meta">#</span><span class="bash"> telnet 192.168.62.135 6379   <span class="comment">#测试本机是否能连同对方的6379端口号</span></span></span><br></pre></td></tr></table></figure><p>作业：Mysql服务器允许指定ip地址访问自身服务</p><h3 id="六、企业级Firewalld防火墙"><a href="#六、企业级Firewalld防火墙" class="headerlink" title="六、企业级Firewalld防火墙"></a>六、企业级Firewalld防火墙</h3><p><strong>rhel 7：firewall-cmd工具，firewalld服务</strong></p><h5 id="1、区域："><a href="#1、区域：" class="headerlink" title="1、区域："></a><strong>1、区域：</strong></h5><p>firewalld将网卡对应到不同的区域（zone），通过不同的zone定义了不同的安全等级</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">trusted :允许所有流量通过</span><br><span class="line">home/internal：仅允许ssh数据通过</span><br><span class="line">work：仅允许ssh,ipp-client,dhcpv6-client数据通过</span><br><span class="line">public：默认区域，仅允许ssh,dhcpv6-client数据通过</span><br><span class="line">external：仅允许ssh数据通过，通过该区域的数据将会伪装（SNAT/DNAT）</span><br><span class="line">dmz：仅允许ssh数据通过</span><br><span class="line">block：任何传入的网络数据包都将被阻止。拒绝所有流量</span><br><span class="line">drop：丢弃所有流量，没有返回回应消息</span><br></pre></td></tr></table></figure><h5 id="2、命令详解"><a href="#2、命令详解" class="headerlink" title="2、命令详解"></a><strong>2、命令详解</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent</span><br><span class="line">--permanent   #永久生效的配置参数、资源、端口以及服务等信息</span><br><span class="line">1、域zone相关的命令</span><br><span class="line">--get-default-zone  #查询默认的区域名称</span><br><span class="line">--set-default-zone=&lt;区域名称&gt;   #设置默认的区域</span><br><span class="line">--get-active-zones  #显示当前正在使用的区域与网卡名称</span><br><span class="line">--get-zones         #显示总共可用的区域</span><br><span class="line">2、services管理的命令</span><br><span class="line">--add-service=&lt;服务名&gt; --zone=&lt;区域&gt;       #设置指定区域允许该服务的流量</span><br><span class="line">--remove-service=&lt;服务名&gt; --zone=&lt;区域&gt;    #设置指定区域不再允许该服务的流量</span><br><span class="line">3、Port相关命令</span><br><span class="line">--add-port=&lt;端口号/协议&gt; --zone=&lt;区域&gt;      #设置指定区域允许该端口的流量</span><br><span class="line">--remove-port=&lt;端口号/协议&gt; --zone=&lt;区域&gt;   #设置指定区域不再允许该端口的流量</span><br><span class="line">4、查看所有规则的命令</span><br><span class="line">--list-all --zone=&lt;区域&gt;  显示指定区域的网卡配置参数、资源、端口以及服务等信息</span><br><span class="line">--reload   #让“永久生效”的配置规则立即生效，并覆盖当前的配置规则</span><br></pre></td></tr></table></figure><h5 id="3、firewalld配置使用"><a href="#3、firewalld配置使用" class="headerlink" title="3、firewalld配置使用"></a><strong>3、firewalld配置使用</strong></h5><ol><li>查看默认区域:</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --get-default-zone</span></span><br><span class="line">public</span><br><span class="line"></span><br><span class="line">验证:</span><br><span class="line">在192.168.246.201机器上访问192.168.246.200</span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -I http://192.168.246.200   <span class="comment">#不通</span></span></span><br><span class="line">curl: (7) Failed connect to 192.168.246.200:80; No route to host</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh root@192.168.246.200  <span class="comment">#ssh 可以</span></span></span><br><span class="line">root@192.168.246.200's password:</span><br></pre></td></tr></table></figure><ol start="2"><li>更改默认区域</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --<span class="built_in">set</span>-default-zone=trusted</span></span><br><span class="line">success</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --reload</span></span><br><span class="line">success</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --get-default-zone</span></span><br><span class="line">trusted</span><br><span class="line"></span><br><span class="line">验证:</span><br><span class="line">在192.168.246.201机器上访问192.168.246.200</span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -I http://192.168.246.200  <span class="comment">#访问成功</span></span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">==================================================================================</span><br><span class="line">修改回默认区域:</span><br><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --<span class="built_in">set</span>-default-zone=public</span></span><br><span class="line">success</span><br><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --reload</span></span><br><span class="line">success</span><br></pre></td></tr></table></figure><ol start="3"><li>向public区域添加服务</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --permanent --add-service=http --zone=public</span></span><br><span class="line">success</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --reload   <span class="comment">#重新加载配置文件</span></span></span><br><span class="line">success</span><br><span class="line"></span><br><span class="line">验证:</span><br><span class="line">在192.168.246.201机器上访问192.168.246.200</span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -I http://192.168.246.200</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line"></span><br><span class="line">移除：</span><br><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --permanent --zone=public --remove-service=http </span></span><br><span class="line">success</span><br><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --reload</span></span><br><span class="line">success</span><br></pre></td></tr></table></figure><ol start="4"><li>指定IP地址为192.168.246.201/24的客户端进入drop区域</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --permanent --add-source=192.168.246.201/24 --zone=drop </span></span><br><span class="line">success</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --reload</span></span><br><span class="line">success</span><br><span class="line"></span><br><span class="line">验证:</span><br><span class="line">在192.168.246.201的机器上访问246.200</span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -I http://192.168.246.200  <span class="comment">#访问不通</span></span></span><br></pre></td></tr></table></figure><ol start="5"><li>将192.168.246.201/24移除drop区域</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --permanent --remove-source=192.168.246.201/24 --zone=drop</span></span><br><span class="line">success</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --reload</span></span><br><span class="line">success</span><br><span class="line">验证:</span><br><span class="line">在192.168.246.201的机器上面访问246.200</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -I http://192.168.246.200  <span class="comment">#访问成功</span></span></span><br><span class="line">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure><ol start="6"><li>向pubic区域添加服务，以添加端口的方式</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --permanent --add-port=80/tcp --zone=public</span></span><br><span class="line">success</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --reload</span></span><br><span class="line">success</span><br><span class="line"></span><br><span class="line">验证:</span><br><span class="line">用192.168.246.201访问192.168.246.200机器</span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -I http://192.168.246.200</span></span><br><span class="line">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure><ol start="7"><li>删除服务、端口</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --permanent --remove-service=http --zone=public </span></span><br><span class="line">success</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --reload</span></span><br><span class="line">success</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --permanent --remove-port=80/tcp --zone=public </span></span><br><span class="line">success</span><br><span class="line">[root@iptables-server ~]# firewall-cmd --reload</span><br><span class="line">success</span><br><span class="line"></span><br><span class="line">验证:</span><br><span class="line">在192.168.246.201访问192.168.246.200机器</span><br><span class="line">[root@iptables-test ~]# curl -I http://192.168.246.200  #访问失败</span><br><span class="line">curl: (7) Failed connect to 192.168.246.200:80; No route to host</span><br></pre></td></tr></table></figure><ol start="8"><li>允许指定ip访问某个端口<br>仍以Redis为例</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Redis服务端操作：</span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --permanent --add-rich-rule=<span class="string">"rule family="</span>ipv4<span class="string">" source address="</span>192.168.142.16<span class="string">" port protocol="</span>tcp<span class="string">" port="</span>6379<span class="string">" accept"</span></span></span><br><span class="line"></span><br><span class="line">被允许ip地址验证：</span><br><span class="line"><span class="meta">#</span><span class="bash"> telnet 192.168.62.135 6379</span></span><br></pre></td></tr></table></figure><h3 id="七、企业级防火墙配置"><a href="#七、企业级防火墙配置" class="headerlink" title="七、企业级防火墙配置"></a>七、企业级防火墙配置</h3><p><strong>1、清除防火墙规则</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> iptables -F</span></span><br></pre></td></tr></table></figure><p><strong>2、修改默认规则为拒绝（修改前先放行22端口，保证自己能够连上主机）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@iptables-server ~]# iptables -A INPUT -p tcp --dport 22 -j ACCEPT  #放开22号端口</span><br><span class="line">[root@iptables-server ~]# iptables -P INPUT DROP   #将默认所有进来的请求设置为全部拒绝掉</span><br><span class="line">[root@iptables-server ~]# iptables -P FORWARD DROP #将默认所有的转发的规则设置为全部拒绝掉</span><br><span class="line">注意:修改默认规则： 只能使用ACCEPT和DROP</span><br><span class="line"><span class="meta"> #</span><span class="bash"> iptables -P INPUT DROP      ----拒绝</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> iptables -P INPUT ACCEPT    ----允许</span></span><br></pre></td></tr></table></figure><p><strong>3、放行指定的端口</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@iptables-server ~]# iptables -A INPUT -i lo -j ACCEPT  #允许通过lo网卡进入的请求</span><br><span class="line">[root@iptables-server ~]# iptables -A INPUT  -p tcp  -m multiport --dport  80,443 -j ACCEPT #允许访问80和443端口</span><br><span class="line">[root@iptables-server ~]# iptables -A INPUT -s 192.168.246.0/24 -j ACCEPT  #允许这个内网网段连接服务器</span><br></pre></td></tr></table></figure><p><strong>4、保存iptables配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@iptables-server ~]# service iptables save</span><br><span class="line">iptables: Saving firewall rules to /etc/sysconfig/iptables:[  OK  ]</span><br><span class="line">或者</span><br><span class="line">[root@iptables-server ~]# iptables-save &gt; /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://l66stbz.github.io/tags/Linux/"/>
    
      <category term="IPtables" scheme="https://l66stbz.github.io/tags/IPtables/"/>
    
  </entry>
  
  <entry>
    <title>ELK日志收集平台</title>
    <link href="https://l66stbz.github.io/2024/08/28/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E5%B9%B3%E5%8F%B0/"/>
    <id>https://l66stbz.github.io/2024/08/28/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E5%B9%B3%E5%8F%B0/</id>
    <published>2024-08-28T13:50:00.000Z</published>
    <updated>2024-08-31T02:30:55.772Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[TOC]</p><h2 id="1、日志收集所解决的问题"><a href="#1、日志收集所解决的问题" class="headerlink" title="1、日志收集所解决的问题"></a>1、日志收集所解决的问题</h2><ol><li>⽣产环境出现问题后，需要查看各种⽇志进⾏分析排错；</li><li>日常运维工作，日志文件分散，运维工作繁琐。可以实现日志聚合；</li><li>开发⼈员没有登陆服务器的权限。开发人员可以通过web界面查看日志；</li><li>面对大量的访问日志，可以统计出各项指标，比如PV UV。<h2 id="2、-Elastic-Stack-组件介绍"><a href="#2、-Elastic-Stack-组件介绍" class="headerlink" title="2、 Elastic Stack 组件介绍"></a>2、 Elastic Stack 组件介绍</h2></li></ol><ul><li>Elasticsearch（简称ES）是一个分布式、<strong>RESTful</strong>风格的开源搜索和数据分析引擎，专为全文搜索、结构化搜索、分析、和数据可视化而设计。支持几乎实时的搜索，并且具有高扩展性，能够处理PB级别的数据。<ul><li><strong>Index（索引）</strong>： 索引类似于关系型数据库中的表，它存储着相似结构的数据。在Elasticsearch中，每个索引包含一个或多个文档（Document）。</li><li><strong>Document（文档）</strong>： 文档是Elasticsearch的基本数据单位，相当于关系型数据库中的一行记录。文档以JSON格式存储，包含字段和值的对。</li><li><strong>Shards（分片）和Replicas（副本）</strong>： Elasticsearch将数据分为多个分片存储，每个索引可以包含一个或多个分片。分片可以提高并行查询的性能。副本是分片的备份，保证了数据的高可用性和容错性。</li><li><strong>Cluster（集群）</strong>： Elasticsearch集群由一个或多个节点（Node）组成。每个节点负责存储部分数据，并参与集群中的索引和搜索操作。集群有一个主节点，用于管理集群状态。</li><li><strong>Node（节点）</strong>： 节点是Elasticsearch的运行实例，每个节点属于某个集群。节点可以充当主节点、数据节点。</li><li><strong>使用场景：</strong><ul><li><strong>日志和事件数据分析</strong>： Elasticsearch常用于集中化日志管理和分析，帮助企业在海量日志中快速定位问题。</li><li><strong>电商网站的搜索功能</strong>： Elasticsearch被广泛用于电商网站的产品搜索，提供快速、相关性高的搜索结果。</li><li><strong>数据存储与检索</strong>： Elasticsearch能有效存储和检索结构化或非结构化数据，适用于大规模数据的管理。</li></ul></li></ul></li><li><strong>Logstash</strong><ul><li>Logstash 是一个开源的数据收集、处理和传输引擎，主要用于实时的数据管道管理。它是 Elastic Stack（ELK Stack：Elasticsearch、Logstash、Kibana）的重要组成部分，负责将各种来源的数据收集起来，进行过滤和格式化处理，并最终将其输出到指定的目标，如 Elasticsearch、文件或其他存储系统。</li></ul></li><li><strong>Kibana</strong><ul><li>Kibana 提供强大的数据可视化能力，使用户可以在浏览器中实时查看、搜索和分析存储在 Elasticsearch 中的数据。它提供丰富的可视化选项，如图表、地图和表格，支持构建交互式仪表板。</li></ul></li><li><strong>Filebeat</strong><ul><li>Filebeat 是一个轻量级的日志收集和传输工具。它通常用于从各种数据源收集日志，并将这些日志传输到 Logstash 或 Elasticsearch 进行进一步处理和分析。Filebeat 是一个边车代理，安装在需要监控的服务器上，用于高效地读取和转发日志数据。它旨在减少资源消耗，提供可靠的日志传输，并确保在出现故障时不会丢失日志数据。<h2 id="一、安装JAVA环境（所有es节点，logstash节点，kinbana节点）"><a href="#一、安装JAVA环境（所有es节点，logstash节点，kinbana节点）" class="headerlink" title="一、安装JAVA环境（所有es节点，logstash节点，kinbana节点）"></a>一、安装JAVA环境（所有es节点，logstash节点，kinbana节点）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 上传jdk1.8安装包</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># ll jdk-8u381-linux-x64.tar.gz </span></span><br><span class="line">-rw-r--r--. 1 root root 139273048 7月  31 10:23 jdk-8u381-linux-x64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 解压jdk到指定目录</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># tar xf jdk-8u381-linux-x64.tar.gz  -C /usr/local/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 创建软链接</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># cd /usr/local/</span></span><br><span class="line">[root@elk03 <span class="built_in">local</span>]<span class="comment"># ln -s jdk1.8.0_381/ java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 声明Java环境变量</span></span><br><span class="line">[root@elk03 <span class="built_in">local</span>]<span class="comment"># cat  &gt;&gt; /etc/profile.d/jdk.sh &lt;&lt;-EOF</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java</span><br><span class="line"><span class="built_in">export</span> PATH=\<span class="variable">$PATH</span>:\<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line">EOF</span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 重新加载配置文件</span></span><br><span class="line">[root@elk03 <span class="built_in">local</span>]<span class="comment"># source /etc/profile.d/jdk.sh </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 测试java</span></span><br><span class="line">[root@elk03 <span class="built_in">local</span>]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">"1.8.0_381"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_381-b09)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.381-b09, mixed mode)</span><br></pre></td></tr></table></figure><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405282051529.png#id=LinjU&originHeight=287&originWidth=1568&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><h2 id="二、-安装ES集群"><a href="#二、-安装ES集群" class="headerlink" title="二、 安装ES集群"></a>二、 安装ES集群</h2><h3 id="1、单节点部署"><a href="#1、单节点部署" class="headerlink" title="1、单节点部署"></a>1、单节点部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 解压es安装包到指定目录</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># tar xf elasticsearch-7.17.11-linux-x86_64.tar.gz  -C /usr/local</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 创建es软链接</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># cd /usr/local/</span></span><br><span class="line">[root@elk01 <span class="built_in">local</span>]<span class="comment"># ln -s elasticsearch-7.17.11/ es</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 声明ES环境变量</span></span><br><span class="line">[root@elk01 loacl]<span class="comment"># cat &gt;&gt; /etc/profile.d/es.sh &lt;&lt;-EOF</span></span><br><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="built_in">export</span> ES_HOME=/usr/<span class="built_in">local</span>/es</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:\<span class="variable">$ES_HOME</span>/bin</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 重新加载环境变量</span></span><br><span class="line">[root@elk01 <span class="built_in">local</span>]<span class="comment"># source /etc/profile.d/es.sh </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动es实例</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># elasticsearch</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>此时启动会有报错信息，记住详细看报错信息哟！</strong><code>嘿嘿</code><strong>。报错信息如下：此服务不能以超级管理员的身份运行，需要单独创建es普通用户。</strong><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405282057083.png#id=hPod8&originHeight=524&originWidth=2323&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p></blockquote></li></ul></li></ul><p><strong>解决方法如下操作：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 创建用于启动ES的用户</span></span><br><span class="line">[root@elk01 <span class="built_in">local</span>]<span class="comment"># useradd es</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看用户是否创建</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># id es</span></span><br><span class="line">uid=1000(es) gid=1000(es) 组=1000(es)</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 修改elasticsearch属主和数组</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># chown  -R es.es /usr/local/elasticsearch-7.17.11/</span></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看是否修改成功</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># ll /usr/local/elasticsearch-7.17.11/</span></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 切换es工作目录</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># cd /usr/local/elasticsearch-7.17.11/config/</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 备份es配置文件</span></span><br><span class="line">[root@elk01 config]<span class="comment"># cp elasticsearch.yml&#123;,.bak&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 修改文件相关参数</span></span><br><span class="line">[root@elk01 config]<span class="comment"># egrep -v  "^(#|$)" elasticsearch.yml</span></span><br><span class="line">···</span><br><span class="line"><span class="comment"># es集群名称</span></span><br><span class="line">cluster.name: study-elk-cluster</span><br><span class="line"><span class="comment"># 节点名称(一般以当前主机名一致)</span></span><br><span class="line">node.name: elk01</span><br><span class="line"><span class="comment"># 监听地址，，配置IP则知允许基于IP地址进行访问</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"><span class="comment"># 自动发现节点IP</span></span><br><span class="line">discovery.seed_hosts: [<span class="string">"192.168.100.160"</span>]</span><br><span class="line"><span class="comment"># 初始化master节点</span></span><br><span class="line">cluster.initial_master_nodes: [<span class="string">"192.168.100.160"</span>] </span><br><span class="line"><span class="comment"># 添加以下参数关闭geoip数据库的更新,减少对带宽和存储的消耗，禁用自动更新。GeoIP根据IP地址确定地理位置的技术，用于日志分析、用户活动追踪等场景。</span></span><br><span class="line">ingest.geoip.downloader.enabled: <span class="literal">false</span></span><br><span class="line">···</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 测试启动ES</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># su -c "elasticsearch" es</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>虽然es能够正常启动，但是启动日志会出下报错信息，需要我们修改启动的内核参数，第一个为修改系最大的文件描述符，第二个修改系统的虚拟内存。</strong></p></blockquote><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405282123794.png#id=Yu4ws&originHeight=300&originWidth=2519&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 修改es需要的limits参数（重新连接会话框才能成功加载参数）</span></span><br><span class="line">[root@elk01 logs]<span class="comment"># cat &gt;&gt;/etc/security/limits.d/elk.conf &lt;&lt;EOF</span></span><br><span class="line">* soft nofile 65535</span><br><span class="line">* hard nofile 131070</span><br><span class="line">EOF</span><br><span class="line">    <span class="comment"># 参数解释：</span></span><br><span class="line">        soft nofile 65535表示将文件描述符的软限制设置为65535。</span><br><span class="line">        hard nofile 131070表示将文件描述符的硬限制设置为131070。</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看limits参数是否加载</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># ulimit -Sn</span></span><br><span class="line">65535</span><br><span class="line">[root@elk01 ~]<span class="comment"># ulimit -Hn</span></span><br><span class="line">131070</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 修改内核参数</span></span><br><span class="line">[root@elk01 config]<span class="comment"># cat &gt;&gt; /etc/sysctl.d/elk.conf &lt;&lt;'EOF'</span></span><br><span class="line">vm.max_map_count = 262144</span><br><span class="line">EOF</span><br><span class="line">    <span class="comment"># 参数解释</span></span><br><span class="line">        vm.max_map_count = 262144 用于设置单个进程可以拥有的内存映射的最大数量。</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 加载内核参数</span></span><br><span class="line">[root@elk01 config]<span class="comment"># sysctl -f /etc/sysctl.d/elk.conf</span></span><br><span class="line">vm.max_map_count = 262144</span><br><span class="line">[root@elk01 config]<span class="comment"># sysctl -q vm.max_map_count</span></span><br><span class="line">vm.max_map_count = 262144</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 测试启动ES</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># su -c "elasticsearch" es</span></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 或者使用一下的参数实现后台运行</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># su -c "elasticsearch -d" es</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 测试节点</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># curl   192.168.100.160:9200</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"elk01"</span>,  <span class="comment"># 节点的名称,一般以当前主机名命名。</span></span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"study-elk-cluster"</span>,<span class="comment">#  Elasticsearch集群的名称，多个节点可以组成一个集群，共同提供搜索和存储功能。</span></span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"EyOTgfNNSHOvUsQNLQ9f7Q"</span>, <span class="comment"># 集群的唯一标识符（UUID）。每个Elasticsearch集群都有一个唯一的cluster_uuid，用于在集群内识别和管理节点之间的关系。</span></span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"7.17.11"</span>,  <span class="comment"># Elasticsearch 实例的版本</span></span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,  <span class="comment"># 示这个版本没有特殊的自定义修改或变化。</span></span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"tar"</span>,  <span class="comment"># Elasticsearch 是通过 tar 包安装的。</span></span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"eeedb98c60326ea3d46caef960fb4c77958fb885"</span>,  <span class="comment"># Git提交哈希。</span></span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2023-06-23T05:33:12.261262042Z"</span>, <span class="comment"># 版本的构建日期和时间。</span></span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,  <span class="comment"># 此版本适用于生产</span></span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"8.11.1"</span>,  <span class="comment"># Lucene版本</span></span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>, <span class="comment"># lasticsearch实例能够与运行 6.8.0 及以上版本的其他节点进行通讯。</span></span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span>  <span class="comment"># Elasticsearch兼容的最低索引版本。</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span> <span class="comment">#  Elasticsearch的标语或宣传口号。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>端口解释：</strong></p><ul><li>*<em>9200 对外暴露端口，使用的HTTP协议， Elasticsearch 的 REST API 服务的默认端口。开发者和应用程序通过 HTTP 协议与 Elasticsearch 进行交互，发送查询、索引文档、管理集群等操作。  *</em></li><li>*<em>9300 集群内部通讯端口。使用TCP协议。 用于集群内的节点间同步和协调。节点之间通过这个端口交换数据，包括集群管理信息、索引和搜索操作等。  *</em><h3 id="2、ES-JAVA调优-堆-heap-内存大小"><a href="#2、ES-JAVA调优-堆-heap-内存大小" class="headerlink" title="2、ES JAVA调优 堆(heap)内存大小"></a>2、ES JAVA调优 堆(heap)内存大小</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 查看运行的JAVA程序</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># jps  </span></span><br><span class="line">14917 Jps</span><br><span class="line">14713 Elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看ES堆内存大小</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># jmap -heap 14713(pid)</span></span><br></pre></td></tr></table></figure><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405282346087.png#id=mf04i&originHeight=619&originWidth=1348&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 修改堆内存大小（最大设置为32G，要么内存的一半）</span></span><br><span class="line">[root@elk01 config]<span class="comment"># vim /usr/local/elasticsearch-7.17.11/config/jvm.options</span></span><br><span class="line">···</span><br><span class="line">-Xms256m</span><br><span class="line">-Xmx256m</span><br><span class="line">···</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 删除数据、日志</span></span><br><span class="line">[root@elk01 config]<span class="comment"># rm -rf /usr/local/es/&#123;data,logs&#125;/*</span></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 删除缓存数据</span></span><br><span class="line">[root@elk01 config]<span class="comment"># rm -rf /tmp/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 准备ES启动脚本并启动（加入systemd）</span></span><br><span class="line">[root@elk01 config]<span class="comment"># cat &gt;&gt; /usr/lib/systemd/system/es.service &lt;&lt;EOF</span></span><br><span class="line">[Unit]</span><br><span class="line"><span class="comment"># 描述服务的简短说明，这里描述为 "ELK"。</span></span><br><span class="line">Description=ELK</span><br><span class="line"><span class="comment"># 指定服务的启动顺序。表示该服务在网络目标 (network.target) 之后启动，确保网络服务已启动并可用。</span></span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"><span class="comment"># 指定服务的启动类型为 forking，表示服务启动后会产生一个子进程，并且主进程会在启动完成后退出。这通常用于后台运行的守护进程。</span></span><br><span class="line">Type=forking</span><br><span class="line"><span class="comment"># 指定启动服务的命令</span></span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/es/bin/elasticsearch -d</span><br><span class="line"><span class="comment"># 指定服务在退出后不重启。可以根据需要将其更改为 always 或 on-failure，以确保服务在失败后自动重启。</span></span><br><span class="line">Restart=no</span><br><span class="line"><span class="comment"># 指定以 es 用户的身份运行服务。</span></span><br><span class="line">User=es</span><br><span class="line"><span class="comment"># 指定服务所属的组为 es。</span></span><br><span class="line">Group=es</span><br><span class="line"><span class="comment"># 设置进程打开文件的最大数量（文件描述符限制）</span></span><br><span class="line">LimitNOFILE=131070</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line"><span class="comment"># 指定服务的目标，表示该服务在多用户模式下可用。</span></span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载systemd配置文件</span></span><br><span class="line">[root@elk01 config]<span class="comment"># systemctl daemon-reload</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动es</span></span><br><span class="line">[root@elk01 config]<span class="comment"># systemctl restart es</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3、部署ES集群"><a href="#3、部署ES集群" class="headerlink" title="3、部署ES集群"></a>3、部署ES集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 创建用于启动ES的用户</span></span><br><span class="line">[root@elk01 opt]<span class="comment"># useradd es </span></span><br><span class="line">[root@elk01 opt]<span class="comment"># id es</span></span><br><span class="line">uid=1000(elasticsearch) gid=1000(elasticsearch) 组=1000(elasticsearch)</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 创建ES数据目录和日志目录存放目录</span></span><br><span class="line">[root@elk01 usr]<span class="comment"># mkdir -p /opt/&#123;data,logs&#125;</span></span><br><span class="line">[root@elk01 usr]<span class="comment"># install -d /opt/&#123;data,logs&#125;/es -o es -g es</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 解压es安装包到指定目录</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># tar xf elasticsearch-7.17.11-linux-x86_64.tar.gz  -C /opt/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 更改目录名</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># cd /opt/ &amp;&amp; mv  elasticsearch-7.17.11  es</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 创建ES环境变量</span></span><br><span class="line">[root@elk01 opt]<span class="comment"># vim  &gt;&gt; /etc/profile.d/es.sh &lt;&lt;-EOF</span></span><br><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="built_in">export</span> ES_HOME=/opt/es</span><br><span class="line"><span class="built_in">export</span> PATH=\<span class="variable">$PATH</span>:\<span class="variable">$ES_HOME</span>/bin</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 重新加载环境变量</span></span><br><span class="line">[root@elk01 opt]<span class="comment"># source /etc/profile.d/es.sh </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 修改elasticsearch属主和数组</span></span><br><span class="line">[root@elk01 opt]<span class="comment"># chown -R  es,es  /opt/es</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 修改es需要的limits参数（重新连接会话框才能成功加载参数）</span></span><br><span class="line">[root@elk01 opt]<span class="comment"># cat &gt;&gt; /etc/security/limits.d/elk.conf &lt;&lt;-EOF</span></span><br><span class="line">* soft nofile 65535</span><br><span class="line">* hard nofile 131070</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看limits参数是否加载</span></span><br><span class="line">[root@elk01 opt]<span class="comment"># ulimit -Sn</span></span><br><span class="line">65535</span><br><span class="line">[root@elk01 opt]<span class="comment"># ulimit -Hn</span></span><br><span class="line">131070</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 修改内核参数</span></span><br><span class="line">[root@elk01 opt]<span class="comment"># cat &gt; /etc/sysctl.d/elk.conf &lt;&lt;EOF</span></span><br><span class="line">vm.max_map_count = 262144</span><br><span class="line">EOF</span><br><span class="line">    </span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 加载内核参数</span></span><br><span class="line">[root@elk01 opt]<span class="comment"># sysctl -f /etc/sysctl.d/elk.conf</span></span><br><span class="line">vm.max_map_count = 262144</span><br><span class="line">[root@elk01 opt]<span class="comment"># sysctl -q vm.max_map_count</span></span><br><span class="line">vm.max_map_count = 262144</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 修改堆内存大小（最大设置为32G，要么内存的一半）</span></span><br><span class="line">[root@elk01 opt]<span class="comment"># vim /opt/elasticsearch-7.17.11/config/jvm.options</span></span><br><span class="line">···</span><br><span class="line">-Xms256m</span><br><span class="line">-Xmx256m</span><br><span class="line">···</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; elk01修改配置文件</span></span><br><span class="line">[root@elk01 opt]<span class="comment"># egrep -v "^(#|$)" /opt/es/config/elasticsearch.yml </span></span><br><span class="line">cluster.name: study-elk-cluster</span><br><span class="line">node.name: elk01</span><br><span class="line">path.data: /opt/data/es<span class="comment"># 指定数据目录</span></span><br><span class="line">path.logs: /opt/logs/es<span class="comment"># 指定日志目录</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">discovery.seed_hosts: [<span class="string">"192.168.100.160"</span>,<span class="string">"192.168.100.161"</span>,<span class="string">"192.168.100.162"</span>]</span><br><span class="line">cluster.initial_master_nodes: [<span class="string">"192.168.100.160"</span>,<span class="string">"192.168.100.161"</span>,<span class="string">"192.168.100.162"</span>]</span><br><span class="line">ingest.geoip.downloader.enabled: <span class="literal">false</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; elk02修改配置文件</span></span><br><span class="line">[root@elk02 opt]<span class="comment"># egrep -v "^(#|$)" /opt/es/config/elasticsearch.yml </span></span><br><span class="line">cluster.name: study-elk-cluster</span><br><span class="line">node.name: elk02</span><br><span class="line">path.data: /opt/data/es</span><br><span class="line">path.logs: /opt/logs/es</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">discovery.seed_hosts: [<span class="string">"192.168.100.160"</span>,<span class="string">"192.168.100.161"</span>,<span class="string">"192.168.100.162"</span>]</span><br><span class="line">cluster.initial_master_nodes: [<span class="string">"192.168.100.160"</span>,<span class="string">"192.168.100.161"</span>,<span class="string">"192.168.100.162"</span>]</span><br><span class="line">ingest.geoip.downloader.enabled: <span class="literal">false</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; elk03修改配置文件</span></span><br><span class="line">[root@elk03 opt]<span class="comment"># egrep -v "^#|^$" /opt/es/config/elasticsearch.yml </span></span><br><span class="line">cluster.name: study-elk-cluster</span><br><span class="line">node.name: elk03</span><br><span class="line">path.data: /opt/data/es</span><br><span class="line">path.logs: /opt/logs/es</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">discovery.seed_hosts: [<span class="string">"192.168.100.160"</span>,<span class="string">"192.168.100.161"</span>,<span class="string">"192.168.100.162"</span>]</span><br><span class="line">cluster.initial_master_nodes: [<span class="string">"192.168.100.160"</span>,<span class="string">"192.168.100.161"</span>,<span class="string">"192.168.100.162"</span>]</span><br><span class="line">ingest.geoip.downloader.enabled: <span class="literal">false</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 所有节点添加elk启动脚本</span></span><br><span class="line">[root@elk03 opt]<span class="comment"># cat &gt; /usr/lib/systemd/system/es.service &lt;&lt;EOF</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=ELK</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/opt/es/bin/elasticsearch -d</span><br><span class="line">Restart=no</span><br><span class="line">User=es</span><br><span class="line">Group=es</span><br><span class="line">LimitNOFILE=131070</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 所有节点重新加载并启动</span></span><br><span class="line">[root@elk01 config]<span class="comment"># systemctl daemon-reload</span></span><br><span class="line">[root@elk01 config]<span class="comment"># systemctl restart es</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 测试集群</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># curl 192.168.100.160:9200/_cat/nodes</span></span><br><span class="line">192.168.100.160 40 59  8 0.14 0.10 0.06 cdfhilmrstw * elk01</span><br><span class="line">192.168.100.161 54 30 11 0.55 0.29 0.11 cdfhilmrstw - elk02</span><br><span class="line">192.168.100.162 48 28  8 0.29 0.16 0.06 cdfhilmrstw - elk03</span><br><span class="line">  <span class="comment"># 参数解释：</span></span><br><span class="line">    第一列：每个节点的IP地址；</span><br><span class="line">    第二列：每个节点的CPU使用率；</span><br><span class="line">    第三列：每个节点的内存的使用率；</span><br><span class="line">    第四列：每个节点的活跃分片数量；</span><br><span class="line">    第五列：每个节点的1分钟、5分钟、15分钟平均负载；</span><br><span class="line">    第六列：每个节点在集群中的角色；</span><br><span class="line">    第七列：*代表主节点；主节点负责管理集群的元数据、分片分配和集群状态等任务。</span><br><span class="line">    第八列：节点的名称</span><br></pre></td></tr></table></figure><p>三、Kibana安装（elk03节点）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 安装kibana</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># yum localinstall -y kibana-7.17.11-x86_64.rpm </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 备份配置文件</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># cd /etc/kibana/</span></span><br><span class="line">[root@elk03 kibana]<span class="comment"># cp kibana.yml kibana.yml.bak</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 修改kibana配置文件</span></span><br><span class="line">[root@elk03 kibana]<span class="comment"># egrep -v "^(#|$)" kibana.yml </span></span><br><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line">server.port: 5601</span><br><span class="line"><span class="comment"># 主机地址或者主机名</span></span><br><span class="line">server.host: <span class="string">"0.0.0.0"</span></span><br><span class="line"><span class="comment"># 服务名称</span></span><br><span class="line">server.name: <span class="string">"study-elk-kibana"</span></span><br><span class="line"><span class="comment"># ES主机组地址</span></span><br><span class="line">elasticsearch.hosts: [<span class="string">"http://192.168.100.160:9200"</span>,<span class="string">"http://192.168.100.161:9200"</span>,<span class="string">"http://192.168.100.162:9200"</span>]</span><br><span class="line"><span class="comment"># 修改语言</span></span><br><span class="line">i18n.locale: <span class="string">"zh-CN"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 启动Kibana</span></span><br><span class="line">[root@elk03 kibana]<span class="comment"># systemctl enable --now kibana</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 游览器IP+5601访问</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405291424194.png#id=mXN3G&originHeight=1368&originWidth=2544&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><h2 id="四、Logstash安装（elk02）"><a href="#四、Logstash安装（elk02）" class="headerlink" title="四、Logstash安装（elk02）"></a>四、Logstash安装（elk02）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 安装Logstash</span></span><br><span class="line">[root@elk02 ~]<span class="comment"># yum localinstall -y logstash-7.17.11-x86_64.rpm </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 创建软连接</span></span><br><span class="line">[root@elk02 <span class="built_in">local</span>]<span class="comment"># ln -s /usr/share/logstash/bin/logstash   /usr/bin/logstash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 编写测试文件</span></span><br><span class="line">[root@elk02 ~]<span class="comment"># mkdir conf-logstash</span></span><br><span class="line">[root@elk02 ~]<span class="comment"># cat  conf-logstash/01-stdin-to-stdout.conf </span></span><br><span class="line">input &#123;</span><br><span class="line"> stdin &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">output&#123;</span><br><span class="line"> stdout &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 测试Logstash</span></span><br><span class="line">[root@elk02 ~]<span class="comment"># logstash -f ~/conf-logstash/01-stdin-to-stdout.conf</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40379882/1724775298040-1170b872-9cec-4b44-8a9f-5f4336aad57a.png#averageHue=%23070706&clientId=u75f1b712-9c51-4&from=paste&height=294&id=uf9f627e0&originHeight=294&originWidth=1095&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21705&status=done&style=none&taskId=ud3c9e175-6ee9-419e-8bd5-8122d076e6e&title=&width=1095" alt="image.png"></p><h2 id="五、Filebeat安装（elk01）"><a href="#五、Filebeat安装（elk01）" class="headerlink" title="五、Filebeat安装（elk01）"></a>五、Filebeat安装（elk01）</h2><p>帮助文档：<a href="https://www.elastic.co/guide/en/beats/filebeat/7.17/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/7.17/index.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 安装Filebeat</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># yum localinstall -y filebeat-7.17.11-x86_64.rpm </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 测试Filebeat</span></span><br><span class="line">[root@elk01 opt]<span class="comment"># cd filebeat</span></span><br><span class="line">[root@elk01 filebeat]<span class="comment"># mkdir filebeat-config</span></span><br><span class="line">[root@elk01 filebeat]<span class="comment"># cp filebeat.yml  filebeat-config/01-test.yml</span></span><br><span class="line">[root@elk01 filebeat]<span class="comment"># cat filebeat-config/01-test.yml</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: stdin</span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">output.console:</span><br><span class="line">  pretty: <span class="literal">true</span>    <span class="comment"># 启动美观格式输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Filebeat实例</span></span><br><span class="line">[root@elk01 filebeat]<span class="comment"># filebeat -e -c /opt/filebeat/filebeat-config/01-test.yml</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405291142027.png#from=url&id=FZw9q&originHeight=1186&originWidth=1471&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><h4 id="1、Filebeat架构"><a href="#1、Filebeat架构" class="headerlink" title="1、Filebeat架构"></a>1、Filebeat架构</h4><p>架构图：<br>    Input（数据源）收集方式：<a href="https://www.elastic.co/guide/en/beats/filebeat/7.17/configuration-filebeat-options.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/7.17/configuration-filebeat-options.html</a><br>    Output（输出地）推送方式：<a href="https://www.elastic.co/guide/en/beats/filebeat/7.17/configuring-output.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/7.17/configuring-output.html</a><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405291516016.png#id=NuwUn&originHeight=658&originWidth=1714&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><h2 id="六、Filebeat日志收集"><a href="#六、Filebeat日志收集" class="headerlink" title="六、Filebeat日志收集"></a>六、Filebeat日志收集</h2><p><code>Input</code>方式：<a href="https://www.elastic.co/guide/en/beats/filebeat/7.17/filebeat-input-stdin.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/7.17/filebeat-input-stdin.html</a></p><h4 id="1、Filebeat标准输入和输出"><a href="#1、Filebeat标准输入和输出" class="headerlink" title="1、Filebeat标准输入和输出"></a>1、Filebeat标准输入和输出</h4><p>​    标准输入官方文档：<a href="https://www.elastic.co/guide/en/beats/filebeat/7.17/filebeat-input-stdin.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/7.17/filebeat-input-stdin.html</a><br>​    标准输出官方文档：<a href="https://www.elastic.co/guide/en/beats/filebeat/7.17/console-output.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/7.17/console-output.html</a><br>​    <strong>简介</strong>：使用终端输入从标准输入读取事件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建Filebeat配置文件测试目录</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># mkdir filebeat-config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># vim filebeat-config/01-stdin-on-stdout.yml </span></span><br><span class="line"><span class="comment"># 指定输入类型</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">  <span class="comment"># 终端标准输入</span></span><br><span class="line">- <span class="built_in">type</span>: stdin</span><br><span class="line"><span class="comment"># 标准输出类型：终端输出</span></span><br><span class="line"></span><br><span class="line">output.console:</span><br><span class="line">  <span class="comment">#如果设置为 true，则写入 stdout 的事件将采用良好的格式。默认值为 false。</span></span><br><span class="line">  pretty: <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># filebeat  -e -c /root/filebeat-config/01-stdin-on-stdout.yml</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405292047924.png#from=url&id=lfzKX&originHeight=1267&originWidth=1816&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><h4 id="2、-Filebeat-基于Log类型进行输入"><a href="#2、-Filebeat-基于Log类型进行输入" class="headerlink" title="2、 Filebeat 基于Log类型进行输入"></a>2、 Filebeat 基于Log类型进行输入</h4><p>​    <code>Log</code>方式类型输入：<a href="https://www.elastic.co/guide/en/beats/filebeat/7.17/filebeat-input-log.html#input-paths" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/7.17/filebeat-input-log.html#input-paths</a><br>​    <strong>简介</strong>： <code>Log类型</code>输入将日志文件发送到输出。使用输入从日志文件中读取行。此类型<code>[ 7.16.0 ]</code>版本以后废弃，推荐使用<code>filestream input</code>类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 编写Log类型日志输入测试文件</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># vim filebeat-config/02-log-on-stdout.yml </span></span><br><span class="line"><span class="comment"># 指定输入类型</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line"><span class="comment"># 日志输入类型</span></span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  <span class="comment"># 日志存放路径</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/messages</span><br><span class="line">    - /var/<span class="built_in">log</span>/*.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 设置标准终端输出至屏幕</span></span><br><span class="line">output.console:</span><br><span class="line">  <span class="comment">#如果设置为 true，则写入stdout的事件将采用良好的格式。默认值为 false。</span></span><br><span class="line">  pretty: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 测试</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># filebeat  -e -c /root/filebeat-config/02-log-on-stdout.yml</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405292111651.png#id=xCb24&originHeight=1048&originWidth=2017&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><h5 id="2-1-Filebeat-基于Log类型进行输入并且自定义字段"><a href="#2-1-Filebeat-基于Log类型进行输入并且自定义字段" class="headerlink" title="2.1 Filebeat 基于Log类型进行输入并且自定义字段"></a><strong>2.1 Filebeat 基于Log类型进行输入并且自定义字段</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]<span class="comment"># vim  filebeat-config/02-log-on-stdout.yml </span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/messages</span><br><span class="line">  <span class="comment"># 开启自定义字段</span></span><br><span class="line">  fields:</span><br><span class="line">    <span class="comment"># 添加自定义字段</span></span><br><span class="line">    log_type: system</span><br><span class="line">  fields_under_root: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/access.log</span><br><span class="line">  <span class="comment"># 开启自定义字段</span></span><br><span class="line">  fields:</span><br><span class="line">    <span class="comment"># 开启自定义字段</span></span><br><span class="line">    log_type: nginx_access</span><br><span class="line">  fields_under_root: <span class="literal">true</span></span><br><span class="line">output.console:</span><br><span class="line">  pretty: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 清除偏移量</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># rm -rf /var/lib/filebeat/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 启动Filebeat实例</span></span><br><span class="line">[root@elk01 filebeat]<span class="comment"># filebeat  -e -c /root/filebeat-config/02-log-on-stdout.yml</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405292301452.png#id=f6HAq&originHeight=691&originWidth=1962&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><blockquote><p>注意：<br>    如果fields_under_root设置为true，则自定义字段将作为顶级字段存储在输出文档中，而不是分组在字段子字典下。如果自定义字段名称与Filebeat添加的其他字段名称冲突，则自定义字段将覆盖其他字段。效果图如下：<br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405292336305.png#from=url&id=Qq88e&originHeight=757&originWidth=1828&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p></blockquote><h5 id="2-2-Filebeat-基于Log类型进行输入并且自定义Tags"><a href="#2-2-Filebeat-基于Log类型进行输入并且自定义Tags" class="headerlink" title="2.2 Filebeat 基于Log类型进行输入并且自定义Tags"></a><strong>2.2 Filebeat 基于Log类型进行输入并且自定义Tags</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]<span class="comment"># vim  filebeat-config/02-log-on-stdout.yml </span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/messages</span><br><span class="line">  <span class="comment"># 对当前的输入日志文件，指定独有的标签</span></span><br><span class="line">  tags: [<span class="string">"system logs"</span>,<span class="string">""</span>,<span class="string">""</span>]</span><br><span class="line">  fields:</span><br><span class="line">    log_type: system</span><br><span class="line"></span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/access.log</span><br><span class="line">  <span class="comment"># 对当前的输入日志文件，指定独有的标签 </span></span><br><span class="line">  tags: [<span class="string">"nginx access_log"</span>]</span><br><span class="line">  fields:</span><br><span class="line">    log_type: nginx_access</span><br><span class="line"></span><br><span class="line">output.console:</span><br><span class="line">  pretty: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除偏移量</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># &gt; /var/lib/filebeat/registry/filebeat/log.json </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Filebeat实例</span></span><br><span class="line">[root@elk01 filebeat]<span class="comment"># filebeat  -e -c /root/filebeat-config/02-log-on-stdout.yml</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405292322333.png#id=UMxF5&originHeight=1077&originWidth=2002&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><blockquote><p>对于Tags的设定，将Filebeat收集到的日志转发至ES集群时，可以针对不同的Tag设置不同的索引，方便查阅。</p></blockquote><h5 id="2-3-offset偏移量概念"><a href="#2-3-offset偏移量概念" class="headerlink" title="2.3 offset偏移量概念"></a>2.3 offset偏移量概念</h5><p><strong>简介</strong>：偏移量（offset）在 Filebeat 中指的是文件读取位置的标记，用于追踪文件中的读取进度。<br>在某些情况下，可能需要手动操作偏移量。例如：</p><ul><li>假如想要<code>重新读取</code>一个<code>日志文件</code>，可以删除对应的注册表条目或者编辑偏移量值。注意：请确保 Filebeat 暂停运行期间进行这些操作以防止冲突。</li></ul><p><code>RPM方式</code>安装的Filebeat offset存放路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换目录</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># cd  /var/lib/filebeat/registry/filebeat/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件</span></span><br><span class="line">[root@elk01 filebeat]<span class="comment"># ls</span></span><br><span class="line">log.json  meta.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除偏移量文件，启动Filebeat重新读取日志文件</span></span><br><span class="line">[root@elk01 registry]<span class="comment"># &gt; log.json</span></span><br></pre></td></tr></table></figure><blockquote><p><code>log.json</code>为偏移量存放文件。清空偏移量后，再次启动Filebeat会<code>重新读取日志文件</code>。</p></blockquote><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405292210601.png#id=Q39yO&originHeight=135&originWidth=2296&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><strong>思考题：为什么Filebeat需要设置这个偏移量？</strong></p><h5 id="2-4-Filebeat-基于Log类型进行输入实现日志删除"><a href="#2-4-Filebeat-基于Log类型进行输入实现日志删除" class="headerlink" title="2.4 Filebeat 基于Log类型进行输入实现日志删除"></a>2.4 Filebeat 基于Log类型进行输入实现日志删除</h5><p>支持正则表达式：<a href="https://www.elastic.co/guide/en/beats/filebeat/7.17/regexp-support.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/7.17/regexp-support.html</a><br>    <strong>简介</strong>：<code>exclude_lines</code>与要Filebeat排除的行匹配的正则表达式列表。Filebeat将删除列表中与正则表达式匹配的所有行。默认情况下，不会删除任何行。空行将被忽略。如果还指定了多行设置，则在通过exclude_lines过滤行之前，每条多行消息都将合并为一行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编写测试日志文件</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># cat &gt;&gt; /tmp/test.log &lt;&lt; EOF</span></span><br><span class="line">hi cloud</span><br><span class="line">hello world</span><br><span class="line">Hello cloud</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写Filebeat配置文件</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># vim filebeat-config/03-log-exclude-stdin.yml </span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /tmp/test.log</span><br><span class="line">  tags: [<span class="string">"test"</span>]</span><br><span class="line">  fields:</span><br><span class="line">    log_type: <span class="built_in">test</span></span><br><span class="line">  fields_under_root: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 删除以hello开头的行，注意区分大小写</span></span><br><span class="line">  exclude_lines: [<span class="string">'^hello'</span>,<span class="string">'^haha'</span>,<span class="string">'^lala'</span>]</span><br><span class="line"></span><br><span class="line">output.console:</span><br><span class="line">  pretty: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Filebeat实例</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># filebeat  -e -c /root/filebeat-config/03-log-exclude-stdin.yml</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405292358366.png#from=url&id=lsydL&originHeight=1264&originWidth=1980&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt><br><strong>查看offset偏移量</strong><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405292359570.png#id=B1zCR&originHeight=144&originWidth=2299&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><strong>查看文件字符</strong><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405292359075.png#id=DvN9D&originHeight=100&originWidth=1249&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><blockquote><p>此参数是在该日志文件阅读完成以后，在进行过滤删除，故在offset文件中还是有所体现。</p></blockquote><h5 id="2-5-Filebeat-基于Log类型进行输入实现匹配日志输出"><a href="#2-5-Filebeat-基于Log类型进行输入实现匹配日志输出" class="headerlink" title="2.5 Filebeat 基于Log类型进行输入实现匹配日志输出"></a>2.5 Filebeat 基于Log类型进行输入实现匹配日志输出</h5><p>支持正则表达式：<a href="https://www.elastic.co/guide/en/beats/filebeat/7.17/regexp-support.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/7.17/regexp-support.html</a><br><strong>简介</strong>：<code>include_lines</code>希望Filebeat包含的行相匹配的正则表达式列表。Filebeat仅导出与列表中正则表达式匹配的行。默认情况下，将导出所有行。空行将被忽略。如果还指定了多行设置，则在通过include_lines过滤行之前，每条多行消息将合并为一行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 准备测试日志文件</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># cat &gt;&gt;/tmp/test02.log  &lt;&lt;EOF</span></span><br><span class="line">ERR haha</span><br><span class="line">WARN haha</span><br><span class="line">info haha</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写Filebeat测试文件</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># vim filebeat-config/04-log-include-stdin.yml </span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /tmp/test02.log</span><br><span class="line">  tags: [<span class="string">"test"</span>]</span><br><span class="line">  fields:</span><br><span class="line">    log_type: <span class="built_in">test</span></span><br><span class="line">  fields_under_root: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 只过滤出以ERR WARN的行，区分大小写</span></span><br><span class="line">  include_lines: [<span class="string">'^ERR'</span>,<span class="string">'^WARN'</span>]</span><br><span class="line"></span><br><span class="line">output.console:</span><br><span class="line">  pretty: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Filebeat实例</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># filebeat -e -c  /root/filebeat-config/04-log-include-stdin.yml</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300017494.png#from=url&id=tK5b7&originHeight=850&originWidth=1818&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><h5 id="2-6-include-lines和exclude-lines优先级"><a href="#2-6-include-lines和exclude-lines优先级" class="headerlink" title="2.6 include_lines和exclude_lines优先级"></a>2.6 include_lines和exclude_lines优先级</h5><p>​    如果同时定义了<code>include_lines</code>和<code>exclude_lines</code>，则Filebeat首先执行<code>include_lines</code>，然后执行<code>exclude_line</code>。定义这两个选项的顺序无关紧要。<code>include_lines</code>选项将始终在<code>exclude_lines</code>选项之前执行，即使<code>exclude_line</code>出现在配置文件中的<code>include_lines</code>之前也是如此。</p><h5 id="2-7-Nginx-error日志过滤处理实战"><a href="#2-7-Nginx-error日志过滤处理实战" class="headerlink" title="2.7 Nginx error日志过滤处理实战"></a>2.7 Nginx error日志过滤处理实战</h5><p><strong>简介</strong>：在公司中，对于应用的错误日志一般只关心包含<code>error</code>等相关内容的行，其它的我们都需要对其进行过滤处理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 编写测试日志文件</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># vim  /var/log/nginx/error.log </span></span><br><span class="line">2024/05/30 01:55:13 [notice] 967<span class="comment">#967: worker process 976 exited with code 0</span></span><br><span class="line">2024/05/30 01:55:13 [notice] 967<span class="comment">#967: signal 29 (SIGIO) received</span></span><br><span class="line">2024/05/30 01:55:13 [notice] 967<span class="comment">#967: signal 17 (SIGCHLD) received from 977</span></span><br><span class="line">2024/05/30 01:55:13 [notice] 967<span class="comment">#967: worker process 977 exited with code 0</span></span><br><span class="line">2024/05/30 01:55:13 [notice] 967<span class="comment">#967: signal 17 (SIGCHLD) received from 975</span></span><br><span class="line">2024/05/30 01:55:13 [notice] 967<span class="comment">#967: worker process 975 exited with code 0</span></span><br><span class="line">2024/05/30 01:55:13 [notice] 967<span class="comment">#967: exit</span></span><br><span class="line">2024/05/30 01:55:33 [emerg] 2359<span class="comment">#2359: unexpected "&#125;" in /etc/nginx/nginx.conf:11</span></span><br><span class="line">2024/05/30 01:55:16 [emerg] 2384<span class="comment">#2384: "access_log" directive is not allowed here in /etc/nginx/nginx.conf:22</span></span><br><span class="line">2024/05/30 01:55:41 [notice] 2396<span class="comment">#2396: using the "epoll" event method</span></span><br><span class="line">2024/05/30 01:55:41 [notice] 2396<span class="comment">#2396: nginx/1.24.0</span></span><br><span class="line">2024/05/30 01:55:41 [notice] 2396<span class="comment">#2396: built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) </span></span><br><span class="line">2024/05/30 01:55:41 [notice] 2396<span class="comment">#2396: OS: Linux 3.10.0-1160.el7.x86_64</span></span><br><span class="line">2024/05/30 01:55:41 [notice] 2396<span class="comment">#2396: getrlimit(RLIMIT_NOFILE): 1024:4096</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 编写Filebeat测试文件</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># vim filebeat-config/05-log-nginx-error-stdin.yml </span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/error.log</span><br><span class="line">  tags: [<span class="string">"nginx_error"</span>]</span><br><span class="line">  fields:</span><br><span class="line">    log_type: nginx_error</span><br><span class="line">  fields_under_root: <span class="literal">true</span></span><br><span class="line">  include_lines: [<span class="string">'\[emerg\]'</span>]</span><br><span class="line"></span><br><span class="line">output.console:</span><br><span class="line">  pretty: <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 启动Filebeat实例</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># filebeat -e -c /root/filebeat-config/05-log-nginx-error-stdin.yml</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300034705.png#id=PKtHd&originHeight=621&originWidth=2215&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><h5 id="2-8-Filebeat输出数据至Elasticsearch集群"><a href="#2-8-Filebeat输出数据至Elasticsearch集群" class="headerlink" title="2.8 Filebeat输出数据至Elasticsearch集群"></a>2.8 Filebeat输出数据至Elasticsearch集群</h5><p>官方链接：<a href="https://www.elastic.co/guide/en/beats/filebeat/7.17/elasticsearch-output.html#elasticsearch-output" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/7.17/elasticsearch-output.html#elasticsearch-output</a><br>    简介：Elasticsearch输出使用Elasticsearch <code>HTTP API</code>将事件直接发送到Elasticearch。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编写Filebeat配置文件</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># vim filebeat-config/06-log-nginx-access-es.yml </span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/access.log</span><br><span class="line">  tags: [<span class="string">"nginx_access"</span>]</span><br><span class="line">  fields:</span><br><span class="line">    log_type: nginx_access</span><br><span class="line">  fields_under_root: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出至ES集群</span></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  <span class="comment"># ES集群地址</span></span><br><span class="line">  hosts: [<span class="string">"http://192.168.174.140:9200"</span>,<span class="string">"http://192.168.174.141:9200"</span>,<span class="string">"http://192.168.174.142:9200"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Filebeat实例</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># filebeat  -e -c /root/filebeat-config/06-log-nginx-access-es.yml</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300051042.png#id=b1B1L&originHeight=457&originWidth=2308&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><strong>Kibana查看ES数据</strong><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300053155.png#id=M9HFQ&originHeight=1417&originWidth=2488&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300053167.png#id=J99r5&originHeight=1417&originWidth=2488&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300054359.png#id=i3BKi&originHeight=1417&originWidth=2488&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300056067.png" alt></p><blockquote><p>通过索引模式来匹配索引</p></blockquote><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300059360.png">![](https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300059590.png#id=b38Ds&originHeight=1417&originWidth=2488&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none)<h5 id="2-9-Filebeat输出数据至Elasticsearch集群并自定义单个索引"><a href="#2-9-Filebeat输出数据至Elasticsearch集群并自定义单个索引" class="headerlink" title="2.9 Filebeat输出数据至Elasticsearch集群并自定义单个索引"></a>2.9 Filebeat输出数据至Elasticsearch集群并自定义单个索引</h5><p>官网：<a href="https://www.elastic.co/guide/en/beats/filebeat/7.17/elasticsearch-output.html#index-option-es" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/7.17/elasticsearch-output.html#index-option-es</a><br>    <strong>简介</strong>：使用每日索引时要将事件写入的索引名称。默认值为“filebeat-%｛[agent.version]｝-%｛+yyyy.MM.dd｝”，例如“filebeat-7.17.21-2024-05-22”。<code>在公司中一般会根据日志的类型设置不同的索引</code>。但是如果需要自定以索引，需要把索引的生命周期管理给禁用掉<code>setup.ilm.enabled: false</code>，否则自定以索引无法生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编写Filebeat测试文件</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># vim filebeat-config/07-log-nginx-access-es.yml </span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/access.log</span><br><span class="line">  tags: [<span class="string">"nginx_access"</span>]</span><br><span class="line">  fields:</span><br><span class="line">    log_type: nginx_access</span><br><span class="line">  fields_under_root: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [<span class="string">"http://192.168.174.140:9200"</span>,<span class="string">"http://192.168.174.141:9200"</span>,<span class="string">"http://192.168.174.142:9200"</span>]</span><br><span class="line">  index: <span class="string">"web-nginx-access-%&#123;+yyyy.MM.dd&#125;"</span></span><br><span class="line"><span class="comment"># 禁用索引生命周期管理</span></span><br><span class="line">setup.ilm.enabled: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 设置索引模板的名称</span></span><br><span class="line">setup.template.name: <span class="string">"web"</span></span><br><span class="line"><span class="comment"># 设置索引模板的匹配模式 </span></span><br><span class="line">setup.template.pattern: <span class="string">"web*"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Filebeat实例</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># filebeat -e -c  /root/filebeat-config/07-log-nginx-access-es.yml</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>参数解释：</strong><br>setup.ilm.enabled: false        #  禁用了 Filebeat 的 索引生命周期管理， ILM 是 Elasticsearch 提供的一种功能，用于自动管理索引的生命周期。通过 ILM，管理员可以定义索引的创建、滚动（如每天创建一个新索引）、迁移（如将数据从热节点迁移到冷节点）、归档和删除等操作。<br>setup.template.name: “web”    #  指定了 Filebeat创建的索引模板的名称。索引模板定义了 Elasticsearch 中新创建的索引的默认设置和映射。每当一个新索引与指定的模板模式匹配时，Elasticsearch 会应用该模板中的设置和映射规则。<br>setup.template.pattern: web #  定义索引模板的 匹配模式。  web：表示 Filebeat创建的所有索引名称中，只要符合 web的模式，都会使用名为 web的模板。 是通配符，表示任意字符。</p></blockquote><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300145654.png#id=GlOsK&originHeight=186&originWidth=2311&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><strong>kibana操作和查看</strong><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300145138.png#id=G65HQ&originHeight=1417&originWidth=2488&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300146998.png#id=c4WDn&originHeight=1417&originWidth=2488&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300146229.png#id=XsxCy&originHeight=1417&originWidth=2488&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300146120.png#id=kIljc&originHeight=1417&originWidth=2488&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300147625.png#id=Bux5a&originHeight=1417&originWidth=2488&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300147139.png#id=W7lQm&originHeight=1417&originWidth=2488&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300148550.png#id=gJChe&originHeight=1417&originWidth=2488&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300149819.png#id=kOa4s&originHeight=1417&originWidth=2488&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300149995.png#id=DjuYD&originHeight=1417&originWidth=2488&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><h5 id="2-10-Filebeat输出数据至Elasticsearch集群并自定义多个索引"><a href="#2-10-Filebeat输出数据至Elasticsearch集群并自定义多个索引" class="headerlink" title="2.10 Filebeat输出数据至Elasticsearch集群并自定义多个索引"></a>2.10 Filebeat输出数据至Elasticsearch集群并自定义多个索引</h5><p>官网：<a href="https://www.elastic.co/guide/en/beats/filebeat/7.17/elasticsearch-output.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/7.17/elasticsearch-output.html</a><br><strong>简介</strong>：每个规则都指定用于与该规则匹配的事件的索引。在发布过程中，Filebeat使用数组中的第一个匹配规则。规则可以包含条件、基于字符串的字段格式和名称映射。如果缺少索引设置或没有匹配的规则，则使用索引设置。与索引类似，定义自定义索引将禁用索引生命周期管理（ILM）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 编写Filebeat配置文件</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># vim filebeat-config/08-log-nginx-log-es.yml </span></span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/.<span class="built_in">log</span></span><br><span class="line">  tags: [<span class="string">"nginx_access"</span>]</span><br><span class="line">  fields:</span><br><span class="line">    log_type: nginx_access</span><br><span class="line">  fields_under_root: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/error.log</span><br><span class="line">  tags: [<span class="string">"nginx_error"</span>]</span><br><span class="line">  fields:</span><br><span class="line">    log_type: nginx_error</span><br><span class="line">  fields_under_root: <span class="literal">true</span></span><br><span class="line">  include_lines: [<span class="string">'\[emerg\]'</span>]</span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [<span class="string">"http://192.168.174.140:9200"</span>,<span class="string">"http://192.168.174.141:9200"</span>,<span class="string">"http://192.168.174.142:9200"</span>] </span><br><span class="line">  indices:</span><br><span class="line">    <span class="comment"># 索引名称</span></span><br><span class="line">    - index: <span class="string">"web-nginx-access-%&#123;+yyyy.MM.dd&#125;"</span></span><br><span class="line">      <span class="comment"># 匹配标签</span></span><br><span class="line">      when.contains:</span><br><span class="line">        tags: <span class="string">"nginx_access"</span></span><br><span class="line">    <span class="comment"># 索引名称</span></span><br><span class="line">    - index: <span class="string">"web-nginx-error-%&#123;+yyyy.MM.dd&#125;"</span></span><br><span class="line">      <span class="comment"># 匹配标签</span></span><br><span class="line">      when.contains:</span><br><span class="line">        tags: <span class="string">"nginx_error"</span></span><br><span class="line"><span class="comment"># 禁索引命周期管理</span></span><br><span class="line">setup.ilm.enabled: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 设置索引模板的名称</span></span><br><span class="line">setup.template.name: <span class="string">"web"</span></span><br><span class="line"><span class="comment"># 设置索引模板的匹配模式 </span></span><br><span class="line">setup.template.pattern: <span class="string">"web*"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Filebeat实例</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># filebeat -e -c /root/filebeat-config/08-log-nginx-log-es.yml</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300740915.png#id=JynSZ&originHeight=93&originWidth=2309&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><strong>kibana操作和查看</strong><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300741244.png#id=kqKes&originHeight=1339&originWidth=2558&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300741426.png#id=nzAhr&originHeight=1399&originWidth=2557&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300741233.png#id=mgB03&originHeight=1389&originWidth=2556&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" style="zoom:67%;"><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300743134.png#id=PIKA3&originHeight=1106&originWidth=2552&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405300743612.png#id=vqoCm&originHeight=856&originWidth=2556&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><blockquote><p>注意：日志是以索引的方式写入的！</p></blockquote><h5 id="2-11-Filebeat输出数据至Elasticsearch集群并设定副本分片"><a href="#2-11-Filebeat输出数据至Elasticsearch集群并设定副本分片" class="headerlink" title="2.11 Filebeat输出数据至Elasticsearch集群并设定副本分片"></a>2.11 Filebeat输出数据至Elasticsearch集群并设定副本分片</h5><p>官网：<a href="https://www.elastic.co/guide/en/beats/filebeat/7.17/configuration-template.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/7.17/configuration-template.html</a><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405302048641.png#id=QwD2a&originHeight=846&originWidth=1361&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><strong>简介</strong>：</p><ul><li><code>index.number_of_shards: 3</code>：主分片（primary shard）是将数据分割成较小部分以便分布存储和基础单位。设置主分片数为3意味着每个索引将分成3个主分片。主分片的数量在索引创建后无法更改。</li><li><code>index.number_of_replicas: 1</code>：副本分片（replica shard）是主分片的副本，用于提供高可用性和故障恢复能力。如果主分片所在的节点故障，副本分片可以作为备份继续提供数据服务。设置副本分片数为1意味着每个主分片将有1个副本分片。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编写Filebeat测试文件</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># vim filebeat-config/09-log-nginx-log-shard-es.yml </span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/access.log</span><br><span class="line">  tags: [<span class="string">"nginx_access"</span>]</span><br><span class="line">  fields:</span><br><span class="line">    log_type: nginx_access</span><br><span class="line">  fields_under_root: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/error.log</span><br><span class="line">  tags: [<span class="string">"nginx_error"</span>]</span><br><span class="line">  fields:</span><br><span class="line">    log_type: nginx_error</span><br><span class="line">  fields_under_root: <span class="literal">true</span></span><br><span class="line">  include_lines: [<span class="string">'\[emerg\]'</span>]</span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [<span class="string">"http://192.168.174.140:9200"</span>,<span class="string">"http://192.168.174.141:9200"</span>,<span class="string">"http://192.168.174.142:9200"</span>] </span><br><span class="line">  indices:</span><br><span class="line">    <span class="comment"># 索引名称</span></span><br><span class="line">    - index: <span class="string">"web-nginx-access-%&#123;+yyyy.MM.dd&#125;"</span></span><br><span class="line">      <span class="comment"># 匹配标签</span></span><br><span class="line">      when.contains:</span><br><span class="line">        tags: <span class="string">"nginx_access"</span></span><br><span class="line">    <span class="comment"># 索引名称</span></span><br><span class="line">    - index: <span class="string">"web-nginx-error-%&#123;+yyyy.MM.dd&#125;"</span></span><br><span class="line">      <span class="comment"># 匹配标签</span></span><br><span class="line">      when.contains:</span><br><span class="line">        tags: <span class="string">"nginx_error"</span></span><br><span class="line"><span class="comment"># 禁索引命周期管理</span></span><br><span class="line">setup.ilm.enabled: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 设置索引模板的名称</span></span><br><span class="line">setup.template.name: <span class="string">"web"</span></span><br><span class="line"><span class="comment"># 设置索引模板的匹配模式 </span></span><br><span class="line">setup.template.pattern: <span class="string">"web*"</span></span><br><span class="line"><span class="comment"># 配置索引模板</span></span><br><span class="line">setup.template.settings:</span><br><span class="line">  <span class="comment"># 设置分片数量</span></span><br><span class="line">  index.number_of_shards: 3</span><br><span class="line">  <span class="comment"># 设置副本数量，要求小于集群的数量</span></span><br><span class="line">  index.number_of_replicas: 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Filebeat实例</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># filebeat -e -c /root/filebeat-config/09-log-nginx-error-shard-es.yml</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：三分片一副本，表示每个主分片都会有一个副本分片，分片数量一旦确定，不能修改(缩容/扩容)。会导致数据无法查找。副本分片可以扩容。</strong></p></blockquote></li></ul><p><code>记得把原有的模板给删除掉，否则分片和副本数量无法修改成功</code><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405302104084.png#id=olh8D&originHeight=1530&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405302104604.png#id=VZdWu&originHeight=1530&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><h5 id="2-12-FIlebeat-收集JSON格式的nginx访问日志"><a href="#2-12-FIlebeat-收集JSON格式的nginx访问日志" class="headerlink" title="2.12 FIlebeat 收集JSON格式的nginx访问日志"></a>2.12 FIlebeat 收集JSON格式的nginx访问日志</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># vim /etc/yum.repos.d/nginx.repo</span></span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=<span class="literal">true</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># yum install -y nginx</span></span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># systemctl enable --now nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改nginx访问日志格式</span></span><br><span class="line">[root@elk-01 ~]<span class="comment"># vim /etc/nginx/nginx.conf </span></span><br><span class="line">···</span><br><span class="line">   log_format  test_nginx_json <span class="string">'&#123;"@timestamp":"$time_iso8601",'</span></span><br><span class="line">                                <span class="string">'"host":"$server_addr",'</span></span><br><span class="line">                                <span class="string">'"clientip":"$remote_addr",'</span></span><br><span class="line">                                <span class="string">'"SendBytes":$body_bytes_sent,'</span></span><br><span class="line">                                <span class="string">'"responsetime":$request_time,'</span></span><br><span class="line"> </span><br><span class="line">   <span class="string">'"upstreamtime":"$upstream_response_time",'</span></span><br><span class="line">                                <span class="string">'"upstreamhost":"$upstream_addr",'</span></span><br><span class="line">                                <span class="string">'"http_host":"$host",'</span></span><br><span class="line">                                <span class="string">'"uri":"$uri",'</span></span><br><span class="line">                                <span class="string">'"domain":"$host",'</span></span><br><span class="line">                                <span class="string">'"xff":"$http_x_forwarded_for",'</span></span><br><span class="line">                                <span class="string">'"referer":"$http_referer",'</span></span><br><span class="line">                                <span class="string">'"tcp_xff":"$proxy_protocol_addr",'</span></span><br><span class="line">                                <span class="string">'"http_user_agent":"$http_user_agent",'</span></span><br><span class="line">                                <span class="string">'"status":"$status"&#125;'</span>;</span><br><span class="line">      access_log  /var/<span class="built_in">log</span>/nginx/access.log  test_nginx_json;</span><br><span class="line">···</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查语法格式</span></span><br><span class="line">[root@elk-01 ~]<span class="comment"># nginx -t</span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启nginx</span></span><br><span class="line">[root@elk-01 ~]<span class="comment"># systemctl reload nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># curl localhost</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># cat /var/log/nginx/access.log</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405302119292.png#id=RmNGX&originHeight=137&originWidth=2271&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改Filebeat配置(识别json格式日志，生成相关字段)</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># vim filebeat-config/10-log-nginx-log-shard-json-es.yml </span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/access.log*</span><br><span class="line">  tags: [<span class="string">"access"</span>]</span><br><span class="line"><span class="comment"># 启动json格式  </span></span><br><span class="line">  json.keys_under_root: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [<span class="string">"http://192.168.174.140:9200"</span>,<span class="string">"http://192.168.174.141:9200"</span>,<span class="string">"http://192.168.174.142:9200"</span>]</span><br><span class="line">  index: <span class="string">"web-nginx-access-%&#123;+yyyy.MM.dd&#125;"</span></span><br><span class="line"><span class="comment"># 禁索引命周期管理</span></span><br><span class="line">setup.ilm.enabled: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 设置索引模板的名称</span></span><br><span class="line">setup.template.name: <span class="string">"web"</span></span><br><span class="line"><span class="comment"># 设置索引模板的匹配模式 </span></span><br><span class="line">setup.template.pattern: <span class="string">"web*"</span></span><br><span class="line"><span class="comment"># 覆盖已有的索引模板，如果为true，则会直接覆盖现有的索引模板，如果为false则不覆盖!</span></span><br><span class="line">setup.template.overwrite: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 配置索引模板</span></span><br><span class="line">setup.template.settings:</span><br><span class="line"><span class="comment"># 设置分片数量</span></span><br><span class="line">  index.number_of_shards: 3</span><br><span class="line"><span class="comment"># 设置副本数量，要求⼩于集群的数量</span></span><br><span class="line">  index.number_of_replicas: 1</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除filebeat的指针偏移，用于从第一行重新读取日志文件</span></span><br><span class="line">[root@elk-01 <span class="built_in">log</span>]<span class="comment"># rm -rf /var/lib/filebeat/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清楚以前的ES nginx索引，防止出现脏数据</span></span><br><span class="line">略</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启filebeat</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># filebeat -e -c ~/filebeat-config/10-log-nginx-log-shard-json-es.yml</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405302132161.png#id=FYhqo&originHeight=1530&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><h2 id="七、Logstash-日志收集"><a href="#七、Logstash-日志收集" class="headerlink" title="七、Logstash 日志收集"></a>七、Logstash 日志收集</h2><p>官网：<a href="https://www.elastic.co/guide/en/logstash/7.17/" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/7.17/</a><br>简介：Logstash是一个具有实时流水线功能的开源数据收集引擎。Logstash可以动态地统一来自不同来源的数据，并将数据规范化为您选择的目的地。为各种高级下游分析和可视化用例清理和民主化您的所有数据。<br>虽然Logstash最初推动了日志收集的创新，但其功能远远超出了该用例。任何类型的事件都可以通过广泛的输入、过滤和输出插件进行丰富和转换。</p><h3 id="1、Logstash安装"><a href="#1、Logstash安装" class="headerlink" title="1、Logstash安装"></a>1、Logstash安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># yum install -y logstash-7.17.11-x86_64.rpm </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明软连接</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># ln -s /usr/share/logstash/bin/logstash   /sbin/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Logstash 测试文件目录</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># mkdir logstash-config</span></span><br></pre></td></tr></table></figure><h4 id="2、Logstash-标准输入输出"><a href="#2、Logstash-标准输入输出" class="headerlink" title="2、Logstash 标准输入输出"></a>2、Logstash 标准输入输出</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编写Logstash配置文件</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># cd logstash-config/</span></span><br><span class="line">[root@elk03 logstash-config]<span class="comment"># vim 01_test.conf</span></span><br><span class="line">input &#123;</span><br><span class="line">  stdin &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查配置文件语法</span></span><br><span class="line">[root@elk03 logstash-config]<span class="comment"># logstash  -tf ~/logstash-config/01_test.conf</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405302310091.png#id=WRB0E&originHeight=392&originWidth=2283&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动Logstash</span></span><br><span class="line">[root@elk03 logstash-config]<span class="comment"># logstash  -f ~/logstash-config/01_test.conf</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405302312127.png#id=qkBSN&originHeight=266&originWidth=1027&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><h4 id="3、Logstash基于File的形式进行input"><a href="#3、Logstash基于File的形式进行input" class="headerlink" title="3、Logstash基于File的形式进行input"></a>3、Logstash基于File的形式进行input</h4><p>官网：<a href="https://www.elastic.co/guide/en/logstash/7.17/plugins-inputs-file.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/7.17/plugins-inputs-file.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编写配置文件</span></span><br><span class="line">[root@elk03 logstash-config]<span class="comment"># vim 02-file-input.conf </span></span><br><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">  <span class="comment"># 指定日志文件收集的路径</span></span><br><span class="line">  path =&gt; [<span class="string">"/tmp/*.txt"</span>]</span><br><span class="line">  <span class="comment"># 从日志文件的第一行进行读取，只会在第一次启动时从头读取</span></span><br><span class="line">  start_position =&gt; <span class="string">"beginning"</span> </span><br><span class="line">  <span class="comment"># 从日志文件的尾行读取日志，且偏移指针文件对原日志文件偏移量未记录</span></span><br><span class="line">  <span class="comment"># start_position =&gt; "end" </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备测试日志文件</span></span><br><span class="line">[root@elk01 stduy-logstash-config]<span class="comment"># ech0 1111 &gt; /tmp/1.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Logstash实例</span></span><br><span class="line">[root@elk01 stduy-logstash-config]<span class="comment"># logstash -f /root/stduy-logstash-config/02_input_file.conf</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405302324437.png#id=PA09v&originHeight=887&originWidth=2284&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看偏移量</span></span><br><span class="line">[root@elk03 logstash-config]<span class="comment"># cat /usr/share/logstash/data/plugins/inputs/file/.sincedb_820ddbbd098cfece4b56f4fcbf67a9bb</span></span><br><span class="line">16789540 0 64768 4 1717082577.147625 /tmp/1.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志文件</span></span><br><span class="line">[root@elk03 logstash-config]<span class="comment"># ll -i /tmp/1.txt </span></span><br><span class="line">16789540 -rw-r--r-- 1 root root 4 5月  30 23:20 /tmp/1.txt</span><br></pre></td></tr></table></figure><h4 id="4、Logstash基于Filebeat形式进行input"><a href="#4、Logstash基于Filebeat形式进行input" class="headerlink" title="4、Logstash基于Filebeat形式进行input"></a>4、Logstash基于Filebeat形式进行input</h4><p>Filebeat output Logstash官网：<a href="https://www.elastic.co/guide/en/beats/filebeat/7.17/logstash-output.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/7.17/logstash-output.html</a><br>Logstash input Fliebeat官网：<a href="https://www.elastic.co/guide/en/logstash/7.17/plugins-inputs-beats.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/7.17/plugins-inputs-beats.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改Filebeat配置文件</span></span><br><span class="line">[root@elk01 filebeat-config]<span class="comment"># vim /root/filebeat-config/output-logstash.yml </span></span><br><span class="line"></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /tmp/test.log</span><br><span class="line">  tags: [<span class="string">"test"</span>]</span><br><span class="line">  fields:</span><br><span class="line">    log_type: <span class="built_in">test</span></span><br><span class="line">  fields_under_root: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">output.logstash:</span><br><span class="line">  <span class="comment"># Logstash主机地址</span></span><br><span class="line">  hosts: [<span class="string">"192.168.174.142:5044"</span>]</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Filebeat实例</span></span><br><span class="line">[root@elk01 <span class="built_in">test</span>]<span class="comment"># filebeat -e -c /root/filebeat-conifg/output-logstash.yml</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改Logstash配置文件</span></span><br><span class="line">[root@elk01 stduy-logstash-config]<span class="comment"># vim input-beats.conf </span></span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    <span class="comment"># 通讯端口号，默认5044</span></span><br><span class="line">    port =&gt; 5044</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Logstash</span></span><br><span class="line">[root@elk01 logstash-config]<span class="comment"># logstash -rf /root/logstash-config/input-beats.conf</span></span><br></pre></td></tr></table></figure><h4 id="5、Logstash基于ES形式进行output"><a href="#5、Logstash基于ES形式进行output" class="headerlink" title="5、Logstash基于ES形式进行output"></a>5、Logstash基于ES形式进行output</h4><p>官网：<a href="https://www.elastic.co/guide/en/logstash/7.17/plugins-outputs-elasticsearch.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/7.17/plugins-outputs-elasticsearch.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改Logstash配置文件</span></span><br><span class="line">[root@elk03 logstash-config]<span class="comment"># cat 08_output_es.conf </span></span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    <span class="comment"># 通讯端口号，默认5044</span></span><br><span class="line">    port =&gt; 5044</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    <span class="comment"># ES集群IP</span></span><br><span class="line">    hosts =&gt; [<span class="string">"192.168.174.140:9200"</span>,<span class="string">"192.168.174.141:9200"</span>,<span class="string">"192.168.174.142:9200"</span>] </span><br><span class="line">    <span class="comment"># 索引模式名称</span></span><br><span class="line">    index =&gt; <span class="string">"test-log-%&#123;+yyyy.MM.dd&#125;"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Logstash</span></span><br><span class="line">[root@elk03 logstash-config]<span class="comment"># logstash -f /root/stduy-logstash-config/08_output_es.conf</span></span><br></pre></td></tr></table></figure><h4 id="6、Logstash-grok插件使用"><a href="#6、Logstash-grok插件使用" class="headerlink" title="6、Logstash grok插件使用"></a>6、Logstash grok插件使用</h4><p>官网： <a href="https://www.elastic.co/guide/en/logstash/7.17/plugins-filters-grok.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/7.17/plugins-filters-grok.html</a><br>简介：解析任意文本并对其进行结构化。Grok 是将非结构化日志数据解析为结构化和可查询内容的好方法。该工具非常适合系统日志，apache和其他Web服务器日志，mysql 日志，以及通常为人类编写的任何日志格式。</p><h5 id="6-1-Logstash-内置正则使用"><a href="#6-1-Logstash-内置正则使用" class="headerlink" title="6.1 Logstash 内置正则使用"></a>6.1 Logstash 内置正则使用</h5><p>简介：将非结构化的日志格式通过Grok内置的正则转化为结构化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志格式</span></span><br><span class="line">192.168.174.1 - - [01/Jun/2024:10:37:16 +0800] <span class="string">"GET / HTTP/1.1"</span> 304 0 <span class="string">"-"</span> <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0"</span> <span class="string">"-"</span></span><br><span class="line">192.168.174.1 - - [01/Jun/2024:10:37:16 +0800] <span class="string">"GET / HTTP/1.1"</span> 304 0 <span class="string">"-"</span> <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0"</span> <span class="string">"-"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写Filebeat配置文件</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># vim filebeat-out-logstash.yml</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/access.log</span><br><span class="line">  tags: [<span class="string">"access"</span>]</span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [<span class="string">"192.168.174.142:5044"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除偏移量</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># rm -rf /var/lib/filebeat/*</span></span><br><span class="line"><span class="comment"># 启动Filebeat实例             </span></span><br><span class="line">[root@elk01 ~]<span class="comment"># filebeat  -e -c ~/filebeat-out-logstash.yml </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写Logstash配置文件</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># vim filter_grok.yml </span></span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; &#123;</span><br><span class="line">      <span class="string">"message"</span> =&gt; <span class="string">"%&#123;HTTPD_COMMONLOG&#125;"</span> </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;&#125;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [<span class="string">"192.168.174.140:9200"</span>,<span class="string">"192.168.174.141:9200"</span>,<span class="string">"192.168.174.142:9200"</span>] </span><br><span class="line">    index =&gt; <span class="string">"test-%&#123;+yyyy.MM.dd&#125;"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Logstash</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># logstash  -rf ~/filter_grok.yml</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406011048944.png#id=sObcG&originHeight=510&originWidth=2279&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><h5 id="6-2-Logstash基于内置正则实现日志结构化"><a href="#6-2-Logstash基于内置正则实现日志结构化" class="headerlink" title="6.2 Logstash基于内置正则实现日志结构化"></a>6.2 Logstash基于内置正则实现日志结构化</h5><p>官网： <a href="https://www.elastic.co/guide/en/logstash/7.17/plugins-filters-grok.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/7.17/plugins-filters-grok.html</a><br>Logstash内置变量：<a href="https://github.com/logstash-plugins/logstash-patterns-core/blob/main/patterns/legacy/httpd" target="_blank" rel="noopener">https://github.com/logstash-plugins/logstash-patterns-core/blob/main/patterns/legacy/httpd</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试日志准备</span></span><br><span class="line">55.3.244.1 GET /index.html 15824 0.043</span><br><span class="line">    <span class="comment"># 参数说明</span></span><br><span class="line">        55.3.244.1 <span class="comment"># 客户端IP</span></span><br><span class="line">        GET   <span class="comment"># 请求方式</span></span><br><span class="line">        /index.html<span class="comment"># 请求路径</span></span><br><span class="line">        15824<span class="comment"># 发送字节大小</span></span><br><span class="line">        0.043<span class="comment"># 相应时常</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Logstash 配置文件编写</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># vim stdin_grok_stdout.conf</span></span><br><span class="line">input &#123;</span><br><span class="line">  stdin &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; &#123; <span class="string">"message"</span> =&gt; <span class="string">"%&#123;IP:client_ip&#125; %&#123;WORD:Request_method&#125; %&#123;URIPATHPARAM:request_uri&#125; %&#123;NUMBER:bytes&#125; %&#123;NUMBER:response_time&#125;"</span> &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Logstash实例</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># logstash  -rf ~/stdin_grok_stdout.conf</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406011104673.png#id=pHhH3&originHeight=511&originWidth=1485&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><blockquote><p>提示：<br>    %{IP:client} 变量解释： IP为内置变量，client为字段名称或者叫标识符。可以自行修改,例如：%{IP:req-client}</p></blockquote><h5 id="6-4-Logstash删除指定字段"><a href="#6-4-Logstash删除指定字段" class="headerlink" title="6.4 Logstash删除指定字段"></a>6.4 Logstash删除指定字段</h5><p>简介：如果此筛选器成功，请从此事件中删除任意字段。</p><p><code>未删除字段终端打印如下</code>：<br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406011154600.png#id=TRqxM&originHeight=1276&originWidth=2285&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Filebeat配置文件编写</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># vim filebeat-out-logstash.yml</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/access.log</span><br><span class="line">  tags: [<span class="string">"access"</span>]</span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [<span class="string">"192.168.174.142:5044"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除偏移量</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># rm -rf /var/lib/filebeat/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Filebeat实例</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># filebeat  -e -c ~/filebeat-out-logstash.yml </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Logstash配置文件编写</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># vim filter_grok.yml </span></span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; &#123;</span><br><span class="line">      <span class="string">"message"</span> =&gt; <span class="string">"%&#123;HTTPD_COMMONLOG&#125;"</span></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment"># You can also remove multiple fields at once: </span></span><br><span class="line">   remove_field =&gt; [ <span class="string">"type"</span>,<span class="string">"offset"</span>,<span class="string">"ecs"</span>,<span class="string">"input"</span>,<span class="string">"@version"</span>,<span class="string">"log"</span>,<span class="string">"agent"</span>,<span class="string">"tags"</span> ]</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;&#125;</span><br><span class="line"></span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [<span class="string">"192.168.174.140:9200"</span>,<span class="string">"192.168.174.141:9200"</span>,<span class="string">"192.168.174.142:9200"</span>]</span><br><span class="line">    index =&gt; <span class="string">"test-%&#123;+yyyy.MM.dd&#125;"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Logstash实例</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># logstash -rf ~/filter_grok.yml</span></span><br></pre></td></tr></table></figure><p>删除指定字段后终端数据显示如下：<br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406011210897.png#id=A8WhB&originHeight=751&originWidth=2283&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><h5 id="6-5-Logstash-添加指定字段"><a href="#6-5-Logstash-添加指定字段" class="headerlink" title="6.5 Logstash 添加指定字段"></a>6.5 Logstash 添加指定字段</h5><p>简介：如果此筛选成功，则向此事件添加任意字段。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Filebeat配置文件编写</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># vim filebeat-out-logstash.yml</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/access.log</span><br><span class="line">  tags: [<span class="string">"access"</span>]</span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [<span class="string">"192.168.174.142:5044"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除偏移量</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># rm -rf /var/lib/filebeat/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Filebeat实例</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># filebeat  -e -c ~/filebeat-out-logstash.yml </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Logstash配置文件编写</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># vim filter_grok.yml </span></span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; &#123;</span><br><span class="line">      <span class="string">"message"</span> =&gt; <span class="string">"%&#123;HTTPD_COMMONLOG&#125;"</span></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment"># You can also remove multiple fields at once: </span></span><br><span class="line">   remove_field =&gt; [ <span class="string">"type"</span>,<span class="string">"offset"</span>,<span class="string">"ecs"</span>,<span class="string">"input"</span>,<span class="string">"@version"</span>,<span class="string">"log"</span>,<span class="string">"agent"</span>,<span class="string">"tags"</span> ]</span><br><span class="line">    <span class="comment"># You can also add multiple fields at once:</span></span><br><span class="line">   add_field =&gt; &#123; </span><br><span class="line">     <span class="string">"host-name"</span> =&gt; <span class="string">"%&#123;host&#125;"</span></span><br><span class="line">     <span class="string">"service"</span> =&gt; <span class="string">"ELK stack"</span></span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;&#125;</span><br><span class="line"></span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [<span class="string">"192.168.174.140:9200"</span>,<span class="string">"192.168.174.141:9200"</span>,<span class="string">"192.168.174.142:9200"</span>]</span><br><span class="line">    index =&gt; <span class="string">"test-%&#123;+yyyy.MM.dd&#125;"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Logstash实例</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># logstash -rf ~/filter_grok.yml</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406011249952.png#id=UaKvc&originHeight=812&originWidth=2289&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><h5 id="6-6-Logstash-自定义Tags"><a href="#6-6-Logstash-自定义Tags" class="headerlink" title="6.6 Logstash 自定义Tags"></a>6.6 Logstash 自定义Tags</h5><p>简介：如果此筛选成功，请向事件添加任意标记。 标记可以是动态的，并使用语法包含事件的某些部分。<code>%{field}</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Filebeat配置文件编写</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># vim filebeat-out-logstash.yml</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/access.log</span><br><span class="line">  tags: [<span class="string">"access"</span>]</span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [<span class="string">"192.168.174.142:5044"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除偏移量</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># rm -rf /var/lib/filebeat/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Filebeat实例</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># filebeat  -e -c ~/filebeat-out-logstash.yml </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Logstash配置文件编写</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># vim filter_grok.yml </span></span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; &#123;</span><br><span class="line">      <span class="string">"message"</span> =&gt; <span class="string">"%&#123;HTTPD_COMMONLOG&#125;"</span></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment"># You can also remove multiple fields at once: </span></span><br><span class="line">   remove_field =&gt; [ <span class="string">"type"</span>,<span class="string">"offset"</span>,<span class="string">"ecs"</span>,<span class="string">"input"</span>,<span class="string">"@version"</span>,<span class="string">"log"</span>,<span class="string">"agent"</span>,<span class="string">"tags"</span> ]</span><br><span class="line">    <span class="comment"># You can also add multiple fields at once:</span></span><br><span class="line">   add_field =&gt; &#123; </span><br><span class="line">     <span class="string">"host-name"</span> =&gt; <span class="string">"%&#123;host&#125;"</span></span><br><span class="line">     <span class="string">"service"</span> =&gt; <span class="string">"ELK stack"</span></span><br><span class="line">     &#125;</span><br><span class="line">   <span class="comment"># You can also add multiple tags at once:</span></span><br><span class="line">   add_tag =&gt; [ <span class="string">"Filebeat"</span>, <span class="string">"Logstash"</span>,<span class="string">"Nginx"</span>,<span class="string">"Tomcat"</span>,<span class="string">"Kibana"</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;&#125;</span><br><span class="line"></span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [<span class="string">"192.168.174.140:9200"</span>,<span class="string">"192.168.174.141:9200"</span>,<span class="string">"192.168.174.142:9200"</span>]</span><br><span class="line">    index =&gt; <span class="string">"test-%&#123;+yyyy.MM.dd&#125;"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Logstash实例</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># logstash -rf ~/filter_grok.yml</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406011255129.png#id=mVQ7M&originHeight=1125&originWidth=2286&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><h4 id="7、Logstash-geoip插件分析用户IP所属地"><a href="#7、Logstash-geoip插件分析用户IP所属地" class="headerlink" title="7、Logstash geoip插件分析用户IP所属地"></a>7、Logstash geoip插件分析用户IP所属地</h4><p>官方：<a href="https://www.elastic.co/guide/en/logstash/7.17/plugins-filters-geoip.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/7.17/plugins-filters-geoip.html</a><br>简介：GeoIP 过滤器添加有关 IP 地址地理位置的信息， 基于 MaxMind GeoLite2 数据库的数据。 MaxMind GeoLite2 数据库：开源IP地址定位数据库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Filebeat配置文件编写</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># vim filebeat-out-logstash.yml</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/access.log</span><br><span class="line">  tags: [<span class="string">"access"</span>]</span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [<span class="string">"192.168.174.142:5044"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除偏移量</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># rm -rf /var/lib/filebeat/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Filebeat实例</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># filebeat  -e -c ~/filebeat-out-logstash.yml </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Logstash配置文件编写</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># vim filter_grok.yml </span></span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; &#123;</span><br><span class="line">      <span class="string">"message"</span> =&gt; <span class="string">"%&#123;HTTPD_COMMONLOG&#125;"</span></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment"># You can also remove multiple fields at once: </span></span><br><span class="line">   remove_field =&gt; [ <span class="string">"type"</span>,<span class="string">"offset"</span>,<span class="string">"ecs"</span>,<span class="string">"input"</span>,<span class="string">"@version"</span>,<span class="string">"log"</span>,<span class="string">"agent"</span>,<span class="string">"tags"</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 指定geoip插件</span></span><br><span class="line">  geoip &#123;</span><br><span class="line">      <span class="comment"># 配置客户端IP字段名称</span></span><br><span class="line">      <span class="built_in">source</span> =&gt; <span class="string">"clientip"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;&#125;</span><br><span class="line"></span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [<span class="string">"192.168.174.140:9200"</span>,<span class="string">"192.168.174.141:9200"</span>,<span class="string">"192.168.174.142:9200"</span>]</span><br><span class="line">    index =&gt; <span class="string">"test-%&#123;+yyyy.MM.dd&#125;"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Logstash实例</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># logstash -rf ~/filter_grok.yml</span></span><br></pre></td></tr></table></figure><h4 id="8、Logstash-useragent插件分析用户客户端类型"><a href="#8、Logstash-useragent插件分析用户客户端类型" class="headerlink" title="8、Logstash useragent插件分析用户客户端类型"></a>8、Logstash useragent插件分析用户客户端类型</h4><p>​    官网：<a href="https://www.elastic.co/guide/en/logstash/7.17/plugins-filters-useragent.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/7.17/plugins-filters-useragent.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Filebeat配置文件编写</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># vim filebeat-out-logstash.yml</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/access.log</span><br><span class="line">  tags: [<span class="string">"access"</span>]</span><br><span class="line">  json.keys_under_root: <span class="literal">true</span>  </span><br><span class="line"></span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [<span class="string">"192.168.174.142:5044"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除偏移量</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># rm -rf /var/lib/filebeat/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Filebeat实例</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># filebeat  -e -c ~/filebeat-out-logstash.yml </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Logstash配置文件编写</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># vim filter_grok.yml </span></span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  grok &#123; </span><br><span class="line">   remove_field =&gt; [ <span class="string">"type"</span>,<span class="string">"offset"</span>,<span class="string">"ecs"</span>,<span class="string">"input"</span>,<span class="string">"@version"</span>,<span class="string">"log"</span>,<span class="string">"agent"</span>,<span class="string">"tags"</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 指定geoip插件</span></span><br><span class="line">  geoip &#123;</span><br><span class="line">      <span class="comment"># 配置客户端IP字段名称</span></span><br><span class="line">      <span class="built_in">source</span> =&gt; <span class="string">"clientip"</span></span><br><span class="line">  &#125;</span><br><span class="line">  useragent &#123;</span><br><span class="line">    <span class="built_in">source</span> =&gt; <span class="string">"http_user_agent"</span></span><br><span class="line">    target =&gt; <span class="string">"test_user_agent"</span></span><br><span class="line">    remove_field =&gt; [ <span class="string">"agent"</span>,<span class="string">"@version"</span>,<span class="string">"tags"</span>,<span class="string">"ecs"</span>,<span class="string">"log"</span>,<span class="string">"offset"</span>,<span class="string">"type"</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;&#125;</span><br><span class="line"></span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [<span class="string">"192.168.174.140:9200"</span>,<span class="string">"192.168.174.141:9200"</span>,<span class="string">"192.168.174.142:9200"</span>]</span><br><span class="line">    index =&gt; <span class="string">"test-%&#123;+yyyy.MM.dd&#125;"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Logstash实例</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># logstash -rf ~/filter_grok.yml</span></span><br></pre></td></tr></table></figure><h4 id="9、Logstash-Filter多if分支"><a href="#9、Logstash-Filter多if分支" class="headerlink" title="9、Logstash Filter多if分支"></a>9、Logstash Filter多if分支</h4><p>官网：<a href="https://www.elastic.co/guide/en/logstash/7.17/event-dependent-configuration.html#metadata" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/7.17/event-dependent-configuration.html#metadata</a><br>简介： 针对不同的日志类型。filter去做不同的处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Filebeat配置文件</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># vim  filebeat-out-logstash.yml </span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/access.log</span><br><span class="line">  fields:</span><br><span class="line">    log_type: nginx_access</span><br><span class="line">  fields_under_root: <span class="literal">true</span></span><br><span class="line">  json.keys_under_root: <span class="literal">true</span>   </span><br><span class="line"></span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/error.log</span><br><span class="line">  fields:</span><br><span class="line">    log_type: nginx_error</span><br><span class="line">  fields_under_root: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/messages</span><br><span class="line">  fields:</span><br><span class="line">    log_type: system_log</span><br><span class="line">  fields_under_root: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [<span class="string">"192.168.174.142:5044"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除偏移量</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># rm -rf /var/lib/filebeat/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Filebeat实例</span></span><br><span class="line">[root@elk01 ~]<span class="comment"># filebeat  -e -c ~/filebeat-out-logstash.yml </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Logstash 配置文件准备</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># vim filter_grok.yml </span></span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    add_field =&gt; &#123;</span><br><span class="line">      <span class="string">"name"</span> =&gt; <span class="string">"ELK stack"</span> </span><br><span class="line">    &#125;</span><br><span class="line">    remove_field =&gt; [<span class="string">"agent"</span>,<span class="string">"ephemeral_id"</span>,<span class="string">"ecs"</span>,<span class="string">"@version"</span>,<span class="string">"tags"</span>,<span class="string">"input"</span>,<span class="string">"log"</span>,<span class="string">"offest"</span>]  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> [log_type] == <span class="string">"nginx_access"</span> &#123;</span><br><span class="line">     geoip &#123;</span><br><span class="line">       <span class="built_in">source</span> =&gt; <span class="string">"clientip"</span></span><br><span class="line">     &#125;</span><br><span class="line">     useragent &#123;</span><br><span class="line">       <span class="built_in">source</span> =&gt; <span class="string">"http_user_agent"</span> </span><br><span class="line">       target =&gt; <span class="string">"study_user_agent"</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [log_type] == <span class="string">"nginx_access"</span> &#123;  </span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">      hosts =&gt; [<span class="string">"192.168.174.140:9200"</span>,<span class="string">"192.168.174.141:9200"</span>,<span class="string">"192.168.174.142:9200"</span>] </span><br><span class="line">      index =&gt; <span class="string">"web-access-%&#123;+yyyy.MM.dd&#125;"</span></span><br><span class="line">    &#125; </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> [log_type] == <span class="string">"nginx_error"</span> &#123;</span><br><span class="line">        elasticsearch &#123;</span><br><span class="line">          hosts =&gt; [<span class="string">"192.168.174.140:9200"</span>,<span class="string">"192.168.174.141:9200"</span>,<span class="string">"192.168.174.142:9200"</span>]</span><br><span class="line">          index =&gt; <span class="string">"web-error-%&#123;+yyyy.MM.dd&#125;"</span>   </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  <span class="keyword">else</span> <span class="keyword">if</span> [log_type] == <span class="string">"system_log"</span> &#123;</span><br><span class="line">       elasticsearch &#123;</span><br><span class="line">         hosts =&gt; [<span class="string">"192.168.174.140:9200"</span>,<span class="string">"192.168.174.141:9200"</span>,<span class="string">"192.168.174.142:9200"</span>]</span><br><span class="line">         index =&gt; <span class="string">"system-log-%&#123;+yyyy.MM.dd&#125;"</span>     </span><br><span class="line">    &#125; </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Logstash</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># logstash  -rf ~/filter_grok.yml</span></span><br></pre></td></tr></table></figure><h2 id="八、Kibana操作使用"><a href="#八、Kibana操作使用" class="headerlink" title="八、Kibana操作使用"></a>八、Kibana操作使用</h2><h3 id="1、kibana手动创建索引模板"><a href="#1、kibana手动创建索引模板" class="headerlink" title="1、kibana手动创建索引模板"></a>1、kibana手动创建索引模板</h3><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405310044720.png#id=TjLJ0&originHeight=1260&originWidth=2507&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405310044170.png#id=Ty1KL&originHeight=1037&originWidth=2100&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405310045784.png#id=PjKWz&originHeight=1244&originWidth=1917&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405310047016.png#id=a7ORh&originHeight=1252&originWidth=2011&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"number_of_replicas"</span>:1,</span><br><span class="line"><span class="string">"number_of_shards"</span>:3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405310049148.png#id=CosFV&originHeight=1000&originWidth=2096&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><h2 id="九、kafka简介和使用"><a href="#九、kafka简介和使用" class="headerlink" title="九、kafka简介和使用"></a>九、kafka简介和使用</h2><h3 id="1、MQ两种模式"><a href="#1、MQ两种模式" class="headerlink" title="1、MQ两种模式"></a>1、MQ两种模式</h3><h4 id="1-1-P2P模式"><a href="#1-1-P2P模式" class="headerlink" title="1.1 P2P模式"></a>1.1 P2P模式</h4><h5 id="1-1-1-架构图"><a href="#1-1-1-架构图" class="headerlink" title="1.1.1 架构图"></a>1.1.1 架构图</h5><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406020000698.png" alt></p><h5 id="1-1-2-简介"><a href="#1-1-2-简介" class="headerlink" title="1.1.2 简介"></a>1.1.2 简介</h5><p>​    在消息队列（MQ）系统中，==点对点模式==（Point-to-Point Model）是最基本的消息通信模式之一。在这种模式下，消息生产者发送消息到一个队列（Queue），而消息消费者从这个队列中接收和处理消息。每条消息只能被一个消费者消费一次，这与发布/订阅模式（Pub/Sub Model）中的多播机制不同。</p><h5 id="1-1-3-工作流程"><a href="#1-1-3-工作流程" class="headerlink" title="1.1.3 工作流程"></a>1.1.3 工作流程</h5><ol><li><strong>生产者发送消息</strong>：生产者创建一条消息，并将其发送到指定的<strong>队列</strong>（Queue）。</li><li><strong>队列暂存消息</strong>：队列接收到消息并<strong>存储</strong>，等待消费者来接收。</li><li><strong>消费者接收消息</strong>：消费者从<strong>队列</strong>中<strong>检索</strong>消息进行处理。如果有多个消费者，每条消息只会被其中一个消费者接收。</li><li><strong>消息确认</strong>：消费者处理完消息后，向队列发送确认，表示消息已经成功处理。MQ<strong>删除消费数据</strong>。<strong>如果消费者没有确认消息，消息可能会被重新投递到队列中供其他消费者处理。</strong></li></ol><h4 id="1-2-发布-订阅模式"><a href="#1-2-发布-订阅模式" class="headerlink" title="1.2 发布/订阅模式"></a>1.2 发布/订阅模式</h4><h5 id="1-2-1-架构图"><a href="#1-2-1-架构图" class="headerlink" title="1.2.1 架构图"></a>1.2.1 架构图</h5><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406020008444.png#id=wvuow&originHeight=609&originWidth=1648&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><h5 id="1-2-2-简介"><a href="#1-2-2-简介" class="headerlink" title="1.2.2 简介"></a>1.2.2 简介</h5><p>​    在消息队列（MQ）系统中，发布-订阅模式（Publish-Subscribe Model，简称Pub/Sub）是一种常见的消息通信模式。在这种模式下，消息生产者（发布者）将消息发布到一个主题（Topic），而消息消费者（订阅者）则订阅该主题，从而接收发布者发布的消息。与点对点模式不同，发布到主题的<strong>每条消息可以被多个订阅者接收和处理</strong>。</p><h5 id="1-2-3-工作流程"><a href="#1-2-3-工作流程" class="headerlink" title="1.2.3 工作流程"></a>1.2.3 工作流程</h5><ol><li><strong>发布者发布消息</strong>：发布者创建一条消息，并将其发布到指定的主题。</li><li><strong>主题广播消息</strong>：主题接收到消息，并将其广播给所有订阅了该主题的订阅者。</li><li><strong>订阅者接收消息</strong>：订阅者接收或者拉取主题广播的消息并进行处理。</li></ol><ul><li><strong>Pull方式</strong><ul><li><strong>优点</strong>：消费者根据自身消费数据的能力去队列中拉取数据。</li><li><strong>缺点</strong>：消费者需要长期打开一个进程来监视队列是否有数据产生。</li></ul></li><li><strong>Push方式</strong><ul><li><strong>优点</strong>：消息队列主动推送数据，例如：<strong>公众号话题推送，APP更新推送</strong>。</li><li><strong>缺点</strong>：消息队列自身需要维护一张订阅者名单。<strong>当订阅者过多时，特别消耗资源。</strong></li></ul></li></ul><h3 id="2、kafka相关概念"><a href="#2、kafka相关概念" class="headerlink" title="2、kafka相关概念"></a>2、kafka相关概念</h3><p>​    <strong>官网</strong>：<a href="https://kafka.apache.org/" target="_blank" rel="noopener">https://kafka.apache.org/</a></p><h4 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h4><p>​    ==Apache Kafka==是一个开源的<strong>分布式</strong>事件流平台，由数以千计的公司提供高性能数据管道、流分析、 数据集成和任务关键型应用程序。</p><ul><li><p><strong>高吞吐量</strong>：使用延迟低至2ms的机器集群以网络有限的吞吐量传递消息。</p></li><li><p><strong>可伸缩</strong>：将生产集群扩展到1000个代理、每天数万亿条消息、PB的数据和数十万个分区。弹性扩展和收缩存储和处理。</p></li><li><p><strong>永久存储器</strong>：将数据流安全地存储在分布式、持久、容错的集群中。</p></li><li><p><strong>高可用性</strong>：在可用性区域上高效地扩展集群，或者跨地理区域连接单独的集群。</p><h4 id="2-2-Kafka相关专业术语"><a href="#2-2-Kafka相关专业术语" class="headerlink" title="2.2 Kafka相关专业术语"></a>2.2 Kafka相关专业术语</h4></li><li><p><strong>主题（Topic）</strong>：主题是Kafka中用于对消息进行分类的逻辑分组，每个主题可以看作是消息的分类器。主题是多订阅者模式，即一个主题可以有多个消费者订阅。</p></li><li><p><strong>分区（Partition）</strong>：每个主题被分成一个或多个分区。分区是消息存储的基本单元。分区内的消息是有序的，但不同分区之间无序。每个分区可以分布在不同的Kafka服务器上，从而实现水平扩展。</p><ul><li><strong>leader partition</strong> 负责对kafka集群的读写操作，和客户端进行交互</li><li><strong>follower partition</strong> 负责去leader partition 同步数据，不可以和客户端进行交互</li></ul></li><li><p><strong>偏移量（Offset）</strong>：偏移量是分区中每条消息的唯一标识符。它是一个递增的整数，记录了消息在分区中的位置。消费者使用偏移量来跟踪读取消息的位置。</p></li><li><p><strong>生产者（Producer）</strong>：生产者是负责向Kafka主题发布消息的客户端应用程序。生产者将消息发送到指定的主题和分区。</p></li><li><p><strong>消费者（Consumer）</strong>：消费者是负责从Kafka主题读取消息的客户端应用程序。消费者通过订阅一个或多个主题来读取消息，并使用偏移量来跟踪读取进度。</p></li><li><p><strong>消费者组（Consumer Group）</strong>：消费者组是一组消费者实例，共同消费一个或多个主题的消息。</p></li><li><p><strong>代理（Broker）</strong>：代理是Kafka集群中的一个服务器节点，负责存储和传输消息数据。一个Kafka集群由多个代理组成，每个代理可以处理多个分区。</p></li><li><p><strong>复制（Replication）</strong>：Kafka中的复制机制将分区数据复制到多个代理上，以确保数据的高可用性和容错性。每个分区有一个领导副本（Leader）和若干个跟随副本（Follower）。所有的读写操作都由领导副本处理，跟随副本只需同步领导副本的数据。但是Leader和Follwer都属于副本。创建时不能副本数不能为0。</p></li></ul><h3 id="3、Zookeeper使用和配置"><a href="#3、Zookeeper使用和配置" class="headerlink" title="3、Zookeeper使用和配置"></a>3、Zookeeper使用和配置</h3><p>官网链接：<a href="https://dlcdn.apache.org/zookeeper/" target="_blank" rel="noopener">https://dlcdn.apache.org/zookeeper/</a></p><p>下载链接：<a href="https://dlcdn.apache.org/zookeeper/zookeeper-3.8.4/apache-zookeeper-3.8.4-bin.tar.gz" target="_blank" rel="noopener">https://dlcdn.apache.org/zookeeper/zookeeper-3.8.4/apache-zookeeper-3.8.4-bin.tar.gz</a></p><h4 id="3-1-简介："><a href="#3-1-简介：" class="headerlink" title="3.1 简介："></a>3.1 简介：</h4><p>​    Zookeeper 是 Apache 旗下的一个开源<strong>分布式协调服务</strong>，用于管理和协调分布式应用程序中的各种服务和组件。它提供了一系列高效且可靠的分布式数据一致性和协调机制。</p><h4 id="3-2-zookeeper集群部署：三节点😀"><a href="#3-2-zookeeper集群部署：三节点😀" class="headerlink" title="3.2 zookeeper集群部署：三节点😀"></a>3.2 zookeeper集群部署：<code>三节点</code>😀</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 解压安装包到指定目录</span></span><br><span class="line">$ tar xf apache-zookeeper-3.8.2-bin.tar.gz  -C /opt/ &amp;&amp; <span class="built_in">cd</span> /opt/</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 更改目录名称</span></span><br><span class="line">$ mv apache-zookeeper-3.8.2-bin/   zookeeper</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 配置zk环境变量</span></span><br><span class="line">$ cat &gt;&gt; /etc/profile.d/zookeeper.sh &lt;&lt;-EOF</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> ZK_HOME=/opt/zookeeper</span><br><span class="line"><span class="built_in">export</span> PATH=\<span class="variable">$PATH</span>:\<span class="variable">$ZK_HOME</span>/bin</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 重新加载环境变量 </span></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile.d/zookeeper.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建zk数据存放目录</span></span><br><span class="line">$ mkdir -p /opt/data/zk</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 修改zk的配置文件(三节点)</span></span><br><span class="line">$ cp /opt/zookeeper/conf/zoo_sample.cfg  /opt/zookeeper/conf/zoo.cfg</span><br><span class="line"></span><br><span class="line">$ egrep -v <span class="string">"^(#|$)"</span> /opt/zookeeper/conf/zoo.cfg </span><br><span class="line"><span class="comment"># Zookeeper的心跳间隔时间。服务器和客户端会通过心跳包维持连接状态。</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="comment"># 从节点最多可以等待10 个tickTime（即 10 * 2000 毫秒 = 20 秒）来与领导者同步数据状态。否则它将被认为是不可用的。</span></span><br><span class="line">initLimit=10</span><br><span class="line"><span class="comment"># 定义Zookeeper领导者和从节点之间的心跳和同步请求的最大允许延迟时间。领导者与从节点之间的响应时间如果超过了这个限制，从节点将被认为失去同步状态。（即 5 * 2000 毫秒 = 10 秒）。</span></span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="comment"># 定义zk数据目录</span></span><br><span class="line">dataDir=/opt/data/zk</span><br><span class="line"><span class="comment"># 定义Zookeeper集群的客户端连接端口</span></span><br><span class="line">clientPort=2181</span><br><span class="line">server.140=192.168.174.140:2888:3888</span><br><span class="line">server.141=192.168.174.141:2888:3888</span><br><span class="line">server.142=192.168.174.142:2888:3888</span><br><span class="line">    <span class="comment"># 参数解释：</span></span><br><span class="line">            <span class="comment"># dataDirzk数据目录</span></span><br><span class="line">            <span class="comment"># clientPort端口号</span></span><br><span class="line">            <span class="comment"># server.140zk节点唯一标识</span></span><br><span class="line">            <span class="comment"># 192.168.100.160zk节点主机地址</span></span><br><span class="line">            <span class="comment"># 2888集群内部通讯端口</span></span><br><span class="line">            <span class="comment"># 3888leader选举端口</span></span><br><span class="line">            </span><br><span class="line"><span class="comment"># 创建ID文件(位置存放在zk的数据存放路径下)</span></span><br><span class="line">        101节点</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"140"</span> &gt; /opt/data/zk/myid</span><br><span class="line">        102节点</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"141"</span> &gt; /opt/data/zk/myid</span><br><span class="line">        103节点</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"142"</span> &gt; /opt/data/zk/myid</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 所有节点启动zk</span></span><br><span class="line">$ zkServer.sh start</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看zk状态</span></span><br><span class="line">$ zkServer.sh status</span><br></pre></td></tr></table></figure><p><strong>myid文件</strong>：在Zookeeper集群中，<strong>myid</strong>文件是每个Zookeeper服务器节点的重要配置文件之一，用于唯一标识集群中的每个服务器。</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406020109804.png" alt></p><h4 id="3-3-Zookeeper角色划分"><a href="#3-3-Zookeeper角色划分" class="headerlink" title="3.3 Zookeeper角色划分"></a>3.3 Zookeeper角色划分</h4><p>在Zookeeper集群中，不同的服务器节点可以承担不同的角色，以确保集群的高可用性、数据一致性和故障恢复能力。主要角色包括：==<strong>server.140=192.168.174.140:2888:3888:角色</strong>==</p><ol><li><p><strong>领导者（Leader）</strong></p><ul><li><p>处理所有写操作（如创建、更新、删除节点）并确保数据的一致性。</p></li><li><p>管理并协调集群中其他节点的活动。</p></li><li><p>负责为客户端请求生成唯一的事务ID（zxid）。</p></li><li><p>在集群启动或领导者失效时，会进行领导者选举，选出新的领导者。</p></li><li><p>定期发送心跳给跟随者，确保自己处于活动状态。</p></li></ul></li><li><p><strong>跟随者（Follower）</strong></p><ul><li>处理所有读取操作（如读取节点数据）。</li><li>接收并转发客户端的写请求给领导者进行处理。</li><li>将领导者的事务日志同步到本地，确保数据一致性。</li><li>参与领导者选举。</li><li>与领导者保持同步，接收并应用领导者的事务。</li></ul></li><li><p><strong>观察者（Observer）</strong></p><ul><li>处理读取操作，减轻领导者和跟随者的负担。</li><li>不参与领导者选举和事务投票，只同步领导者的事务日志。</li><li>提高集群的读取扩展能力，适合需要高读取吞吐量的场景。</li></ul></li><li><p><strong>客户端（Client）</strong></p><ul><li>连接到集群中的任一节点进行读取或写入操作。</li><li>自动处理节点故障并重新连接到其他可用节点。</li><li>通过客户端API与Zookeeper集群进行交互。<h4 id="3-4-zookeeper配置内存堆栈"><a href="#3-4-zookeeper配置内存堆栈" class="headerlink" title="3.4 zookeeper配置内存堆栈"></a>3.4 zookeeper配置内存堆栈</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 查看zk进程</span></span><br><span class="line">$ jps</span><br><span class="line">1367 Elasticsearch</span><br><span class="line">5400 QuorumPeerMain</span><br><span class="line">5593 Jps</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看zk的堆栈大小</span></span><br><span class="line">$ jmap -heap 5400</span><br></pre></td></tr></table></figure><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406020135738.png" alt></li></ul></li></ol><p><strong>zookeeper默认堆内存大小为1GB，一般设置为2GB或者4GB</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 调节zookeeper推内存大小为256MB</span></span><br><span class="line">$ vim /opt/zookeeper/conf/java.env</span><br><span class="line"><span class="meta">#! /bin/bash </span></span><br><span class="line"> <span class="comment"># 指定JDK安装路径 </span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java </span><br><span class="line"> <span class="comment"># 指定zookeeper的堆内存大小 </span></span><br><span class="line"><span class="built_in">export</span> JVMFLAGS=<span class="string">"-Xms256m -Xmx256m <span class="variable">$JVMFLAGS</span>"</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 同步文件</span></span><br><span class="line">$ scp /opt/zookeeper/conf/java.env  elk02:/opt/zookeeper/conf/</span><br><span class="line">$ scp /opt/zookeeper/conf/java.env  elk03:/opt/zookeeper/conf/</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 所有节点重启zk</span></span><br><span class="line">$ zkServer.sh restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 验证堆内存</span></span><br><span class="line">$ jmap -heap `jps | grep QuorumPeerMain | awk <span class="string">'&#123;print $1&#125;'</span>`</span><br></pre></td></tr></table></figure><h3 id="4、kafka集群安装：三节点😀"><a href="#4、kafka集群安装：三节点😀" class="headerlink" title="4、kafka集群安装：三节点😀"></a>4、kafka集群安装：<code>三节点</code>😀</h3><p>​    下载链接：<a href="https://kafka.apache.org/downloads" target="_blank" rel="noopener">https://kafka.apache.org/downloads</a><br>​    官网：<a href="https://kafka.apache.org/" target="_blank" rel="noopener">https://kafka.apache.org/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 解压安装包到指定目录</span></span><br><span class="line">$ tar xf kafka_2.13-3.2.1.tgz  -C /opt/ &amp;&amp;  <span class="built_in">cd</span> /opt/</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 修改目录名称</span></span><br><span class="line">$ mv kafka_2.13-3.2.1/  kafka</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 配置kafka环境变量</span></span><br><span class="line">$ cat &gt;&gt; /etc/profile.d/kafka.sh &lt;&lt;-EOF</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> KAFKA_HOME=/opt/kafka</span><br><span class="line"><span class="built_in">export</span> PATH=\<span class="variable">$PATH</span>:\<span class="variable">$KAFKA_HOME</span>/bin</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 重新加载环境变量</span></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile.d/kafka.sh </span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 创建数据目录</span></span><br><span class="line">$ mkdir /opt/data/kafka -p</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 修改kafka配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.kafka101节点配置文件</span></span><br><span class="line">$ egrep -v <span class="string">"^(#|$)"</span> kafka/config/server.properties</span><br><span class="line">broker.id=140</span><br><span class="line">log.dirs=/opt/data/kafka/</span><br><span class="line">zookeeper.connect=192.168.174.140:2181,192.168.174.141:2181,192.168.174.142:2181/kafka</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.kafka102节点配置文件</span></span><br><span class="line">$ egrep -v <span class="string">"^(#|$)"</span> kafka/config/server.properties  </span><br><span class="line">broker.id=141</span><br><span class="line">log.dirs=/opt/data/kafka/</span><br><span class="line">zookeeper.connect=192.168.174.140:2181,192.168.174.141:2181,192.168.174.142:2181/kafka<span class="comment"># /kafka为zk中的znode</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 3.kafka103节点配置文件</span></span><br><span class="line">$ egrep -v <span class="string">"^(#|$)"</span> kafka/config/server.properties  </span><br><span class="line">broker.id=142</span><br><span class="line">log.dirs=/opt/data/kafka/</span><br><span class="line">zookeeper.connect=192.168.174.140:2181,192.168.174.141:2181,192.168.174.142:2181/kafka</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 所有节点启动kafka</span></span><br><span class="line">$ kafka-server-start.sh -daemon /opt/kafka/config/server.properties </span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; zk节点查看kafka注册信息</span></span><br><span class="line">$ zkCli.sh ls /kafka/brokers/ids | grep  <span class="string">"^\["</span></span><br><span class="line">[140, 141, 142]</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; kafka停止脚本</span></span><br><span class="line">$ kafka-server-stop.sh</span><br></pre></td></tr></table></figure><h3 id="5、Kafka-Topic日常操作"><a href="#5、Kafka-Topic日常操作" class="headerlink" title="5、Kafka Topic日常操作"></a>5、Kafka Topic日常操作</h3><h4 id="5-1-查看Topic相关信息"><a href="#5-1-查看Topic相关信息" class="headerlink" title="5.1 查看Topic相关信息"></a>5.1 查看Topic相关信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 查看集群中所有Topic</span></span><br><span class="line">$ kafka-topics.sh   --bootstrap-server  192.168.174.140:9092,192.168.174.141:9092,192.168.174.142:9092  --list</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看所有Topic详细信息</span></span><br><span class="line">$ kafka-topics.sh   --bootstrap-server  192.168.174.140:9092,192.168.174.141:9092,192.168.174.142:9092  --describe</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看某个Topic信息</span></span><br><span class="line">$ kafka-topics.sh   --bootstrap-server  192.168.174.140:9092,192.168.174.141:9092,192.168.174.142:9092  --describe  --topic  Topice名称</span><br></pre></td></tr></table></figure><h4 id="5-2-创建Topic"><a href="#5-2-创建Topic" class="headerlink" title="5.2 创建Topic"></a>5.2 创建Topic</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 创建test-elk Topic</span></span><br><span class="line">$ kafka-topics.sh   --bootstrap-server  192.168.174.140:9092 --create --topic <span class="built_in">test</span>-elk</span><br><span class="line">Created topic <span class="built_in">test</span>-elk.</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 创建Topic，并指定副本数量</span></span><br><span class="line">$ kafka-topics.sh   --bootstrap-server  192.168.174.140:9092 --create --topic <span class="built_in">test</span>-elk-02  --partitions 10 --replication-factor 1</span><br><span class="line">Created topic <span class="built_in">test</span>-elk.</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看Topic的详细信息</span></span><br><span class="line">$ kafka-topics.sh   --bootstrap-server  192.168.174.140:9092  --describe --topic <span class="built_in">test</span>-elk-02</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406020407871.png#id=PAr2v&originHeight=504&originWidth=2263&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 创建Topic，并指定副本数量</span></span><br><span class="line">$ kafka-topics.sh   --bootstrap-server  192.168.174.140:9092 --create --topic <span class="built_in">test</span>-elk-03  --partitions 10 --replication-factor 2</span><br><span class="line"></span><br><span class="line">$ kafka-topics.sh   --bootstrap-server  192.168.174.140:9092  --describe --topic <span class="built_in">test</span>-elk-03</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202406020410226.png#id=xl6sS&originHeight=504&originWidth=2282&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none" alt="     "></p><p><strong>注意：副本数量不能大于Broker的数量</strong></p><h3 id="6、Filebeat收集日志至Kafka"><a href="#6、Filebeat收集日志至Kafka" class="headerlink" title="6、Filebeat收集日志至Kafka"></a>6、Filebeat收集日志至Kafka</h3><p>官网：<a href="https://www.elastic.co/guide/en/beats/filebeat/7.17/kafka-output.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/7.17/kafka-output.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@elk01 ~]<span class="comment"># cat filbeat-out-kafka.yml </span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /var/<span class="built_in">log</span>/nginx/access.log</span><br><span class="line">  fields:</span><br><span class="line">    log_type: nginx_access</span><br><span class="line">  fields_under_root: <span class="literal">true</span></span><br><span class="line">  json.keys_under_root: <span class="literal">true</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">#- type: log</span></span><br><span class="line"><span class="comment">#  paths:</span></span><br><span class="line"><span class="comment">#    - /var/log/nginx/error.log</span></span><br><span class="line"><span class="comment">#  fields:</span></span><br><span class="line"><span class="comment">#    log_type: nginx_error</span></span><br><span class="line"><span class="comment">#  fields_under_root: true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output.kafka:</span><br><span class="line">  <span class="comment"># initial brokers for reading cluster metadata</span></span><br><span class="line">  hosts: [<span class="string">"192.168.174.140:9092"</span>, <span class="string">"192.168.174.141:9092"</span>, <span class="string">"192.168.174.142:9092"</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># message topic selection + partitioning</span></span><br><span class="line">  topic: <span class="string">"test-kafka-topic"</span></span><br><span class="line"></span><br><span class="line">[root@elk01 ~]<span class="comment"># filebeat  -e -c ~/filbeat-out-kafka.yml </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kafka测试拉取数据</span></span><br><span class="line">[root@elk03 opt]<span class="comment"># kafka-console-consumer.sh   --topic test-kafka-topic  --bootstrap-server 192.168.174.140:9092,192.168.174.141:9092,192.168.174.142:9092  --from-beginning</span></span><br></pre></td></tr></table></figure><h3 id="7、Logstash收集Kafka-Topic日志"><a href="#7、Logstash收集Kafka-Topic日志" class="headerlink" title="7、Logstash收集Kafka Topic日志"></a>7、Logstash收集Kafka Topic日志</h3><p>官网：<a href="https://www.elastic.co/guide/en/logstash/7.17/plugins-inputs-kafka.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/7.17/plugins-inputs-kafka.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  kafka &#123;</span><br><span class="line">    bootstrap_servers =&gt; <span class="string">"192.168.174.140:9092,192.168.174.141:9092,192.168.174.142:9092"</span>  <span class="comment"># Kafka集群IP</span></span><br><span class="line">    topics =&gt; [<span class="string">"test-kafka-topic"</span>]     <span class="comment"># 指定Topic进行消费数据</span></span><br><span class="line">    group_id =&gt; <span class="string">"test-kafka"</span>     <span class="comment"># 指定消费者组</span></span><br><span class="line">    codec =&gt; json &#123;                      <span class="comment"># 指定消费的数据是JSON格式。</span></span><br><span class="line">             charset =&gt; <span class="string">"UTF-8"</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    add_field =&gt; &#123;</span><br><span class="line">      <span class="string">"name"</span> =&gt; <span class="string">"ELK stack"</span> </span><br><span class="line">    &#125;</span><br><span class="line">    remove_field =&gt; [<span class="string">"agent"</span>,<span class="string">"ephemeral_id"</span>,<span class="string">"ecs"</span>,<span class="string">"@version"</span>,<span class="string">"tags"</span>,<span class="string">"input"</span>,<span class="string">"log"</span>,<span class="string">"offest"</span>]  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> [log_type] == <span class="string">"nginx_access"</span> &#123;</span><br><span class="line">     geoip &#123;</span><br><span class="line">       <span class="built_in">source</span> =&gt; <span class="string">"clientip"</span></span><br><span class="line">     &#125;</span><br><span class="line">     useragent &#123;</span><br><span class="line">       <span class="built_in">source</span> =&gt; <span class="string">"http_user_agent"</span> </span><br><span class="line">       target =&gt; <span class="string">"study_user_agent"</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#将下面解开注释即可将数据存入es集群中，分类添加索引到kibana界面上然后呈现数据</span></span><br><span class="line"><span class="comment">#  if [log_type] == "nginx_access" &#123;  </span></span><br><span class="line"><span class="comment">#    elasticsearch &#123;</span></span><br><span class="line"><span class="comment">#      hosts =&gt; ["192.168.174.140:9200","192.168.174.141:9200","192.168.174.142:9200"] </span></span><br><span class="line"><span class="comment">#      index =&gt; "web-access-%&#123;+yyyy.MM.dd&#125;"</span></span><br><span class="line"><span class="comment">#    &#125; </span></span><br><span class="line"><span class="comment">#  &#125; else if [log_type] == "nginx_error" &#123;</span></span><br><span class="line"><span class="comment">#        elasticsearch &#123;</span></span><br><span class="line"><span class="comment">#          hosts =&gt; ["192.168.174.140:9200","192.168.174.141:9200","192.168.174.142:9200"]</span></span><br><span class="line"><span class="comment">#          index =&gt; "web-error-%&#123;+yyyy.MM.dd&#125;"   </span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br><span class="line"><span class="comment">#  &#125;  else if [log_type] == "system_log" &#123;</span></span><br><span class="line"><span class="comment">#       elasticsearch &#123;</span></span><br><span class="line"><span class="comment">#         hosts =&gt; ["192.168.174.140:9200","192.168.174.141:9200","192.168.174.142:9200"]</span></span><br><span class="line"><span class="comment">#         index =&gt; "system-log-%&#123;+yyyy.MM.dd&#125;"     </span></span><br><span class="line"><span class="comment">#    &#125; </span></span><br><span class="line"><span class="comment">#   &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Logstash实例</span></span><br><span class="line">[root@elk03 ~]<span class="comment"># logstash  -rf ~/filter_grok.yml</span></span><br></pre></td></tr></table></figure><h2 id="十、Elasticsearch-Restful风格API实战"><a href="#十、Elasticsearch-Restful风格API实战" class="headerlink" title="十、Elasticsearch Restful风格API实战"></a>十、Elasticsearch Restful风格API实战</h2><h3 id="1、ES集群状态"><a href="#1、ES集群状态" class="headerlink" title="1、ES集群状态"></a>1、ES集群状态</h3><ol><li>绿色（Green）</li></ol><ul><li><strong>含义</strong>：集群健康状态正常，所有的主分片和副本分片都已分配。</li><li><strong>解释</strong>：绿色状态表示集群中的所有数据都可以访问，所有分片（包括主分片和副本分片）都分配到集群中的节点上。</li><li><strong>示例</strong>：假设集群有3个主分片，每个主分片有1个副本分片，那么绿色状态下这6个分片都已成功分配且正常运行。</li></ul><ol start="2"><li>黄色（Yellow）</li></ol><ul><li><strong>含义</strong>：集群健康状态部分正常，所有的主分片都已分配，但有一个或多个副本分片未分配。</li><li><strong>解释</strong>：黄色状态表示集群中的所有主分片都可以访问，但一些副本分片由于某种原因（例如节点故障或资源不足）未能分配。这意味着数据是安全的，但没有高可用性，因为如果某个节点失败，它可能会导致数据无法访问。</li><li><strong>示例</strong>：假设集群有3个主分片和每个主分片1个副本分片，如果有3个主分片和2个副本分片已分配，但1个副本分片未能分配，则集群为黄色状态。</li></ul><ol start="3"><li>红色（Red）</li></ol><ul><li><strong>含义</strong>：集群健康状态不正常，有一个或多个主分片未分配。</li><li><strong>解释</strong>：红色状态表示集群中有一些数据不可访问，因为主分片未能分配。此时，可能存在数据丢失的风险，需要立即采取措施来修复问题。</li><li><strong>示例</strong>：假设集群有3个主分片和每个主分片1个副本分片，如果有2个主分片和所有副本分片未能分配，则集群为红色状态。</li></ul><h3 id="2、Elasticsearch术语"><a href="#2、Elasticsearch术语" class="headerlink" title="2、Elasticsearch术语"></a>2、Elasticsearch术语</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Document</span><br><span class="line">    文档，用户存储在ES的数据，ES最小单元，文档不可被拆分。文档使用JSON的对象存储类型。</span><br><span class="line">    </span><br><span class="line">filed</span><br><span class="line">    相当于数据表的字段，对文档数据根据不同属性进行分类标识。</span><br><span class="line">    </span><br><span class="line">index</span><br><span class="line">    索引，一个索引就是拥有相似特征文档的集合。</span><br><span class="line">    </span><br><span class="line">shard</span><br><span class="line">    分片，存储数据的地方，每个底层对应的使一个Lucene库，一个索引至少有一个或多个分片。</span><br><span class="line">    </span><br><span class="line">replica</span><br><span class="line">    副本，一个分片可以有0个或者多个副本。作用是对数据进行备份，一旦副本数量不为0，就会引入主分片（primary shard）和副本分片（replica shard）的概念。</span><br><span class="line">        主分片（primary shard）</span><br><span class="line">            实现数据的读写操作。</span><br><span class="line">        副本分片（replica shard）</span><br><span class="line">            可以实现数据的读操作，需要主分片同步数据，当主分片挂掉时，副本分片会变为主分片。</span><br><span class="line">        </span><br><span class="line">Allocation</span><br><span class="line">    分配。将分片分配给某个节点的过程，包括主分片和副本分片。如果副本分片，还包含从主分片复制数据的过程，此过程由Master节点调度完成。</span><br></pre></td></tr></table></figure><h4 id="2-1、Elasticsearch分片分配的基本策略"><a href="#2-1、Elasticsearch分片分配的基本策略" class="headerlink" title="2.1、Elasticsearch分片分配的基本策略"></a>2.1、Elasticsearch分片分配的基本策略</h4><p>​    ES使用数据分片（shard）来提高服务的可用性，将数据分散保存在不同的节点上以降低当单个节点发生故障时对数据完整性的影响，同时使用副本（repiica）来保证数据的完整性。关于分片的默认分配策略，在7.x之前，默认5个primary shard，每个primary shard默认分配一个replica，即5主1副，而7.x之后，默认1主1副ES在分配单个索引的分片时会将每个分片尽可能分配到更多的节点上。但是，实际情况取决于集群拥有的分片和索引的数量以及它们的大小，不一定总是能均匀地分布。</p><p>​    Paimary只能在索引创建时配置数量，而replica可以在任何时间分配，并且primary支持读和写操作，而replica只支持客户端的读取操作，数据由es自动管理，从primary同步。ES不允许Primary和它的Replica放在同一个节点中，并且同一个节点不接受完全相同的两个Replica,同一个节点允许多个索引的分片同时存在。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://l66stbz.github.io/tags/Linux/"/>
    
      <category term="ELK" scheme="https://l66stbz.github.io/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix告警媒介</title>
    <link href="https://l66stbz.github.io/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/"/>
    <id>https://l66stbz.github.io/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/</id>
    <published>2024-08-27T13:50:00.000Z</published>
    <updated>2024-08-31T02:22:43.239Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="zabbix-6-0结合邮箱进行告警"><a href="#zabbix-6-0结合邮箱进行告警" class="headerlink" title="zabbix 6.0结合邮箱进行告警"></a>zabbix 6.0结合邮箱进行告警</h1><h2 id="1、邮箱告警流程"><a href="#1、邮箱告警流程" class="headerlink" title="1、邮箱告警流程"></a>1、邮箱告警流程</h2><ol><li><p>个人邮箱/企业邮箱</p></li><li><p>开启邮箱 smtp功能，获取授权码</p></li><li><p>发件人：配置zabbix服务端报警媒介</p></li><li><p>收件人：配置群组、用户接收报警</p></li><li><p>报警动作：什么时候发送告警邮件</p></li></ol><h2 id="2、准备邮箱"><a href="#2、准备邮箱" class="headerlink" title="2、准备邮箱"></a>2、准备邮箱</h2><p>QQ邮箱地址：<a href="https://mail.qq.com/" target="_blank" rel="noopener">https://mail.qq.com/</a></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082049434.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082050025.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**什么是授权码？**</span><br></pre></td></tr></table></figure><p>授权码是QQ邮箱用于登录第三方客户端/服务的专用密码，适用于登录以下服务：POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV 服务。<br>温馨提醒：<code>为了你的帐户安全，请不要告诉他人你的授权码</code>，更改QQ帐号密码会触发授权码过期，需要重新获取新的授权码登录。</p><h2 id="3、测试邮箱使用连接正常"><a href="#3、测试邮箱使用连接正常" class="headerlink" title="3、测试邮箱使用连接正常"></a>3、测试邮箱使用连接正常</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装网络测试连接工具</span></span><br><span class="line">[root@zabbix-server01 ~]<span class="comment"># yum install -y nc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试邮箱</span></span><br><span class="line">[root@zabbix-server01 ~]<span class="comment"># nc smtp.qq.com -t 25</span></span><br><span class="line">220 newxmesmtplogicsvrsza29-0.qq.com XMail Esmtp QQ Mail Server.</span><br></pre></td></tr></table></figure><h2 id="4、设置zabbix-连接邮箱信息"><a href="#4、设置zabbix-连接邮箱信息" class="headerlink" title="4、设置zabbix 连接邮箱信息"></a>4、设置zabbix 连接邮箱信息</h2><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082101968.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082102764.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082110188.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082111087.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082112477.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082113808.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082113865.png" alt="img"></p><h3 id="4-1-设定宏"><a href="#4-1-设定宏" class="headerlink" title="4.1 设定宏"></a>4.1 设定宏</h3><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405090014359.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405090014257.png" alt="img"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">信息类型是</span>: <span class="string">问题( 发生故障 ) </span></span><br><span class="line"><span class="meta">主题</span>:   <span class="string">故障名称: &#123;EVENT.NAME&#125;</span></span><br><span class="line"><span class="meta">消息</span>: <span class="string"></span></span><br><span class="line"><span class="meta">故障始于</span> <span class="string">时间: &#123;EVENT.TIME&#125; 日期: &#123;EVENT.DATE&#125;</span></span><br><span class="line"><span class="meta">故障名称</span>: <span class="string">&#123;EVENT.NAME&#125;</span></span><br><span class="line"><span class="meta">故障主机</span>: <span class="string">&#123;HOST.NAME&#125;</span></span><br><span class="line"><span class="meta">严重程度</span>: <span class="string">&#123;EVENT.SEVERITY&#125;</span></span><br><span class="line"><span class="meta">额外信息</span>: <span class="string">&#123;EVENT.OPDATA&#125;</span></span><br><span class="line"><span class="meta">故障ID</span>: <span class="string">&#123;EVENT.ID&#125;</span></span><br><span class="line"><span class="attr">---</span></span><br><span class="line"><span class="meta">发器地址</span>: <span class="string">&#123;TRIGGER.URL&#125;</span></span><br><span class="line"><span class="comment">#信息类型是: Problem recov 故障解决的时候</span></span><br><span class="line"><span class="meta">主题</span>: <span class="string">故障解决 in &#123;EVENT.DURATION&#125;: &#123;EVENT.NAME&#125;</span></span><br><span class="line"><span class="meta">消息</span>: <span class="string"></span></span><br><span class="line"><span class="meta">故障已经解决</span> <span class="string">时间: &#123;EVENT.RECOVERY.TIME&#125; 日期: </span></span><br><span class="line"><span class="attr">&#123;EVENT.RECOVERY.DATE&#125;</span></span><br><span class="line"><span class="meta">故障名称</span>: <span class="string">&#123;EVENT.NAME&#125;</span></span><br><span class="line"><span class="meta">故障持续时间</span>: <span class="string">&#123;EVENT.DURATION&#125;</span></span><br><span class="line"><span class="meta">故障主机</span>: <span class="string">&#123;HOST.NAME&#125;</span></span><br><span class="line"><span class="meta">故障级别</span>: <span class="string">&#123;EVENT.SEVERITY&#125;</span></span><br><span class="line"><span class="meta">故障ID</span>: <span class="string">&#123;EVENT.ID&#125;</span></span><br><span class="line"><span class="attr">&#123;TRIGGER.URL&#125;</span></span><br></pre></td></tr></table></figure><h2 id="5、设置用户组和用户"><a href="#5、设置用户组和用户" class="headerlink" title="5、设置用户组和用户"></a>5、设置用户组和用户</h2><h3 id="5-1-创建用户组"><a href="#5-1-创建用户组" class="headerlink" title="5.1 创建用户组"></a>5.1 创建用户组</h3><p>针对不同的告警，发送至不同的用户组。</p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082114839.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082116658.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082117912.png" alt="img"></p><h3 id="5-2-创建用户"><a href="#5-2-创建用户" class="headerlink" title="5.2 创建用户"></a>5.2 创建用户</h3><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082118811.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082119735.png" alt="img"></p><p>设置用户的告警媒介</p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082121247.png" alt="img"></p><p>用户配置权限</p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082124437.png" alt="img"></p><p>查看新增用户</p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082127871.png" alt="img"></p><h3 id="5-3-赋予用户组相关主机群组的权限"><a href="#5-3-赋予用户组相关主机群组的权限" class="headerlink" title="5.3 赋予用户组相关主机群组的权限"></a>5.3 赋予用户组相关主机群组的权限</h3><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082359177.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405090000453.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405090001157.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405090002372.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405090002535.png" alt="img"></p><h2 id="6、设置告警动作"><a href="#6、设置告警动作" class="headerlink" title="6、设置告警动作"></a>6、设置告警动作</h2><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082130808.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082130300.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082132803.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082133399.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405082133276.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405090006426.png" alt="img"></p><p>条件解释：</p><ul><li><p>基于模版：当指定某个监控模板时，该模板所设定的全部触发器触发时，都会发送告警信息；</p></li><li><p>基于主机：当指定某个主机时，该主机的所设定的全部触发器触发时，都会发送告警信息；</p></li><li><p>基于触发器：当指定某个触发器时，该触发器触发时，才会发送告警信息；</p></li><li><p>基于主机群组：当指定某个主机群组时，该主机群组所有的模板中的触发器所设定的全部触发器触发时，都会发送告警；</p></li></ul><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405090009167.png" alt="img"></p><h1 id="zabbix-6-0结合企业微信进行告警"><a href="#zabbix-6-0结合企业微信进行告警" class="headerlink" title="zabbix 6.0结合企业微信进行告警"></a>zabbix 6.0结合企业微信进行告警</h1><h2 id="1、注册企业微信"><a href="#1、注册企业微信" class="headerlink" title="1、注册企业微信"></a>1、注册企业微信</h2><p>略</p><h2 id="2、创建群组机器人"><a href="#2、创建群组机器人" class="headerlink" title="2、创建群组机器人"></a>2、创建群组机器人</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40379882/1716306783634-2ca44222-00a2-4bb7-9e0a-418cc4f2acaa.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/1716306802588-b33b0116-cf85-4504-b39a-6dfaa330f7d6.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/1716306889829-4a2a66ea-5ae3-488d-8205-8416a8f03afa.png" alt="img"></p><h2 id="3、web界面配置"><a href="#3、web界面配置" class="headerlink" title="3、web界面配置"></a>3、web界面配置</h2><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/1716306981859-92e03ed6-fc30-4446-b92c-d6b0fa447abf.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40379882/1716307063502-5e32e774-d48b-4d81-bfe2-22cb4cf68450.png" alt="img"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Wechat = &#123;</span><br><span class="line">  token: <span class="literal">null</span>,</span><br><span class="line">  to: <span class="literal">null</span>,</span><br><span class="line">  message: <span class="literal">null</span>,</span><br><span class="line">  parse_mode: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  sendMessage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = &#123;</span><br><span class="line">      msgtype: <span class="string">"markdown"</span>,</span><br><span class="line">      chat_id: Wechat.to,</span><br><span class="line">      markdown: &#123;</span><br><span class="line">        content:Wechat.message</span><br><span class="line">      &#125;,</span><br><span class="line">      disable_web_page_preview: <span class="literal">true</span>,</span><br><span class="line">      disable_notification: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">      data,</span><br><span class="line">      response,</span><br><span class="line">      request = <span class="keyword">new</span> CurlHttpRequest(),</span><br><span class="line">      url = <span class="string">'https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=5043aed8-f801-4410-b4d3-82ac4e214883'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Wechat.parse_mode !== <span class="literal">null</span>) &#123;</span><br><span class="line">      params[<span class="string">'parse_mode'</span>] = Wechat.parse_mode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request.AddHeader(<span class="string">'Content-Type: application/json'</span>);</span><br><span class="line">    data = <span class="built_in">JSON</span>.stringify(params);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove replace() function if you want to see the exposed token in the log file.</span></span><br><span class="line">    Zabbix.Log(<span class="number">4</span>, <span class="string">'[Wechat Webhook] URL: '</span> + url.replace(Wechat.token, <span class="string">'&lt;TOKEN&gt;'</span>));</span><br><span class="line">    Zabbix.Log(<span class="number">4</span>, <span class="string">'[Wechat Webhook] params: '</span> + data);</span><br><span class="line">    response = request.Post(url, data);</span><br><span class="line">    Zabbix.Log(<span class="number">4</span>, <span class="string">'[Wechat Webhook] HTTP code: '</span> + request.Status());</span><br><span class="line">    Zabbix.Log(<span class="number">4</span>, <span class="string">'[Wechat Webhook] response: '</span> + response);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response = <span class="built_in">JSON</span>.parse(response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      response = <span class="literal">null</span>;</span><br><span class="line">      Zabbix.Log(<span class="number">4</span>, <span class="string">'[Wechat Webhook] response parse error'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (request.Status() !== <span class="number">200</span> ||  response.errcode !== <span class="number">0</span> || response.errmsg !== <span class="string">'ok'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> response.errmsg === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> response.errmsg;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">'Unknown error. Check debug log for more information.'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> params = <span class="built_in">JSON</span>.parse(value);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> params.Token === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">'Incorrect value is given for parameter "Token": parameter is missing'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Wechat.token = params.Token;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ([<span class="string">'Markdown'</span>, <span class="string">'HTML'</span>, <span class="string">'MarkdownV2'</span>].indexOf(params.ParseMode) !== <span class="number">-1</span>) &#123;</span><br><span class="line">    Wechat.parse_mode = params.ParseMode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Wechat.to = params.To;</span><br><span class="line">  Wechat.message = params.Subject + <span class="string">'\n'</span> + params.Message;</span><br><span class="line">  Wechat.sendMessage();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'OK'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  Zabbix.Log(<span class="number">4</span>, <span class="string">'[Wechat Webhook] notification failed: '</span> + error);</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">'Sending failed: '</span> + error + <span class="string">'.'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意修改其中的Key值</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40379882/1716307340934-547b1e7d-b3cf-4f21-bf75-342d7eeaca88.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">主题：【监控告警】主机: &lt;font color=<span class="string">"warning"</span>&gt;&#123;HOST.NAME&#125;&lt;/font&gt;  IP地址：&lt;font color=<span class="string">"warning"</span>&gt;&#123;HOST.IP&#125;&lt;/font&gt;</span><br><span class="line">消息：</span><br><span class="line">&gt;主机名称：**&lt;font color=<span class="string">"comment"</span>&gt;&#123;HOST.NAME&#125;&lt;/font&gt;**</span><br><span class="line">&gt;主机IP：&lt;font color=<span class="string">"comment"</span>&gt;&#123;HOST.IP&#125;&lt;/font&gt;</span><br><span class="line">&gt;告警时间：&lt;font color=<span class="string">"comment"</span>&gt;&#123;EVENT.DATE&#125;-&#123;EVENT.TIME&#125;&lt;/font&gt;</span><br><span class="line">&gt;问题名称：&lt;font color=<span class="string">"warning"</span>&gt;&#123;EVENT.NAME&#125;&lt;/font&gt;</span><br><span class="line">&gt;问题详情：&lt;font color=<span class="string">"comment"</span>&gt;&#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;&lt;/font&gt;</span><br><span class="line">&gt;目前状态：&lt;font color=<span class="string">"comment"</span>&gt;&#123;TRIGGER.STATUS&#125;&lt;/font&gt;</span><br><span class="line">&gt;操作数据：&lt;font color=<span class="string">"comment"</span>&gt;&#123;EVENT.OPDATA&#125;&lt;/font&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">主题：</span><br><span class="line"></span><br><span class="line"><span class="comment">### 【监控告警】主机: &lt;font color="warning"&gt;&#123;HOST.NAME&#125;&lt;/font&gt;  IP地址：&lt;font color="warning"&gt;&#123;HOST.IP&#125;&lt;/font&gt;</span></span><br><span class="line"></span><br><span class="line">消息：</span><br><span class="line">&gt;主机名称：**&lt;font color=<span class="string">"comment"</span>&gt;&#123;HOST.NAME&#125;&lt;/font&gt;**</span><br><span class="line">&gt;主机IP：&lt;font color=<span class="string">"comment"</span>&gt;&#123;HOST.IP&#125;&lt;/font&gt;</span><br><span class="line">&gt;告警时间：&lt;font color=<span class="string">"comment"</span>&gt;&#123;EVENT.DATE&#125;-&#123;EVENT.TIME&#125;&lt;/font&gt;</span><br><span class="line">&gt;问题名称：&lt;font color=<span class="string">"warning"</span>&gt;&#123;EVENT.NAME&#125;&lt;/font&gt;</span><br><span class="line">&gt;问题详情：&lt;font color=<span class="string">"comment"</span>&gt;&#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;&lt;/font&gt;</span><br><span class="line">&gt;目前状态：&lt;font color=<span class="string">"comment"</span>&gt;&#123;TRIGGER.STATUS&#125;&lt;/font&gt;</span><br><span class="line">&gt;操作数据：&lt;font color=<span class="string">"comment"</span>&gt;&#123;EVENT.OPDATA&#125;&lt;/font&gt;</span><br></pre></td></tr></table></figure><h2 id="4、报警媒介测试"><a href="#4、报警媒介测试" class="headerlink" title="4、报警媒介测试"></a>4、报警媒介测试</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40379882/1716307502312-86c5c320-e701-47e3-9416-24f4915b5004.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/1716307519891-c5a0ff51-1a01-45d5-9437-f8fc03590f23.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40379882/1716307547368-889abd2f-0bda-48c4-944d-886224499e05.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/1716307576184-f35f48cc-8665-4041-952e-647387dc7636.png" alt="img"></p><h2 id="5、用户配置"><a href="#5、用户配置" class="headerlink" title="5、用户配置"></a>5、用户配置</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40379882/1716307661758-fe4edc92-fb9e-4b47-93b5-23f188f32c1a.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40379882/1716307700637-b37aee06-befb-41e8-8482-4bce19ded7f3.png" alt="img"></p><h2 id="6、动作配置"><a href="#6、动作配置" class="headerlink" title="6、动作配置"></a>6、动作配置</h2><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/1716307754681-968cb8f9-c96e-4ccf-b1e1-69ee82ff7960.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/1716307786295-f67dd981-8702-48f3-b186-d4891a830e96.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40379882/1716307838323-6a409e18-703b-4e02-8d20-553a6d5882f5.png" alt="img"></p><h2 id="7、测试微信告警"><a href="#7、测试微信告警" class="headerlink" title="7、测试微信告警"></a>7、测试微信告警</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 被监控端关闭nginx</span></span><br><span class="line">[root@web-01 zabbix_agent2.d]<span class="comment"># systemctl stop nginx</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40379882/1716308076223-e0629e03-9651-4f69-b16f-218028be26e1.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/1716308097532-15339ba9-daa1-4337-8f74-b4b85c958a27.png" alt="img"></p><h1 id><a href="#" class="headerlink" title></a></h1><h1 id="zabbix-6-0-结合飞书进行告警"><a href="#zabbix-6-0-结合飞书进行告警" class="headerlink" title="zabbix 6.0 结合飞书进行告警"></a>zabbix 6.0 结合飞书进行告警</h1><h2 id="1、操作步骤"><a href="#1、操作步骤" class="headerlink" title="1、操作步骤"></a>1、操作步骤</h2><ul><li><p>飞书创建群组-添加自定义机器人，复制自定义机器人的webhook地址；</p></li><li><p>zabbix服务器脚本目录下新建feishu.py脚本，并配置webhook地址；</p></li><li><p>创建zabbix报警媒介类型，用户添加报警媒介；</p></li><li><p>创建动作，配置操作。</p></li></ul><h3 id="1-1-webhook介绍"><a href="#1-1-webhook介绍" class="headerlink" title="1.1 webhook介绍"></a>1.1 webhook介绍</h3><p>飞书中的自定义机器人Webhook地址用于<strong>接收和响应群组中的消息</strong>。</p><p>在飞书平台中，创建群组并添加自定义机器人后，会得到一个webhook地址。这个地址是<strong>一个HTTP接口</strong>，它的主要作用如下：</p><ol><li><p><strong>消息推送</strong>：当你需要将外部系统的信息自动推送到飞书群组时，可以通过调用这个webhook地址来实现。例如，你可以使用它来发送天气预报、日程提醒或者工作状态更新等信息。</p></li><li><p><strong>自动化流程</strong>：结合其他工具或服务，webhook可以实现工作流程的自动化。例如，当某个任务在外部系统中完成时，通过webhook通知群组成员，实现任务的自动跟进和管理。</p></li><li><p><strong>集成第三方服务</strong>：通过webhook地址，可以将飞书群组与其他第三方服务（如GitHub、Jira等）集成，使得群组成为各种信息交流和协作的中心。</p></li></ol><p>总的来说，自定义机器人的webhook地址是实现飞书群组智能自动化功能的关键，它允许用户根据自己的需求定制机器人的行为，从而提高工作效率和群组互动的质量。</p><h2 id="2、飞书相关操作"><a href="#2、飞书相关操作" class="headerlink" title="2、飞书相关操作"></a>2、飞书相关操作</h2><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405090939663.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405090940259.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405090941083.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405090941772.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405090942929.png" alt="img"></p><p>设置机器人名称、描述，复制保存生成的webhook地址。</p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405090942703.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405090943571.png" alt="img"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="string">//open.feishu.cn/open-apis/bot/v2/hook/2e9b42ff-6977-4bbd-80b1-cd796787fb5c</span></span><br></pre></td></tr></table></figure><h2 id="3、创建飞书脚本文件"><a href="#3、创建飞书脚本文件" class="headerlink" title="3、创建飞书脚本文件"></a>3、创建飞书脚本文件</h2><p>登录zabbix服务器，进入到/usr/lib/zabbix/alertscripts/目录，新建feishu.py文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server01 ~]<span class="comment"># vim /usr/local/share/zabbix/alertscripts/feishu.py</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://open.feishu.cn/open-apis/bot/v2/hook/2e9b42ff-6977-4bbd-80b1-cd796787fb5c"</span> <span class="comment">#你复制的webhook地址粘贴进url内</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_message</span><span class="params">(message)</span>:</span></span><br><span class="line">    payload_message = &#123;</span><br><span class="line">        <span class="string">"msg_type"</span>: <span class="string">"text"</span>,</span><br><span class="line">        <span class="string">"content"</span>: &#123;</span><br><span class="line">            <span class="string">"text"</span>: message</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.request(<span class="string">"POST"</span>, url, headers=headers, data=json.dumps(payload_message))</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    text = sys.argv[<span class="number">1</span>]</span><br><span class="line">    send_message(text)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装python3</span></span><br><span class="line">[root@zabbix-server01 ~]<span class="comment"># yum install -y python3</span></span><br><span class="line">[root@zabbix-server01 ~]<span class="comment"># pip-3 install requests</span></span><br><span class="line"><span class="comment"># 脚本增加执行权限</span></span><br><span class="line">[root@zabbix-server01 ~]<span class="comment"># chmod +x  /usr/local/share/zabbix/alertscripts/feishu.py</span></span><br></pre></td></tr></table></figure><h2 id="4、zabbix-web配置报警媒介"><a href="#4、zabbix-web配置报警媒介" class="headerlink" title="4、zabbix web配置报警媒介"></a>4、zabbix web配置报警媒介</h2><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405090954794.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405090956690.png" alt="img"></p><p>配置Message template</p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405090957238.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405090958959.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#主题：</span></span><br><span class="line">异常通知: &#123;EVENT.NAME&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 消息体</span></span><br><span class="line">告警主机:&#123;HOSTNAME1&#125;</span><br><span class="line">告警时间:&#123;EVENT.TIME&#125;</span><br><span class="line">告警等级:&#123;TRIGGER.SEVERITY&#125; </span><br><span class="line">告警信息:&#123;EVENT.NAME&#125; </span><br><span class="line">告警项目:&#123;TRIGGER.KEY1&#125; </span><br><span class="line">问题详情:&#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125; </span><br><span class="line">当前状态:&#123;TRIGGER.STATUS&#125;:&#123;ITEM.VALUE1&#125; </span><br><span class="line">事件ID:&#123;EVENT.ID&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#主题：</span></span><br><span class="line">恢复通知: &#123;EVENT.NAME&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 消息体</span></span><br><span class="line">告警主机:&#123;HOSTNAME1&#125;</span><br><span class="line">告警时间:&#123;EVENT.TIME&#125;</span><br><span class="line">告警等级:&#123;TRIGGER.SEVERITY&#125; </span><br><span class="line">告警信息:&#123;EVENT.NAME&#125; </span><br><span class="line">告警项目:&#123;TRIGGER.KEY1&#125; </span><br><span class="line">问题详情:&#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125; </span><br><span class="line">当前状态:&#123;TRIGGER.STATUS&#125;:&#123;ITEM.VALUE1&#125; </span><br><span class="line">事件ID:&#123;EVENT.ID&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405091002343.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405091003592.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405091003051.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405091003329.png" alt="img"></p><h2 id="5、创建用户群组和用户"><a href="#5、创建用户群组和用户" class="headerlink" title="5、创建用户群组和用户"></a>5、创建用户群组和用户</h2><p>详细请见zabbix 6.0 结合邮箱告警用户组和用户创建</p><h2 id="6、触发器动作创建"><a href="#6、触发器动作创建" class="headerlink" title="6、触发器动作创建"></a>6、触发器动作创建</h2><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405091114076.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405091131585.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405091132751.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405091133738.png" alt="img"></p><h2 id="7、测试飞书告警"><a href="#7、测试飞书告警" class="headerlink" title="7、测试飞书告警"></a>7、测试飞书告警</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 被监控端关闭nginx</span></span><br><span class="line">$ systemctl stop nginx</span><br></pre></td></tr></table></figure><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405091134019.png" alt="img"></p><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405091134043.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">$ systemctl start nginx</span><br></pre></td></tr></table></figure><p><img src="/2024/08/27/Zabbix%E5%91%8A%E8%AD%A6%E5%AA%92%E4%BB%8B/202405091135058.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://l66stbz.github.io/tags/Linux/"/>
    
      <category term="Zabbix" scheme="https://l66stbz.github.io/tags/Zabbix/"/>
    
      <category term="Shell" scheme="https://l66stbz.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix自定义监控脚本</title>
    <link href="https://l66stbz.github.io/2024/08/26/Zabbix%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E8%84%9A%E6%9C%AC/"/>
    <id>https://l66stbz.github.io/2024/08/26/Zabbix%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E8%84%9A%E6%9C%AC/</id>
    <published>2024-08-26T13:50:00.000Z</published>
    <updated>2024-08-31T02:22:01.102Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="zabbix-6-0-自定义监控redis"><a href="#zabbix-6-0-自定义监控redis" class="headerlink" title="zabbix 6.0 自定义监控redis"></a>zabbix 6.0 自定义监控redis</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">/etc/zabbix/zabbix_agent2.d/redis_status.sh</span><br><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">REDISCLI=<span class="string">"/usr/local/redis/src/redis-cli"</span></span><br><span class="line">HOST=<span class="string">"127.0.0.1"</span></span><br><span class="line">PORT=6379</span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">        <span class="comment"># 获取 Redis 的版本号。</span></span><br><span class="line">        version)</span><br><span class="line">            result=`<span class="variable">$REDISCLI</span> -h <span class="variable">$HOST</span> -p <span class="variable">$PORT</span> info | grep -w <span class="string">"redis_version"</span> | awk -F<span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">        ;;</span><br><span class="line">        uptime)</span><br><span class="line">        <span class="comment"># 获取 Redis 服务器运行的秒数。</span></span><br><span class="line">            result=`<span class="variable">$REDISCLI</span> -h <span class="variable">$HOST</span> -p <span class="variable">$PORT</span> info | grep -w <span class="string">"uptime_in_seconds"</span> | awk -F<span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">        ;;</span><br><span class="line">        <span class="comment"># 获取当前连接到 Redis 服务器的客户端数量。</span></span><br><span class="line">        connected_clients)</span><br><span class="line">            result=`<span class="variable">$REDISCLI</span> -h <span class="variable">$HOST</span> -p <span class="variable">$PORT</span> info | grep -w <span class="string">"connected_clients"</span> | awk -F<span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">        ;;</span><br><span class="line">        <span class="comment"># 获取当前被阻塞的客户端数量。</span></span><br><span class="line">        blocked_clients)</span><br><span class="line">            result=`<span class="variable">$REDISCLI</span> -h <span class="variable">$HOST</span> -p <span class="variable">$PORT</span> info | grep -w <span class="string">"blocked_clients"</span> | awk -F<span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">        ;;</span><br><span class="line">        <span class="comment"># 获取 Redis 使用的内存量。</span></span><br><span class="line">        used_memory)</span><br><span class="line">            result=`<span class="variable">$REDISCLI</span> -h <span class="variable">$HOST</span> -p <span class="variable">$PORT</span> info | grep -w <span class="string">"used_memory"</span> | awk -F<span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">        ;;</span><br><span class="line">        <span class="comment"># 获取 Redis 使用的 RSS（Resident Set Size）内存，表示 Redis 在操作系统层面实际占用的物理内存。</span></span><br><span class="line">        used_memory_rss)</span><br><span class="line">            result=`<span class="variable">$REDISCLI</span> -h <span class="variable">$HOST</span> -p <span class="variable">$PORT</span> info | grep -w <span class="string">"used_memory_rss"</span> | awk -F<span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">        ;;</span><br><span class="line">        <span class="comment"># 获取 Redis 使用的内存峰值。</span></span><br><span class="line">        used_memory_peak)</span><br><span class="line">            result=`<span class="variable">$REDISCLI</span> -h <span class="variable">$HOST</span> -p <span class="variable">$PORT</span> info | grep -w <span class="string">"used_memory_peak"</span> | awk -F<span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">        ;;</span><br><span class="line">        <span class="comment"># 获取 Redis Lua 脚本执行时使用的内存。</span></span><br><span class="line">        used_memory_lua)</span><br><span class="line">            result=`<span class="variable">$REDISCLI</span> -h <span class="variable">$HOST</span> -p <span class="variable">$PORT</span> info | grep -w <span class="string">"used_memory_lua"</span> | awk -F<span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">        ;;</span><br><span class="line">        <span class="comment"># 获取 Redis 在系统级别（内核态）消耗的 CPU 时间。</span></span><br><span class="line">        used_cpu_sys)</span><br><span class="line">            result=`<span class="variable">$REDISCLI</span> -h <span class="variable">$HOST</span> -p <span class="variable">$PORT</span> info | grep -w <span class="string">"used_cpu_sys"</span> | awk -F<span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">        ;;</span><br><span class="line">        <span class="comment"># 获取 Redis 在用户态消耗的 CPU 时间。</span></span><br><span class="line">        used_cpu_user)</span><br><span class="line">            result=`<span class="variable">$REDISCLI</span> -h <span class="variable">$HOST</span> -p <span class="variable">$PORT</span> info | grep -w <span class="string">"used_cpu_user"</span> | awk -F<span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">        ;;</span><br><span class="line">        <span class="comment"># 获取 Redis 所有子进程在系统态消耗的 CPU 时间。</span></span><br><span class="line">        used_cpu_sys_children)</span><br><span class="line">            result=`<span class="variable">$REDISCLI</span> -h <span class="variable">$HOST</span> -p <span class="variable">$PORT</span> info | grep -w <span class="string">"used_cpu_sys_children"</span> | awk -F<span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">        ;;</span><br><span class="line">        <span class="comment"># 获取 Redis 所有子进程在用户态消耗的 CPU 时间。</span></span><br><span class="line">        used_cpu_user_children)</span><br><span class="line">            result=`<span class="variable">$REDISCLI</span> -h <span class="variable">$HOST</span> -p <span class="variable">$PORT</span> info | grep -w <span class="string">"used_cpu_user_children"</span> | awk -F<span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">        ;;</span><br><span class="line">        <span class="comment"># 检查最近一次 RDB 持久化操作的状态是否成功。</span></span><br><span class="line">        rdb_last_bgsave_status)</span><br><span class="line">            result=`<span class="variable">$REDISCLI</span> -h <span class="variable">$HOST</span> -p <span class="variable">$PORT</span> info  | grep -w <span class="string">"rdb_last_bgsave_status"</span> | awk -F<span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span> | grep -c ok`</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">        ;;</span><br><span class="line">        <span class="comment"># 检查最近一次 AOF 重写操作的状态是否成功。</span></span><br><span class="line">        aof_last_bgrewrite_status)</span><br><span class="line">            result=`<span class="variable">$REDISCLI</span> -h <span class="variable">$HOST</span> -p <span class="variable">$PORT</span> info  | grep -w <span class="string">"aof_last_bgrewrite_status"</span> | awk -F<span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span> | grep -c ok`</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">        ;;</span><br><span class="line">        <span class="comment"># 检查最近一次 AOF 写操作的状态是否成功。</span></span><br><span class="line">        aof_last_write_status)</span><br><span class="line">            result=`<span class="variable">$REDISCLI</span> -h <span class="variable">$HOST</span> -p <span class="variable">$PORT</span> info  | grep -w <span class="string">"aof_last_write_status"</span> | awk -F<span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span> | grep -c ok`</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">/etc/zabbix/zabbix_agent2.d/redis_status.conf</span><br><span class="line">UserParameter=redis_status[*],bash /etc/zabbix/zabbix_agent2.d/redis_status.sh <span class="variable">$1</span></span><br><span class="line">UserParameter=redis_ping,/usr/<span class="built_in">local</span>/redis/src/redis-cli PING|grep -c <span class="string">"PONG"</span> | wc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启客户端工具</span></span><br><span class="line">[root@web09 zabbix_agent2.d]<span class="comment"># systemctl restart zabbix-agent2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">[root@web09 zabbix_agent2.d]<span class="comment"># zabbix_agent2  -t redis_status[uptime]</span></span><br><span class="line">redis_status[uptime]                          [s|2698]</span><br><span class="line"></span><br><span class="line">[root@web09 zabbix_agent2.d]<span class="comment"># zabbix_agent2  -t redis_status[version]</span></span><br><span class="line">redis_status[version]                         [s|6.2.7]</span><br><span class="line"></span><br><span class="line">[root@web09 zabbix_agent2.d]<span class="comment"># zabbix_agent2  -t redis_ping</span></span><br><span class="line">redis_ping</span><br><span class="line"></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># zabbix_get -s 192.168.100.90 -p 10050 -k redis_status[version]</span></span><br><span class="line">6.2.7</span><br></pre></td></tr></table></figure><h3 id="zabbix-6-0-自定义监控mysql"><a href="#zabbix-6-0-自定义监控mysql" class="headerlink" title="zabbix 6.0 自定义监控mysql"></a>zabbix 6.0 自定义监控mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">/etc/zabbix/zabbix_agent2.d/mysql_check.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 用户名（确保有这个用户）</span></span><br><span class="line">MYSQL_USER=<span class="string">'zabbix'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 密码</span></span><br><span class="line">MYSQL_PWD=<span class="string">'zabbix'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主机地址/IP     下面这个写法是agent 和  数据库在同台机器上</span></span><br><span class="line">MYSQL_HOST=<span class="string">'127.0.0.1'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口</span></span><br><span class="line">MYSQL_PORT=<span class="string">'3306'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据连接</span></span><br><span class="line">MYSQL_CONN=<span class="string">"/usr/bin/mysqladmin -u<span class="variable">$&#123;MYSQL_USER&#125;</span> -p<span class="variable">$&#123;MYSQL_PWD&#125;</span> -h<span class="variable">$&#123;MYSQL_HOST&#125;</span> -P<span class="variable">$&#123;MYSQL_PORT&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne <span class="string">"1"</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"arg error!"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line"><span class="comment"># 获取 MySQL 数据库运行的时间（以秒为单位）。</span></span><br><span class="line">Uptime)</span><br><span class="line">result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> status 2&gt;/dev/null |cut -f2 -d<span class="string">":"</span>|cut -f1 -d<span class="string">"T"</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">;;</span><br><span class="line"><span class="comment"># 获取执行 UPDATE 语句的次数。</span></span><br><span class="line">Com_update)</span><br><span class="line">result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status   2&gt;/dev/null  |grep -w <span class="string">"Com_update"</span>|cut -d<span class="string">"|"</span> -f3`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">;;</span><br><span class="line"><span class="comment"># 获取执行时间超过 long_query_time 配置的慢查询的次数。</span></span><br><span class="line">Slow_queries)</span><br><span class="line">result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> status  2&gt;/dev/null  |cut -f5 -d<span class="string">":"</span>|cut -f1 -d<span class="string">"O"</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">;;</span><br><span class="line"><span class="comment"># 获取执行 SELECT 语句的次数。</span></span><br><span class="line">Com_select)</span><br><span class="line">result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status  2&gt;/dev/null  |grep -w <span class="string">"Com_select"</span>|cut -d<span class="string">"|"</span> -f3`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">;;</span><br><span class="line"><span class="comment"># 获取执行 ROLLBACK 事务的次数。</span></span><br><span class="line">Com_rollback)</span><br><span class="line">result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status  2&gt;/dev/null   |grep -w <span class="string">"Com_rollback"</span>|cut -d<span class="string">"|"</span> -f3`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">;;</span><br><span class="line"><span class="comment"># 获取自数据库启动以来处理的查询总数。</span></span><br><span class="line">Questions)</span><br><span class="line">result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> status   2&gt;/dev/null |cut -f4 -d<span class="string">":"</span>|cut -f1 -d<span class="string">"S"</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">;;</span><br><span class="line"><span class="comment">#  获取执行 INSERT 语句的次数。</span></span><br><span class="line">Com_insert)</span><br><span class="line">result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status   2&gt;/dev/null  |grep -w <span class="string">"Com_insert"</span>|cut -d<span class="string">"|"</span> -f3`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">;;</span><br><span class="line"><span class="comment"># 获取执行 DELETE 语句的次数。</span></span><br><span class="line">Com_delete)</span><br><span class="line">result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status   2&gt;/dev/null  |grep -w <span class="string">"Com_delete"</span>|cut -d<span class="string">"|"</span> -f3`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">;;</span><br><span class="line"><span class="comment"># 获取执行 COMMIT 事务的次数。</span></span><br><span class="line">Com_commit)</span><br><span class="line">result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status   2&gt;/dev/null  |grep -w <span class="string">"Com_commit"</span>|cut -d<span class="string">"|"</span> -f3`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">;;</span><br><span class="line"><span class="comment"># 获取 MySQL 服务器发送的字节总数。</span></span><br><span class="line">Bytes_sent)</span><br><span class="line">result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status  2&gt;/dev/null  |grep -w <span class="string">"Bytes_sent"</span> |cut -d<span class="string">"|"</span> -f3`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">;;</span><br><span class="line"><span class="comment"># 获取 MySQL 服务器接收的字节总数。</span></span><br><span class="line">Bytes_received)</span><br><span class="line">result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status  2&gt;/dev/null  |grep -w <span class="string">"Bytes_received"</span> |cut -d<span class="string">"|"</span> -f3`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">;;</span><br><span class="line"><span class="comment"># 获取执行 BEGIN 事务的次数。</span></span><br><span class="line">Com_begin)</span><br><span class="line">result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status  2&gt;/dev/null  |grep -w <span class="string">"Com_begin"</span>|cut -d<span class="string">"|"</span> -f3`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Usage:<span class="variable">$0</span>(Uptime|Com_update|Slow_queries|Com_select|Com_rollback|Questions|Com_insert|Com_delete|Com_commit|Bytes_sent|Bytes_received|Com_begin)"</span></span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/etc/zabbix/zabbix_agent2.d/mysql_check.conf</span><br><span class="line">UserParameter=mysql_check[*],bash /etc/zabbix/zabbix_agent2.d/mysql_check.sh <span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启客户端工具</span></span><br><span class="line">[root@web09 zabbix_agent2.d]<span class="comment"># systemctl restart zabbix-agent2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">[root@web09 zabbix_agent2.d]<span class="comment"># zabbix_agent2  -t mysql_check[Uptime]</span></span><br><span class="line">mysql_check[Uptime]                           [s|638]</span><br><span class="line"></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># zabbix_get -s 192.168.100.90 -p 10050 -k mysql_check[Uptime]</span></span><br><span class="line">640</span><br></pre></td></tr></table></figure><h3 id="zabbix-6-0-自定义监控mysql主从状态"><a href="#zabbix-6-0-自定义监控mysql主从状态" class="headerlink" title="zabbix 6.0 自定义监控mysql主从状态"></a>zabbix 6.0 自定义监控mysql主从状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/etc/zabbix/zabbix_agent2.d/mysql_slave_status.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">a=`mysql -u root -p1 -e <span class="string">"SHOW SLAVE STATUS\G"</span>  2&gt;/dev/null |awk -F<span class="string">' '</span> <span class="string">'NR==12&#123;print $2&#125;'</span>`</span><br><span class="line">b=`mysql -u root -p1 -e <span class="string">"SHOW SLAVE STATUS\G"</span>  2&gt;/dev/null |awk -F<span class="string">' '</span> <span class="string">'NR==13&#123;print $2&#125;'</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> = <span class="string">'Yes'</span> -a <span class="variable">$b</span> = <span class="string">'Yes'</span> ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">/etc/zabbix/zabbix_agent2.d/mysql_slave_status.conf</span><br><span class="line">UserParameter=mysql_slave_status,bash /etc/zabbix/zabbix_agent2.d/mysql_slave_status.sh </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启客户端工具</span></span><br><span class="line">[root@web09 zabbix_agent2.d]<span class="comment"># systemctl restart zabbix-agent2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">[root@web09 zabbix_agent2.d]<span class="comment"># zabbix_agent2  -t mysql_slave_status</span></span><br><span class="line">mysql_slave_status                            [s|1]</span><br><span class="line"></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># zabbix_get -s 192.168.100.90 -p 10050 -k mysql_slave_status</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="zabbix-6-0-自定义监控nginx"><a href="#zabbix-6-0-自定义监控nginx" class="headerlink" title="zabbix 6.0 自定义监控nginx"></a>zabbix 6.0 自定义监控nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#nginx服务开启状态模块</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">           root /usr/share/nginx/html;</span><br><span class="line">           index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        location /status &#123;</span><br><span class="line">           stub_status on;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">$ nginx -t</span><br><span class="line">$ systemctl reload nginx</span><br><span class="line"></span><br><span class="line">/etc/zabbix/zabbix_agent2.d/nginx_status.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># nginx status模块状态监控</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">Active</span></span> () &#123;</span><br><span class="line">wget --quiet -O - http://localhost/status?auto | awk <span class="string">'NR==1 &#123;print $3&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">Accept</span></span> () &#123;</span><br><span class="line">wget --quiet -O - http://localhost/status?auto | awk <span class="string">'NR==3 &#123;print $1&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">Handled</span></span> () &#123;</span><br><span class="line">wget --quiet -O - http://localhost/status?auto | awk <span class="string">'NR==3 &#123;print $2&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">Requests</span></span> () &#123;</span><br><span class="line">wget --quiet -O - http://localhost/status?auto | awk <span class="string">'NR==3 &#123;print $3&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">Reading</span></span> () &#123;</span><br><span class="line">wget --quiet -O - http://localhost/status?auto | awk <span class="string">'NR==4 &#123;print $2&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">Writing</span></span> () &#123;</span><br><span class="line">wget --quiet -O - http://localhost/status?auto | awk <span class="string">'NR==4 &#123;print $4&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">Waiting</span></span> () &#123;</span><br><span class="line">wget --quiet -O - http://localhost/status?auto | awk <span class="string">'NR==4 &#123;print $6&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">/etc/zabbix/zabbix_agent2.d/nginx_status.conf</span><br><span class="line">UserParameter=nginx_status[*],/etc/zabbix/zabbix_agent2.d/nginx_status.sh <span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启客户端工具</span></span><br><span class="line">[root@test01 ~]<span class="comment"># systemctl restart zabbix-agent2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋予脚本执行权限</span></span><br><span class="line">[root@test01 ~]<span class="comment"># chmod +x /etc/zabbix/zabbix_agent2.d/nginx_status.sh </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试脚本</span></span><br><span class="line">[root@test01 ~]<span class="comment"># bash /etc/zabbix/zabbix_agent2.d/nginx_status.sh  Accept</span></span><br><span class="line">1188</span><br><span class="line"><span class="comment"># 服务端测试抓取客户端自定义监控指标</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># zabbix_get  -s 192.168.100.90   -k "nginx_status[Accept]"</span></span><br><span class="line">2166</span><br></pre></td></tr></table></figure><h3 id="zabbix-6-0-自定义监控JVM"><a href="#zabbix-6-0-自定义监控JVM" class="headerlink" title="zabbix 6.0 自定义监控JVM"></a>zabbix 6.0 自定义监控JVM</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">安装tomcat</span><br><span class="line">如果是编译安装就直接在以下文件中添加即可！</span><br><span class="line">如果是yum安装就在/usr/libexec/tomcat/server这个文件中添加</span><br><span class="line">可以通过systemctl cat tomcat来查看</span><br><span class="line">ExecStart=/usr/libexec/tomcat/server</span><br><span class="line"></span><br><span class="line">[root@java-web01 bin]<span class="comment"># vim /usr/local/tomcat/bin/catalina.sh </span></span><br><span class="line"><span class="comment">#需添加的内容</span></span><br><span class="line">CATALINA_OPTS=<span class="string">" \</span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote \</span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote.authenticate=false \</span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote.ssl=false \</span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote.port=12345 \</span></span><br><span class="line"><span class="string">-Djava.rmi.server.hostname=192.168.100.90"</span></span><br><span class="line"></span><br><span class="line">添加完后重启tomcat，然后查看12345端口有没有放开，没放开说明配置有问题！</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">以下是上边添加内容的含义:</span><br><span class="line">-Dcom.sun.management.jmxremote<span class="comment">#  启用 JMX 远程管理功能。启用该选项后，JVM 将允许远程连接进行监控和管理。  </span></span><br><span class="line">-Dcom.sun.management.jmxremote.authenticate=<span class="literal">false</span><span class="comment">#  禁用 JMX 远程管理的认证功能。默认情况下，JMX 远程访问是需要身份验证的</span></span><br><span class="line">-Dcom.sun.management.jmxremote.ssl=<span class="literal">false</span><span class="comment">#  禁用 JMX 远程管理的 SSL 加密功能。  </span></span><br><span class="line">-Dcom.sun.management.jmxremote.port=12345<span class="comment"># JMX对外暴露端口号</span></span><br><span class="line">-Djava.rmi.server.hostname=192.168.100.90<span class="comment"># java实例主机IP， 客户端将连接到该 IP 地址进行 JMX 操作。</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">zabbix-server端</span></span><br><span class="line">[root@zabbix-server ~]# yum install -y zabbix-java-gateway</span><br><span class="line"><span class="meta">#</span><span class="bash"> zabbix-java-gateway配置</span></span><br><span class="line">[root@zabbix-server ~]# vim /etc/zabbix/zabbix_java_gateway.conf </span><br><span class="line">17:LISTEN_PORT=10052</span><br><span class="line">27:PID_FILE="/var/run/zabbix/zabbix_java_gateway.pid"</span><br><span class="line"></span><br><span class="line">以上两步其实不是非要在server端操作，也可以在安装tomcat的服务器上操作。如果在tomcat机器上操作，以下的</span><br><span class="line">JavaGateway就不能写127.0.0.1，需要写安装tomcat的服务器的IP。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@zabbix-server ~]# vim /etc/zabbix/zabbix_server.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> JavaGate 客户端地址</span></span><br><span class="line">JavaGateway=127.0.0.1</span><br><span class="line"><span class="meta">#</span><span class="bash"> JavaGate 端口号</span></span><br><span class="line">JavaGatewayPort=10052</span><br><span class="line"><span class="meta">#</span><span class="bash"> JavaGate启动进程数</span></span><br><span class="line">StartJavaPollers=5</span><br><span class="line"></span><br><span class="line">[root@zabbix-server ~]# systemctl enable --now zabbix-java-gateway</span><br><span class="line">[root@zabbix-server ~]# systemctl restart zabbix_server</span><br><span class="line">[root@zabbix-server ~]# ls</span><br><span class="line">cmdline-jmxclient-0.10.3.jar</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@zabbix-server ~]# java -jar cmdline-jmxclient-0.10.3.jar  - 192.168.100.130:12345</span><br><span class="line">Catalina:port=8080,type=Mapper</span><br><span class="line">java.lang:type=Runtime</span><br><span class="line">java.lang:name=PS Scavenge,type=GarbageCollector</span><br><span class="line">Catalina:port=8009,type=Connector</span><br><span class="line">java.nio:name=mapped,type=BufferPool</span><br><span class="line">Catalina:name="http-bio-8080",type=GlobalRequestProcessor</span><br><span class="line">Catalina:host=localhost,name=AccessLogValve,type=Valve</span><br><span class="line">java.lang:name=Compressed Class Space,type=MemoryPool</span><br><span class="line">java.util.logging:type=Logging</span><br><span class="line">java.lang:type=Compilation</span><br><span class="line">Catalina:port=8009,type=Mapper</span><br><span class="line">JMImplementation:type=MBeanServerDelegate</span><br><span class="line">java.lang:type=ClassLoading</span><br><span class="line">com.sun.management:type=HotSpotDiagnostic</span><br><span class="line">Catalina:type=NamingResources</span><br><span class="line">java.lang:name=CodeCacheManager,type=MemoryManager</span><br><span class="line">Catalina:host=localhost,name=StandardHostValve,type=Valve</span><br><span class="line">Catalina:realmPath=/realm0/realm0,type=Realm</span><br><span class="line">Catalina:type=Service</span><br><span class="line">java.nio:name=direct,type=BufferPool</span><br><span class="line">Catalina:name="ajp-bio-8009",type=ThreadPool</span><br><span class="line">java.lang:name=PS MarkSweep,type=GarbageCollector</span><br><span class="line">com.sun.management:type=DiagnosticCommand</span><br><span class="line">java.lang:type=Memory</span><br><span class="line">Catalina:type=MBeanFactory</span><br><span class="line">Catalina:port=8080,type=ProtocolHandler</span><br><span class="line">java.lang:name=Metaspace,type=MemoryPool</span><br><span class="line">java.lang:name=PS Old Gen,type=MemoryPool</span><br><span class="line">Catalina:name=StandardEngineValve,type=Valve</span><br><span class="line">Catalina:name="ajp-bio-8009",type=GlobalRequestProcessor</span><br><span class="line">Catalina:port=8009,type=ProtocolHandler</span><br><span class="line">java.lang:type=Threading</span><br><span class="line">Catalina:realmPath=/realm0,type=Realm</span><br><span class="line">Catalina:name="http-bio-8080",type=ThreadPool</span><br><span class="line">java.lang:name=PS Eden Space,type=MemoryPool</span><br><span class="line">jdk.management.jfr:type=FlightRecorder</span><br><span class="line">Catalina:host=localhost,type=Deployer</span><br><span class="line">Catalina:class=org.apache.catalina.UserDatabase,name="UserDatabase",resourcetype=Global,type=Resource</span><br><span class="line">java.lang:name=PS Survivor Space,type=MemoryPool</span><br><span class="line">Catalina:type=Server</span><br><span class="line">Users:database=UserDatabase,type=UserDatabase</span><br><span class="line">java.lang:type=OperatingSystem</span><br><span class="line">Catalina:type=StringCache</span><br><span class="line">java.lang:name=Metaspace Manager,type=MemoryManager</span><br><span class="line">Catalina:port=8080,type=Connector</span><br><span class="line">java.lang:name=Code Cache,type=MemoryPool</span><br><span class="line">Catalina:host=localhost,name=ErrorReportValve,type=Valve</span><br><span class="line">Catalina:host=localhost,type=Host</span><br><span class="line">Catalina:type=Engine</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://l66stbz.github.io/tags/Linux/"/>
    
      <category term="Zabbix" scheme="https://l66stbz.github.io/tags/Zabbix/"/>
    
      <category term="Shell" scheme="https://l66stbz.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>企业级Zabbix监控平台</title>
    <link href="https://l66stbz.github.io/2024/08/23/%E4%BC%81%E4%B8%9A%E7%BA%A7Zabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/"/>
    <id>https://l66stbz.github.io/2024/08/23/%E4%BC%81%E4%B8%9A%E7%BA%A7Zabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/</id>
    <published>2024-08-23T13:50:00.000Z</published>
    <updated>2024-08-31T02:20:06.629Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="企业级Zabbix监控平台"><a href="#企业级Zabbix监控平台" class="headerlink" title="企业级Zabbix监控平台"></a>企业级Zabbix监控平台</h1><h2 id="1、监控的意义"><a href="#1、监控的意义" class="headerlink" title="1、监控的意义"></a>1、监控的意义</h2><ol><li><p><code>**保障业务稳定运行**</code>：监控系统通过实时关注与业务相关的<code>各项指标</code>，确保服务器、网络设备等硬件资源的正常运行，从而保障公司线上业务的稳定性。</p></li><li><p><code>**及时发现和解决问题**</code>：监控系统能够及时发现系统的异常和故障，通过<code>告警</code>管理迅速通知运维人员，以便尽快采取措施解决问题，减少潜在的损失。</p></li><li><p><strong>数据收集与分析</strong>：监控系统可以收集系统运行的各种数据，如性能数据、日志信息等，通过数据分析帮助管理者更好地理解系统运行状况，优化系统性能。</p></li><li><p><code>**预防故障**</code>：除了发现和解决已经发生的故障，监控系统还能够通过<code>历史数据</code>分析预测潜在的问题，提前采取预防措施，避免故障发生。</p></li></ol><h2 id="2、监控的对象"><a href="#2、监控的对象" class="headerlink" title="2、监控的对象"></a>2、监控的对象</h2><p>通常情况下，我们可以将监控对象这么来分：</p><ol><li><p><strong>服务器监控</strong>：主要监控服务器如：CPU 负载、内存使用率、磁盘使用率、登陆用户数、进程状态、网卡状态等。</p></li><li><p><strong>应用程序监控</strong>：主要监控该应用程序的服务状态，吞吐率和响应时间，因为不同应用需要监控的对象不同，这里不一一列举。</p></li><li><p><strong>数据库监控</strong>：只所以把数据库监控单独列出来，足以说明它的重要性，一般监控数据库状态，数据库表或者表空间的使用情况，是否有死锁，错误日志，性能信息等等。</p></li><li><p><strong>网络监控</strong>：主要监控当前的网络状况，网络流量，端口，连接等。</p></li></ol><p>举例：</p><p><strong>Nginx监控</strong>：Zabbix可以收集包括活跃连接数（active connections）、已接受的连接数（accepts）、已处理的请求总数（handled requests）等在内的关键性能指标。这些数据可以通过自定义脚本使用<code>awk</code>等工具从Nginx状态页中提取出来。</p><h2 id="3、常见监控软件：-夜莺监控-睿象云"><a href="#3、常见监控软件：-夜莺监控-睿象云" class="headerlink" title="3、常见监控软件： 夜莺监控 睿象云"></a>3、常见监控软件： 夜莺监控 睿象云</h2><ol><li><p>Nagios：Nagios是一款开源的监控工具，主要用于监控系统和网络的运行状态，它可以通过多种插件来监控不同的服务和应用。Nagios的特点是轻量级，配置复杂，但是功能强大。<br><img src="/2024/08/23/%E4%BC%81%E4%B8%9A%E7%BA%A7Zabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/image-20240425111948184.png" alt="img"> </p></li><li><p>Zabbix：Zabbix是一款更加强大的监控工具，它不仅可以监控系统和应用的运行状态，还可以进行分布式监控、容器监控、网络监控等。Zabbix的特点是功能强大，界面友好，同时支持多种插件和自定义脚本。 MySQL zabbix-proxy<br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240425112701820.png" alt="img"> </p></li><li><p>Prometheus：Prometheus是一款开源的监控和报警系统，它将所有监控数据保存为时间序列数据，并对这些数据进行高效的查询和聚合。Prometheus的特点是数据模型简单，强大的查询语言，以及可通过Pull模式获取监控数据。  grfana</p></li></ol><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20230524135314127.png" alt="img"></p><h2 id="4、Zabbix应用手册"><a href="#4、Zabbix应用手册" class="headerlink" title="4、Zabbix应用手册"></a>4、Zabbix应用手册</h2><h3 id="4-1-Zabbix介绍"><a href="#4-1-Zabbix介绍" class="headerlink" title="4.1 Zabbix介绍"></a>4.1 Zabbix介绍</h3><p>zabbix官方网站：<a href="https://www.zabbix.com/" target="_blank" rel="noopener">https://www.zabbix.com/</a></p><p>Zabbix是一款开源的监控软件，用于监控各种网络参数、服务器的健康状况以及应用程序的状态。它能够提供灵活的通知机制，允许用户在问题发生时立即得到通知</p><ol><li><p><code>**分布式监控**</code>：Zabbix支持<code>分布式监控</code>，可以轻松地从一台主机监控远程主机和服务。</p></li><li><p><code>**实时数据收集**</code>：Zabbix提供了<code>实时数据收集</code>和图形展示功能，使管理员能够快速了解系统状态并及时响应问题。</p></li><li><p><strong>灵活的告警机制</strong>：Zabbix具有灵活的告警机制，可以根据预设的条件触发告警，并通过多种方式（如邮件、短信）通知管理员。</p></li><li><p><code>**自动发现**</code>：Zabbix支持自动发现功能，可以自动检测网络中的设备和服务，简化了配置过程。</p></li><li><p><strong>模板化管理</strong>：Zabbix使用模板来简化监控项的配置，只需将模板应用于特定的主机或服务，就可以实现对多个对象的统一监控。</p></li><li><p><code>**Web界面**</code>：Zabbix提供了一个直观的Web界面，使管理员能够轻松查看监控数据、配置告警和管理系统设置。</p></li><li><p><strong>Agent和Agentless监控</strong>：Zabbix支持基于Agent的监控和无Agent的监控。基于Agent的监控需要在被监控的主机上安装Zabbix Agent，而无Agent的监控则通过SNMP、IPMI等协议收集数据。</p></li><li><p><strong>历史数据存储</strong>：Zabbix可以将历史数据存储在数据库中，以便进行长期趋势分析和报告生成。</p></li><li><p><code>**权限管理**</code>：Zabbix具有强大的权限管理功能，可以定义不同角色的用户，并赋予他们对特定资源的访问权限。</p></li></ol><h4 id="4-1-1-zabbix企业版选型"><a href="#4-1-1-zabbix企业版选型" class="headerlink" title="4.1.1 zabbix企业版选型"></a>4.1.1 zabbix企业版选型</h4><p>网站：<a href="https://www.zabbix.com/cn/life_cycle_and_release_policy" target="_blank" rel="noopener">Zabbix产品周期&amp;发布日志</a></p><p><strong>Zabbix LTS （长期支持版本）的生命周期</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/life_cycle_of_zabbix_lts_release.png" alt="img"></p><p><strong>Zabbix标准版本的生命周期</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/life_cycle_standard_release.svg" alt="img"></p><h3 id="4-2-zabbix架构图详解"><a href="#4-2-zabbix架构图详解" class="headerlink" title="4.2 zabbix架构图详解"></a>4.2 zabbix架构图详解</h3><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240424095830180.png" alt="img"></p><p><code>zabbix</code>是一个典型的C/S（客户端/服务端）架构。</p><p><strong>监控大致流程：</strong>zabbix-agent(客户端)获取监控数据，zabbix_server端(服务端)索要数据，然后数据会被存放至数据库，zabbix web展示所收集的监控数据。</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240425145214990.png" alt="img"></p><h4 id="4-2-1-zabbix-组件介绍"><a href="#4-2-1-zabbix-组件介绍" class="headerlink" title="4.2.1 zabbix 组件介绍"></a>4.2.1 zabbix 组件介绍</h4><ul><li><p><strong>Zabbix Server</strong>：Zabbix Server 是 Zabbix 的核心组件，是所有配置信息、统计信息和操作数据的核心存储器。 它主要负责接收客户端发送的报告和信息，同时，所有配置、统计数据及配置操作数据均由其组织进行。</p></li><li><p><strong>Zabbix Database Storage</strong>：主要用于存储数据，所有配置信息和 Zabbix 收集到的数据都被存储在数据库中。常用的存储设备有 MySQL、Oracle 等。</p></li><li><p><strong>Zabbix Web 界面：</strong>这是 Zabbix 提供的 GUI 接口，通常（但不一定）与 Zabbix Server 运行在同一台物理机器上。</p></li><li><p><strong>Zabbix Proxy 代理服务器：</strong>这是一个可选组件，常用于分布监控环境中，代理 Server 可以替 Zabbix Server 收集性能和可用性数据，汇总后统一发往 Zabbix Server 端。</p></li><li><p><strong>Zabbix Agent 监控代理：</strong> Zabbix Agent 部署在被监控主机上，能够主动监控本地资源和应用程序，并负责收集数据发往 Zabbix Server 端或 Zabbix Proxy 端。从 zabbix 5 版本开始，zabbix_agent 分为 zabbix_agent 和 zabbix_agent2，zabbix_agent2 是第二个 agent 版本，功能更加强大，采用 go 语言编写，支持 zabbix_agent 所有功能。使用 zabbix_agent2 可监控 docker 容器、ceph、mysql、oracle、 redis等。</p></li></ul><h4 id="4-2-2-zabbix-进程介绍"><a href="#4-2-2-zabbix-进程介绍" class="headerlink" title="4.2.2 zabbix 进程介绍"></a>4.2.2 zabbix 进程介绍</h4><p>​    根据功能和用途，默认情况下 zabbix 包含 5 个进程，分别是 zabbix_agentd/zabbix_agent2、zabbix_get、zabbix_proxy、zabbix_sender、zabbix_server，另外还有一个 zabbix_java_gateway 是可选的功能，需要另外安装。下面分别介绍下它们各自的作用。</p><ul><li><p><code>**zabbix_agentd/zabbix_agent2**</code>： zabbix_agentd/agent2 是 Zabbix Agent 监控代理端守护进程，此进程收集客户端数据，例如cpu 负载、内存、硬盘、网络使用情况等，推荐使用 zabbix_agent2。</p></li><li><p><code>**zabbix_get**</code>： zabbix 提供的一个工具，通常在 Zabbix server 或者 Zabbix proxy 端执行用来获取远程客户端信息，这其实是 Zabbix server 去 Zabbix Agent 端拉取数据的过程，此工具主要用来进行用户排错。例如在 Zabbix server 端获取不到客户端的监控数据时，可以使用 zabbix_get 命令测试获取客户端数据来做故障排查。</p></li><li><p><strong>zabbix_sender：</strong>zabbix 提供的一个工具，用于发送数据给 Zabbix server 或者 Zabbix proxy，这其实是 Zabbix Agent 端主动推送监控数据到 Zabbix Server 端的过程，通常用于耗时比较长的检查或者有大量主机（千台以上）需要监控的场景。此时通过主动推送数据到 Zabbix server，可以在很大程度上减轻 Zabbix server 的压力和负载。</p></li><li><p><strong>zabbix_proxy：</strong>Zabbix Proxy 的代理守护进程。功能类似 Zabbix server，唯一不同的是它只是一个中转站，它需要把收集到的数据提交或者被提交到 Zabbix server上。</p></li><li><p><strong>zabbix_java_gateway</strong>：Zabbix 2.0 之后引入的一个功能。顾名思义：Java 网关，主要用来监控 JAVA 应用环境，类似 zabbix_agentd 进程。需要特别注意的是，它只能主动去推送数据，而不能等待 zabbix server或者 zabbix proxy 来拉取数据。它的数据最终会给到 zabbix server 或者 zabbix proxy 上。</p></li><li><p><code>**zabbix_server**</code><strong>：</strong>Zabbix server 是整个 Zabbix 系统的核心进程。其它进程 zabbix_agentd、zabbix_get、zabbix_sender、zabbix_proxy、zabbix_java_gateway 的数据最终都是提交到 Zabbix server 来统一进行处理。</p></li><li><p><strong>zabbix web service：</strong>Zabbix web service 是一个用来连接外部网站服务的进程。</p></li></ul><h3 id="4-3-Zabbix-优点和不足"><a href="#4-3-Zabbix-优点和不足" class="headerlink" title="4.3 Zabbix 优点和不足"></a>4.3 Zabbix 优点和不足</h3><p><strong>优点：</strong></p><ol><li><p><strong>开源性</strong>：Zabbix作为一个开源工具，意味着用户可以免费使用，并且拥有对软件进行二次开发的灵活性。</p></li><li><p><strong>数据采集能力</strong>：它支持多种数据收集方式，包括agent、SNMP、JMX和telnet等，还支持主动和被动模式的数据传输。用户还可以自定义插件来收集数据，这提供了高度的灵活性和适应性。</p></li><li><p><strong>高可用性</strong>：Zabbix server对设备性能要求低，支持proxy分布式监控，这使得它能够适应不同规模和需求的监控环境。</p></li><li><p><strong>监控能力</strong>：Zabbix能够监控各种网络参数，并提供灵活的通知机制，帮助运维人员快速定位并解决存在的问题。</p></li><li><p><strong>模板丰富</strong>：Zabbix自带多种监控模板，这简化了新设备的监控配置过程，加快了部署速度。</p></li><li><p><strong>自动发现与全面监控</strong>：Zabbix支持自动发现网络中的设备和服务，这减少了手动配置的工作量，并确保了监控覆盖的全面性。</p></li><li><p><strong>报警处理</strong>：它可以针对报警默认进行固定操作，减少人为操作失误的风险，同时降低人员成本。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**缺点：**</span><br></pre></td></tr></table></figure><ul><li><p><strong>性能瓶颈</strong>：当机器数量增加时，数据量的增大会导致数据库写入成为瓶颈。Zabbix官方指出单机上限为5000台设备，超过这个数量就需要增加proxy来分担负载</p></li><li><p><strong>数据延迟问题</strong>：在采用主动模式即server pull方式采集数据时，如果目标机器数量庞大，则可能出现任务积压和数据延迟的问题。</p></li><li><p><strong>数据库压力</strong>：所有数据都存在数据库里, 产生的数据据很大,瓶颈主要在数据库。</p></li></ul><h3 id="4-4-Zabbix功能"><a href="#4-4-Zabbix功能" class="headerlink" title="4.4 Zabbix功能"></a>4.4 Zabbix功能</h3><p><a href="https://www.zabbix.com/documentation/5.0/manual/config/items" target="_blank" rel="noopener"><strong>数据采集</strong></a></p><ul><li><p>可用性和性能采集；</p></li><li><p>支持 SNMP（包括主动轮询和被动捕获）、IPMI、JMX、VMware 监控；</p></li><li><p>自定义检查；</p></li><li><p>按照自定义的时间间隔采集需要的数据；</p></li><li><p>通过 Server/Proxy 和 Agents 来执行数据采集。</p></li></ul><p><a href="https://www.zabbix.com/documentation/5.0/manual/config/triggers" target="_blank" rel="noopener"><strong>灵活的阈值定义</strong></a></p><ul><li>您可以定义非常灵活的告警阈值，称之为触发器，触发器从后端数据库获得参考值。</li></ul><p><a href="https://www.zabbix.com/documentation/5.0/manual/config/notifications" target="_blank" rel="noopener"><strong>高度可配置化的告警</strong></a></p><ul><li><p>可以根据递增计划、接收者、媒介类型自定义发送告警通知；</p></li><li><p>使用宏变量可以使告警通知变得更加高效有益；</p></li><li><p>自动动作包含远程命令。</p></li></ul><p><a href="https://www.zabbix.com/documentation/5.0/manual/config/visualization/graphs/simple" target="_blank" rel="noopener"><strong>实时图形</strong></a></p><ul><li>使用内置图形功能可实以将监控项绘制成图形。</li></ul><p><a href="https://www.zabbix.com/documentation/5.0/manual/web_monitoring" target="_blank" rel="noopener"><strong>Web 监控功能</strong></a></p><ul><li>Zabbix 可以追踪模拟鼠标在 Web 网站上的点击操作，来检查 Web 网站的功能和响应时间。</li></ul><p><a href="https://www.zabbix.com/documentation/5.0/manual/config/visualization" target="_blank" rel="noopener"><strong>丰富的可视化选项</strong></a></p><ul><li>能够创建可以将多个监控项组合到单个视图中的自定义图形；</li></ul><p><a href="https://www.zabbix.com/documentation/5.0/manual/installation/requirements#database_size" target="_blank" rel="noopener"><strong>历史数据存储</strong></a></p><ul><li><p>存储在数据库中的数据；</p></li><li><p>可配置的历史数据；</p></li><li><p>内置数据管理机制（housekeeping）。</p></li></ul><p><a href="https://www.zabbix.com/documentation/5.0/manual/config/hosts" target="_blank" rel="noopener"><strong>配置简单</strong></a></p><ul><li><p>将被监控设备添加为主机；</p></li><li><p>主机一旦添加到数据库中，就会采集主机数据用于监控；</p></li><li><p>将模板用于监控设备。</p></li></ul><p><a href="https://www.zabbix.com/documentation/5.0/manual/config/templates" target="_blank" rel="noopener"><strong>套用模板</strong></a></p><ul><li><p>在模板中分组检查；</p></li><li><p>模板可以关联其他模板，获得继承。</p></li></ul><p><a href="https://www.zabbix.com/documentation/5.0/manual/discovery" target="_blank" rel="noopener"><strong>网络发现</strong></a></p><ul><li><p>自动发现网络设备；</p></li><li><p>Zabbix Agent 发现设备后自动注册；</p></li></ul><p><a href="https://www.zabbix.com/documentation/5.0/manual/web_interface" target="_blank" rel="noopener"><strong>快捷的 Web 界面</strong></a></p><ul><li><p>基于 PHP 的 Web 前端；</p></li><li><p>可以从任何地方访问；</p></li><li><p>您可以定制自己的操作方式；</p></li><li><p>审计日志。</p></li></ul><p><a href="https://www.zabbix.com/documentation/5.0/manual/api" target="_blank" rel="noopener"><strong>Zabbix API</strong></a></p><ul><li>Zabbix API 为 Zabbix 提供可编程接口，用于批量操作、第三方软件集成和其他用途。</li></ul><p><a href="https://www.zabbix.com/documentation/5.0/manual/distributed_monitoring" target="_blank" rel="noopener"><strong>适应更复杂的环境</strong></a></p><ul><li>使用 Zabbix Proxy 代理，可以轻松实现分布式远程监控。</li></ul><h3 id="4-5-zabbix-监控数据流程"><a href="#4-5-zabbix-监控数据流程" class="headerlink" title="4.5 zabbix 监控数据流程"></a>4.5 zabbix 监控数据流程</h3><p>​    首先，为了创建一个采集数据的<code>监控项</code>，您就必须先<code>创建主机</code>。其次，必须有一个监控项，然后创建触发器。最后，您必须有一个触发器来触发一个动作，这几个点构成了一个完整的数据流。因此，如果您想要收到 CPU load it too high on <em>Server X</em> 的告警，您必须首先为 <em>Server X</em> 创建一个主机条目，其次创建一个用于监视其 CPU 的监控项，最后创建一个触发器，用来触发 CPU is too high 这个动作，并将其发送到您的邮箱里。虽然这些步骤看起来很繁琐，但是使用模板的话，其实并不复杂。也正是由于这种设计，使得 Zabbix 的配置变得更加灵活易用。</p><h4 id="4-5-1-Zabbix-核心概念"><a href="#4-5-1-Zabbix-核心概念" class="headerlink" title="4.5.1 Zabbix 核心概念"></a>4.5.1 Zabbix 核心概念</h4><p><img src="/2024/08/23/%E4%BC%81%E4%B8%9A%E7%BA%A7Zabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/1593259517290.png%23id=cpWNQ&originHeight=530&originWidth=786&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt="img"></p><p><strong>主机（host）</strong></p><p>你想要监控的联网设备，有IP/DNS。</p><p><a href="https://www.zabbix.com/documentation/5.0/manual/config/hosts" target="_blank" rel="noopener"><strong><em>主机组（host group)</em></strong></a></p><p>主机的逻辑组；可能包含主机和模板。一个主机组里的主机和模板之间并没有任何直接的关联。通常在给不同用户组的主机分配权限时候使用主机组。</p><p><a href="https://www.zabbix.com/documentation/5.0/manual/config/items" target="_blank" rel="noopener"><strong><em>监控项（item）</em></strong></a></p><p>你想要接收的主机的特定数据，一个度量/指标数据。</p><p><a href="https://www.zabbix.com/documentation/5.0/manual/config/items/item#item_value_preprocessing" target="_blank" rel="noopener"><strong><em>值预处理（value preprocessing）</em></strong></a></p><p>转化/预处理接收到的指标数据* 存入数据库之前</p><p><a href="https://www.zabbix.com/documentation/5.0/manual/config/triggers" target="_blank" rel="noopener">触发器（trigger）</a></p><p>一个被用于定义问题阈值和“评估”监控项接收到的数据的逻辑表达式</p><p>当接收到的数据高于阈值时，触发器从“OK”变成“Problem”状态。当接收到的数据低于阈值时，触发器保留/返回“OK”的状态。</p><p><a href="https://www.zabbix.com/documentation/5.0/manual/config/events" target="_blank" rel="noopener"><strong><em>事件（event）</em></strong></a></p><p>一次发生的需要注意的事情，例如触发器状态改变、发现/监控代理自动注册</p><p><a href="https://www.zabbix.com/documentation/5.0/manual/config/triggers/event_tags" target="_blank" rel="noopener"><strong><em>事件标签（event tag）</em></strong></a></p><p>提前设置的事件标记*可以被用于事件关联，权限细化设置等。</p><p><a href="https://www.zabbix.com/documentation/5.0/manual/config/event_correlation" target="_blank" rel="noopener"><strong><em>事件关联（event correlation）</em></strong></a></p><p>自动灵活的、精确的关联问题和解决方案</p><p>比如说，你可以定义触发器A告警的异常可以由触发器B解决，触发器B可能采用完全不同的数据采集方式。</p><p><a href="https://www.zabbix.com/documentation/5.0/manual/web_interface/frontend_sections/monitoring/problems" target="_blank" rel="noopener"><strong><em>异常（problems）</em></strong></a></p><p>一个处在“异常”状态的触发器</p><p><a href="https://www.zabbix.com/documentation/5.0/manual/acknowledges#updating_problems" target="_blank" rel="noopener"><strong><em>异常更新（problem update）</em></strong></a></p><p>Zabbix提供的问题管理选项，例如添加评论、确认异常、改变问题级别或者手动关闭等。</p><p><a href="https://www.zabbix.com/documentation/5.0/manual/config/notifications/action" target="_blank" rel="noopener"><strong><em>动作（action）</em></strong></a></p><p>预先定义的应对事件的操作</p><p>一个动作由操作(例如发出通知)和条件(什么时间进行操作)组成</p><p><a href="https://www.zabbix.com/documentation/5.0/manual/config/notifications/action/escalations" target="_blank" rel="noopener"><strong><em>升级（escalation）</em></strong></a></p><p>一个在动作内执行操作的自定义方式; 发送通知/执行远程命令的顺序安排。</p><p><a href="https://www.zabbix.com/documentation/5.0/manual/config/notifications/media" target="_blank" rel="noopener"><strong><em>报警媒介（media）</em></strong></a></p><p>发送告警通知的方式；传送途径</p><p><a href="https://www.zabbix.com/documentation/5.0/manual/config/notifications/action/operation/message" target="_blank" rel="noopener"><strong><em>通知（notification）</em></strong></a></p><p>关于事件的信心，将通过选设定的媒介途径发送给用户。</p><p><a href="https://www.zabbix.com/documentation/5.0/manual/config/notifications/action/operation/remote_command" target="_blank" rel="noopener"><strong><em>远程命令（remote command）</em></strong></a></p><p>一个预定义好的，满足特定条件的情况下，可以在被监控主机上自动执行的命令。</p><p><a href="https://www.zabbix.com/documentation/5.0/manual/config/templates" target="_blank" rel="noopener"><strong><em>模版（template）</em></strong></a></p><p>一组可以被应用到一个或多个主机上的实体（监控项，触发器，图形，聚合图形，应用，LLD，Web场景）的集合</p><p>模版的应用使得主机上的监控任务部署快捷方便；也可以使监控任务的批量修改更加简单。模版是直接关联到每台单独的主机上。</p><p><a href="https://www.zabbix.com/documentation/5.0/manual/config/items/applications" target="_blank" rel="noopener"><strong><em>应用（application）</em></strong></a></p><p>一组监控项组成的逻辑分组</p><p><a href="https://www.zabbix.com/documentation/5.0/manual/web_monitoring" target="_blank" rel="noopener"><strong><em>Web场景（web scenario）</em></strong></a></p><p>检查网站可浏览性的一个或多个HTTP请求</p><p><a href="https://www.zabbix.com/documentation/5.0/manual/introduction/overview#architecture" target="_blank" rel="noopener"><strong><em>前端（frontend)</em></strong></a></p><p>Zabbix提供的web界面</p><p><a href="https://www.zabbix.com/documentation/5.0/manual/api" target="_blank" rel="noopener"><strong><em>Zabbix API</em></strong></a></p><ul><li><em>Zabbix API允许用户使用JSON RPC协议来创建、更新和获取Zabbix对象（如主机、监控项、图形和其他）信息或者执行任何其他的自定义的任务</em></li></ul><p><a href="https://www.zabbix.com/documentation/5.0/manual/concepts/server" target="_blank" rel="noopener"><strong><em>Zabbix server</em></strong></a></p><p>Zabbix监控的核心程序，主要功能是与Zabbix proxies和Agents进行交互、触发器计算、发送告警通知；并将数据集中保存等</p><p><a href="https://www.zabbix.com/documentation/5.0/manual/concepts/agent" target="_blank" rel="noopener"><strong><em>Zabbix agent</em></strong></a></p><p>部署在监控对象上的，能够主动监控本地资源和应用的程序</p><p><a href="https://www.zabbix.com/documentation/5.0/manual/concepts/proxy" target="_blank" rel="noopener"><strong><em>Zabbix proxy</em></strong></a></p><p>一个帮助Zabbix Server收集数据，分担Zabbix Server的负载的程序</p><p><a href="https://www.zabbix.com/documentation/5.0/manual/encryption" target="_blank" rel="noopener"><strong><em>加密（encryption）</em></strong></a></p><p>支持Zabbix组建之间的加密通讯(server, proxy, agent, zabbix_sender 和 zabbix_get 程序)使用TLS（Transport Layer Security ）协议。</p><h3 id="5、Zabbix-常用监控架构"><a href="#5、Zabbix-常用监控架构" class="headerlink" title="5、Zabbix 常用监控架构"></a>5、Zabbix 常用监控架构</h3><ol><li>分布式监控 (企业常用) server-proxy-agent</li></ol><p><img src="/2024/08/23/%E4%BC%81%E4%B8%9A%E7%BA%A7Zabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/image-20210609232741617.png%23id=VOMdd&originHeight=763&originWidth=837&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt="img"></p><ol><li>server-anget(点对点监控)</li></ol><p><img src="/2024/08/23/%E4%BC%81%E4%B8%9A%E7%BA%A7Zabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/image-20210609232940841.png%23id=xN38z&originHeight=599&originWidth=1033&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt="img"></p><p><strong>监控报警流程图：</strong></p><p><img src="/2024/08/23/%E4%BC%81%E4%B8%9A%E7%BA%A7Zabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/1593259525914.png%23id=BFcJX&originHeight=397&originWidth=719&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt="img"></p><h3 id="6、Zabbix-监控系统监控对象"><a href="#6、Zabbix-监控系统监控对象" class="headerlink" title="6、Zabbix 监控系统监控对象"></a>6、Zabbix 监控系统监控对象</h3><ul><li><p>数据库：  MySQL,MariaDB,Oracle,SQL Server    agent</p></li><li><p>应用软件：Nginx,Apache,PHP,Tomcat           agent</p></li></ul><hr><ul><li><p>集群：    LVS,Keepalived,HAproxy,RHCS,F5     agent</p></li><li><p>虚拟化：  VMware,KVM,XEN ,docker,k8s        agent</p></li><li><p>操作系统：Linux,Unix,Windows性能参数       agent</p></li></ul><hr><ul><li><p>硬件： 服务器，存储，网络设备                IPMI</p></li><li><p>网络： 网络环境（内网环境，外网环境）        SNMP</p></li></ul><hr><h4 id="6-1-Zabbix监控方式"><a href="#6-1-Zabbix监控方式" class="headerlink" title="6.1 Zabbix监控方式"></a>6.1 Zabbix监控方式</h4><p><strong>被动模式</strong></p><ul><li>被动检测： <strong>server向agent请求获取配置的各监控项相关的数据</strong>，agent接收请求、获取数据并响应给server； 适合对时效性要求较高的监控项，因为服务器可以随时请求数据。  </li></ul><p><strong>主动模式</strong></p><ul><li>主动检测：<strong>agent向server请求与自己相关监控项配置</strong>，主动地将server配置的监控项相关的数据发送给server； 减少Zabbix服务器的负载，特别是在大量监控项时，避免了服务器对每个监控项进行轮询。主动监控能极大节约监控server的资源。</li></ul><h3 id="7、安装和配置-Zabbix-服务"><a href="#7、安装和配置-Zabbix-服务" class="headerlink" title="7、安装和配置 Zabbix 服务"></a>7、安装和配置 Zabbix 服务</h3><p>服务器配置要求：<a href="https://www.zabbix.com/documentation/6.0/zh/manual/installation/requirements" target="_blank" rel="noopener">2 安装要求 (zabbix.com)</a></p><h4 id="7-1-实验准备"><a href="#7-1-实验准备" class="headerlink" title="7.1 实验准备"></a>7.1 实验准备</h4><p>Centos7.9 系统服务器3台、 一台作为监控服务器， 两台台作为被监控节点， 配置好yum源、 防火墙关闭、 各节点时钟服务同步、 各节点之间可以通过主机名互相通信。</p><p><strong>1. 所有机器关闭防火墙和selinux</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ setenforing 0 </span><br><span class="line">$ sed -i <span class="string">'s/SELINUX=enforcing/SELINUX=disabled/'</span> /etc/selinux/config </span><br><span class="line">$ systemctl <span class="built_in">disable</span> --now firewalld.service</span><br></pre></td></tr></table></figure><p><strong>2. 根据架构图，实验基本设置如下：</strong></p><table><thead><tr><th>机器名称</th><th>IP配置</th><th>服务角色</th><th>备注</th></tr></thead><tbody><tr><td>zabbix-server</td><td>192.168.153.147</td><td>zabbix-server</td><td>开启</td></tr><tr><td>zabbix-node1</td><td>192.168.153.178</td><td>zabbix-agent-node1</td><td>开启</td></tr><tr><td>zabbix-node2</td><td>192.168.153.179</td><td>zabbix-agent-node2</td><td>开启</td></tr></tbody></table><h4 id="7-2-安装-Zabbix-server端"><a href="#7-2-安装-Zabbix-server端" class="headerlink" title="7.2 安装 Zabbix-server端"></a>7.2 安装 Zabbix-server端</h4><p><strong>安装NGINX</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># vim /etc/yum.repos.d/nginx.repo</span></span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># yum install -y nginx</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># systemctl enable --now nginx</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># systemctl status nginx</span></span><br></pre></td></tr></table></figure><p><strong>安装PHP</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装epel源</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># wget -O /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装webtatic 扩展源，安装PHP服务时需要</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># yum install -y https://mirror.webtatic.com/yum/el7/epel-release.rpm</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># yum install -y https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装PHP服务</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># yum install php72w-cli php72w-fpm php72w-gd php72w-mbstring php72w-bcmath php72w-xml php72w-ldap php72w-mysqlnd -y</span></span><br></pre></td></tr></table></figure><p><strong>修改nginx配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server ~]<span class="comment"># vim /etc/nginx/conf.d/zabbix.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name localhost;</span><br><span class="line">  root /app/zabbix;</span><br><span class="line">  location / &#123;</span><br><span class="line">    index index.php;</span><br><span class="line">  &#125;</span><br><span class="line"> location ~ \.php$ &#123;</span><br><span class="line">   fastcgi_pass  127.0.0.1:9000;</span><br><span class="line">   fastcgi_index index.php; </span><br><span class="line">   fastcgi_param SCRIPT_FILENAME   <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">   include fastcgi_params;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 参数解释：</span></span><br><span class="line">  <span class="variable">$document_root</span>是Nginx的根目录（这里为 /app/zabbix），</span><br><span class="line">  <span class="variable">$fastcgi_script_name</span> 是请求的脚本路径和文件名。该指令将这两个变量组合，构成完整的 PHP 文件路径供 PHP-FPM 使用。例如，如果请求 /index.php，那么 SCRIPT_FILENAME 将是 /app/zabbix/index.php。</span><br><span class="line"><span class="comment"># 创建站点目录</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># mkdir /app/zabbix  -p</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查配置文件是否正确</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># nginx -t</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载nginx配置文件</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># systemcreload nginx</span></span><br></pre></td></tr></table></figure><p><strong>修改PHP的服务的启动用户和用户组</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进行替换</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># sed -ri  '/^(user|group)/s#apache#nginx#g' /etc/php-fpm.d/www.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行检查</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># egrep '^(user|group)' /etc/php-fpm.d/www.conf</span></span><br><span class="line">user = nginx</span><br><span class="line">group = nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试文件</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># vim /app/zabbix/info.php</span></span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># systemctl enable --now php-fpm</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># systemctl status php-fpm</span></span><br></pre></td></tr></table></figure><p><strong>数据库部署</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加数据库源</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># vim  /etc/yum.repos.d/mariadb.repo</span></span><br><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line">baseurl = http://mirrors.aliyun.com/mariadb/yum/10.5/centos7-amd64/</span><br><span class="line">gpgkey = http://mirrors.aliyun.com/mariadb/yum/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck = 1</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装数据库</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># yum install -y mariadb-server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否安装成功</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># rpm -qa | grep -i mariadb</span></span><br><span class="line">MariaDB-compat-10.5.24-1.el7.centos.x86_64</span><br><span class="line">MariaDB-client-10.5.24-1.el7.centos.x86_64</span><br><span class="line">MariaDB-server-10.5.24-1.el7.centos.x86_64</span><br><span class="line">MariaDB-common-10.5.24-1.el7.centos.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动数据库</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># systemctl enable --now mariadb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库基本设置</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># mysql_secure_installation</span></span><br><span class="line">mysql_secure_installation是一个用于设置MySQL服务器安全选项的脚本。它可以帮助你设置root密码、删除匿名用户、禁止远程root登录等，以提高MySQL服务器的安全性。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建zabbix用户及数据库</span></span><br><span class="line">mysql&gt; create database zabbix charset utf8 collate utf8_bin;</span><br><span class="line"><span class="comment">#创建zabbix用户</span></span><br><span class="line">mysql&gt; grant all on zabbix.* to <span class="string">'zabbix'</span>@<span class="string">'localhost'</span> identified by <span class="string">'zabbix'</span>; </span><br><span class="line"><span class="comment"># 如果数据库与zbx,php不在一起</span></span><br><span class="line"><span class="comment"># grant all on zabbix.* to 'zabbix'@'172.16.1.%' identified by 'zabbix' ;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新权限</span></span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><p><strong>zabbix server 配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压安装包</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># tar xf zabbix-6.0.26.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换目录</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># cd zabbix-6.0.26/database/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入zabbix 相关数据和表结构</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># mysql -uroot -pabc123  zabbix &lt; schema.sql </span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># mysql -uroot -pabc123  zabbix &lt; images.sql </span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># mysql -uroot -pabc123  zabbix &lt; data.sql </span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># mysql -uroot -pabc123  zabbix &lt; double.sql </span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># mysql -uroot -pabc123  zabbix &lt; history_pk_prepare.sql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sql文件解释</span></span><br><span class="line">  schema.sql 文件通常包含数据库的表结构定义。它会创建 Zabbix 所需的所有数据库表、视图、索引等。</span><br><span class="line">  images.sql 文件用于导入 Zabbix 系统内置的图片和图标，这些图片通常用于仪表板、监控界面和报告生成中。</span><br><span class="line">  data.sql 文件用于导入 Zabbix 的初始数据，包含一些默认的配置、模板、预定义的监控项等。</span><br><span class="line">  double.sql 调整数据表的存储类型或修改数据结构。以支持更精确的数据存储（如历史数据或监控值）。</span><br><span class="line">  history_pk_prepare.sql 用于准备历史数据的主键设置。Zabbix系统会记录大量的历史数据，此文件可能用于优化历史数据表的主键和索引，以提高查询性能。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装编译需要的基础环境</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># yum install -y mysql-devel pcre-devel openssl-devel zlib-devel libxml2-devel net-snmp-devel  net-snmp libssh2-devel OpenIPMI-devel libevent-devel openldap-devel   libcurl-devel gcc gcc-c++</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译安装zabbix 6.0</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># cd zabbix-6.0.26</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># ./configure --sysconfdir=/etc/zabbix/ --enable-server --with-mysql --with-net-snmp --with-libxml2 --with-ssh2 --with-openipmi --with-zlib --with-libpthread --with-libevent --with-openssl --with-ldap --with-libcurl --with-libpcre</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译安装zabbix server</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># make install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否安装成功</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># echo $?</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># zabbix_server --version</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写 zabbix server systemd启动配置文件</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># cat /usr/lib/systemd/system/zabbix_server.service</span></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Zabbix Server with MySQL DB</span><br><span class="line">After=syslog.target network.target mysqld.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line"></span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/sbin/zabbix_server -f</span><br><span class="line">User=zabbix</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载systemd启动文件</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># systemctl daemon-reload</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加zabbix用户</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># useradd -s /sbin/nologin  zabbix</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改zabbix_server配置文件连接数据库地址</span></span><br><span class="line">[root@zabbix-server zabbix-6.0.26]<span class="comment"># egrep  -n -i "^DB" /etc/zabbix/zabbix_server.conf</span></span><br><span class="line">87:DBHost=localhost</span><br><span class="line">99:DBName=zabbix</span><br><span class="line">115:DBUser=zabbix</span><br><span class="line">124:DBPassword=zabbix</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动并且检查 zabbix server </span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># systemctl enable --now  zabbix_server</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># systemctl status zabbix_server</span></span><br></pre></td></tr></table></figure><p><strong>部署前端代码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换前端代码目录</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># cd zabbix-6.0.26</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝前端代码</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># cp -r ui/* /app/zabbix/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改属主和数组</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># chown -R nginx.nginx /app/zabbix/</span></span><br></pre></td></tr></table></figure><h4 id="7-3-测试访问"><a href="#7-3-测试访问" class="headerlink" title="7.3 测试访问"></a>7.3 测试访问</h4><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240425165826345.png" alt="img"></p><p>游览器输入： <a href="http://zabbix.tanke.love" target="_blank" rel="noopener">http://zabbix.tanke.love</a></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240425165908837.png" alt="img"></p><p><strong>修改php配置文件，解决报错：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改配置文件参数</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># egrep -n '^(max_.*_time|post_max)'   /etc/php.ini</span></span><br><span class="line">/etc/php.ini:368:max_execution_time = 300  <span class="comment"># 设置 PHP 脚本的最大执行时间，防止 PHP 脚本运行时间过长而导致服务器资源耗尽或阻塞。</span></span><br><span class="line">/etc/php.ini:378:max_input_time = 300  <span class="comment"># 设置 PHP 脚本解析输入数据（例如 POST 和 GET 数据、文件上传等）的最大时间，单位为 秒。这个时间限制只影响解析输入数据的时间，而不影响脚本的整体执行时间。</span></span><br><span class="line">/etc/php.ini:656:post_max_size = 80M  <span class="comment"># 设置 PHP 表单提交（POST 请求）允许的最大数据大小，包括文件上传、表单数据等。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新启动 PHP</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># systemctl restart php-fpm</span></span><br></pre></td></tr></table></figure><p><strong>修改时区</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240425170026975.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240425170039723.png" alt="img"></p><p>文件位置：<code>/app/code/zbx/conf/zabbix.conf.php</code></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240425170059876.png" alt="img"></p><p><strong>用户名：Admin<br>**</strong>密码：zabbix**</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240425170123419.png" alt="img"></p><p><strong>此故障表示没有安装zabbix-agnet或者客户端宕机</strong></p><p><strong>zabbix server 自我测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装zabbix-agent安装源</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># rpm -Uvh https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/6.0/rhel/7/x86_64/zabbix-release-6.0-1.el7.noarch.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装zabbix-agent2 </span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># yum install -y zabbix-agent2.x86_64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改zabbix-agent2 配置文件参数</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># grep '^[a-Z]' /etc/zabbix/zabbix_agent2.conf</span></span><br><span class="line">PidFile=/run/zabbix/zabbix_agent2.pid</span><br><span class="line">LogFile=/var/<span class="built_in">log</span>/zabbix/zabbix_agent2.log</span><br><span class="line">LogFileSize=0 <span class="comment"># 指定日志文件的最大大小。默认不限制</span></span><br><span class="line">Server=127.0.0.1  <span class="comment"># zabbix-server所在的主机IP，被动模式</span></span><br><span class="line">ServerActive=127.0.0.1 <span class="comment"># zabbix-server所在的主机IP,主动模式</span></span><br><span class="line">Hostname=Zabbix server  <span class="comment"># 指定 Zabbix Agent 运行所在的主机名称</span></span><br><span class="line">Include=/etc/zabbix/zabbix_agent2.d/*.conf  <span class="comment"># 自定义监控项配置路径 </span></span><br><span class="line">Include=./zabbix_agent2.d/plugins.d/*.conf  <span class="comment"># 自带插件路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动zabbix-agent2</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># systemctl enable --now zabbix-agent2</span></span><br></pre></td></tr></table></figure><p><strong>再次访问web界面</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240425170504277.png" alt="img"></p><h4 id="7-4-zabbix-主机图形乱码解决"><a href="#7-4-zabbix-主机图形乱码解决" class="headerlink" title="7.4 zabbix 主机图形乱码解决"></a>7.4 zabbix 主机图形乱码解决</h4><p>原因：zabbix显示中文的字体有问题，导致显示中文异常。<br>解决：把zabbix中文字体替换即可。</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240425174855188.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240425174925105.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换值zabbix 字体目录</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># cd /app/zabbix/assets/fonts/</span></span><br><span class="line">[root@zabbix-server fonts]<span class="comment"># ls</span></span><br><span class="line">DejaVuSans.ttf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份原有字体</span></span><br><span class="line">[root@zabbix-server fonts]<span class="comment"># cp DejaVuSans.ttf&#123;,.bak&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加新的字体</span></span><br><span class="line">[root@zabbix-server fonts]<span class="comment"># ls msyh.ttc   </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名新字体，不需要重新启动nginx</span></span><br><span class="line">[root@zabbix-server fonts]<span class="comment"># mv msyh.ttc DejaVuSans.ttf</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240425175627776.png" alt="img"></p><p><strong>注意：修改成新的字体后，但是仍然有些许字段没有改变，生产环境建议使用英文版的。</strong></p><h3 id="8、配置文件详解"><a href="#8、配置文件详解" class="headerlink" title="8、配置文件详解"></a>8、配置文件详解</h3><p><strong>zabbix_server主配置文件详解</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server ~]<span class="comment"># grep "^[a-Z]" /etc/zabbix/zabbix_server.conf</span></span><br><span class="line">ListenPort=10051  <span class="comment"># Zabbix服务器监听的端口号，默认为10051</span></span><br><span class="line">LogFile=/tmp/zabbix_server.log  <span class="comment"># Zabbix服务器日志文件的路径</span></span><br><span class="line">DBHost=localhost  <span class="comment"># Zabbix服务器连接的数据库主机地址</span></span><br><span class="line">DBName=zabbix  <span class="comment"># Zabbix服务器连接的数据库名称</span></span><br><span class="line">DBUser=zabbix  <span class="comment"># Zabbix服务器连接的数据库用户名</span></span><br><span class="line">DBPassword=zabbix  <span class="comment"># Zabbix服务器连接的数据库密码</span></span><br><span class="line">Timeout=4  <span class="comment"># Zabbix服务器的超时时间</span></span><br><span class="line">AlertScriptsPath=<span class="variable">$&#123;datadir&#125;</span>/zabbix/alertscripts  <span class="comment"># Zabbix服务器报警脚本的存放路径</span></span><br><span class="line">LogSlowQueries=3000   <span class="comment"># 记录慢查询日志的阈值时间</span></span><br></pre></td></tr></table></figure><h3 id="9、zabbix-agent版本差异解释-了解"><a href="#9、zabbix-agent版本差异解释-了解" class="headerlink" title="9、zabbix agent版本差异解释(了解)"></a>9、zabbix agent版本差异解释(了解)</h3><p><strong>zabbix-agent</strong>：</p><ul><li>C语言开发，基于传统的单线程设计，使用单个进程来处理所有的数据收集。</li></ul><p><strong>zabbix-agent2：</strong></p><ul><li>GO语言和C语言混合开发，基于多线程设计，采用了更先进的异步架构，能够更高效地处理并发请求和大量数据。</li></ul><h3 id="10、监控任意主机"><a href="#10、监控任意主机" class="headerlink" title="10、监控任意主机"></a>10、监控任意主机</h3><p>监控步骤：</p><ul><li><p>被监控端安装客户端工具，并修改配置文件中，server端的主机IP地址。</p></li><li><p>启动客户端工具，并且查看服务是否正常启动。<code>(ps netstat)</code></p></li><li><p>服务端 web界面进行配置。</p></li></ul><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240426113359441.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240426114257355.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240426114606918.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240426141751419.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240426142031899.png" alt="img"></p><h4 id="10-1-快速添加新的主机"><a href="#10-1-快速添加新的主机" class="headerlink" title="10.1 快速添加新的主机"></a>10.1 快速添加新的主机</h4><ul><li><p>被监控端安装客户端工具zabbix-agent</p></li><li><p>通过web界面配置过的被监控主机进行克隆。</p></li></ul><p><strong>流程图如下：</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240426154530806.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240426154553230.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240426154755301.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240426154922536.png" alt="img"></p><h3 id="11、主机群组使用"><a href="#11、主机群组使用" class="headerlink" title="11、主机群组使用"></a>11、主机群组使用</h3><p>​    将多个<strong>相同服务</strong>的主机，归纳一个主机群组，该主机群组可针对服务设定相同的监控项或者自定义监控项，比如多个nginx，他们所监控的指标一致，可以为它们专门创建一个主机群组，例如web-servers。实现统一，方便后期管理。</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240504215946168.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240504220029956.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240504220102197.png" alt="img"></p><h3 id="12、自定义监控模版"><a href="#12、自定义监控模版" class="headerlink" title="12、自定义监控模版"></a>12、自定义监控模版</h3><h4 id="12-1-boot分区剩余容量监控"><a href="#12-1-boot分区剩余容量监控" class="headerlink" title="12.1 boot分区剩余容量监控"></a>12.1 boot分区剩余容量监控</h4><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240504220350681.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240504220410594.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240504220517123.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240504220609638.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240504222123795.png" alt="img"></p><p>vfs.fs.size[fs,<mode>] 用于查询或设置虚拟文件系统 (VFS) 中的文件系统（<code>fs</code>）的大小。<code>&lt;mode&gt;</code> 参数指定了如何计算和显示文件系统的大小。  </mode></p><ul><li><p><code>fs</code> 是文件系统的具体实例。一个具体的挂载点，如 <code>/home</code> 或者 <code>/boot等等；</code></p></li><li><p><code>&lt;mode&gt;</code> 参数决定了如何计算文件系统的大小。通常，以下是一些常见的模式：</p></li><li><ul><li>total: 返回文件系统的总大小，包括所有已使用的和未使用的空间。</li><li>used: 返回文件系统中已经使用的空间大小。</li><li>free: 返回文件系统中剩余的可用空间大小。</li><li>available: 返回文件系统中可以分配给普通用户的空间。  </li></ul></li></ul><ul><li><p><strong>历史数据</strong>和<strong>趋势数据</strong>是Zabbix中存储收集到的数据两种方式：</p></li><li><p><strong>历史数据是指Zabbix系统针对每个监控项目在每次采集时所收集到的数据，这个数据保存在Zabbix系统数据库的历史表中。</strong>因为每次采集到的数据都保存在历史表中，所以如果监控项目的更新间隔越小，则在固定时间内保存到历史表中的数据就越多。例如，如果每个监控项目的更新间隔是30秒，那么两个小时该监控项目在Zabbix数据库的历史表中就会产生240条记录，一天就会产生2880条记录。虽然对于只监控一个项目或少量项目的系统来说，这些记录可能并不显著，但对于监控大量项目或需要长时间保存数据的系统来说，历史数据可能会占用大量的存储空间，并对数据库造成较大的负载压力。常见的历史数据表如下：</p></li><li><ul><li><code>**history**</code> <strong>表</strong>：用于存放整数类型的数据，例如 CPU 使用率（以百分比表示）。</li><li><code>**history_uint**</code> <strong>表</strong>：用于存放无符号整数类型的数据，适合存储不会出现负值的监控数据。</li><li><code>**history_str**</code> <strong>表</strong>：用于存放字符串类型的数据，例如日志信息或其他文本类型的监控项。</li><li><code>**history_text**</code> <strong>表</strong>：用于存放长文本数据，适合存储大量文本数据（例如完整的日志行）。</li><li><code>**history_log**</code> <strong>表</strong>：专门用于存储日志文件的监控数据。</li><li>每个表的字段通常包括 <code>itemid</code>、<code>clock</code>、<code>value</code>、<code>ns</code> 等：</li></ul></li><li><ul><li><ul><li><code>itemid</code>：监控项的唯一标识符。</li><li><code>clock</code>：时间戳，记录数据采集的具体时间（以秒为单位）。</li><li><code>value</code>：具体的监控项值。</li><li><code>ns</code>：纳秒级的时间戳，确保数据在同一秒内的精确排序。</li></ul></li></ul></li></ul><ul><li><p>趋势数据则是<strong>按小时统计计算后的平均数据</strong>，它是一种Zabbix内建的历史数据压缩机制。趋势数据可以用来存储数字类型监控项的每小时的最小值、最大值、平均值和记录数量。由于趋势数据是计算后的汇总数据，因此其数量相对于历史数据要少得多，同时其保存的时间通常也比历史数据要长。趋势数据通常用于生成图表或报告，以便用户能够更直观地了解监控项目的长期趋势和变化。常见的表如下：</p></li><li><ul><li><code>**trends**</code> 表：用于存储整数类型的数据的趋势。</li><li><code>**trends_uint**</code> 表：用于存储无符号整数类型的数据的趋势。</li><li>趋势数据表存储格式：每个趋势表的字段通常包括 <code>itemid</code>、<code>clock</code>、<code>num</code>、<code>value_min</code>、<code>value_avg</code>、<code>value_max</code>：</li></ul></li><li><ul><li><ul><li><code>itemid</code>：监控项的唯一标识符。</li><li><code>clock</code>：时间戳，表示数据对应的时间段（通常是小时级别）。</li><li><code>num</code>：在该时间段内的数据样本数量。</li><li><code>value_min</code>：该时间段内的最小值。</li><li><code>value_avg</code>：该时间段内的平均值。</li><li><code>value_max</code>：该时间段内的最大值。</li></ul></li></ul></li></ul><p><strong>强烈建议将历史数据保留时长设置得尽可能的小。这么做可以让数据库不会因存储了大量的历史数据，导致超负荷运行。可以选择长时间的保留趋势数据，来替代长期需要的历史数据。例如：设置成保留14天历史数据和5年的趋势数据。</strong></p><p><strong>创建图形</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240504222331047.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240504222347806.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240504222541298.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240504222603463.png" alt="img"></p><p><strong>添加主机</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240504222701746.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240504222723507.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240504222947897.png" alt="img"></p><p><strong>查看监控指标</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240504223147777.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240504223239069.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240504223314247.png" alt="img"></p><p><strong>或者：</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240504224047878.png" alt="img"></p><p><strong>测试监控数据变化</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 被监控端boot分区压测</span></span><br><span class="line">[root@test01 boot]<span class="comment"># dd if=/dev/zero of=/boot/1.txt bs=1M count=100</span></span><br><span class="line">[root@test01 boot]<span class="comment"># dd if=/dev/zero of=/boot/1.txt bs=1M count=50</span></span><br><span class="line">[root@test01 boot]<span class="comment"># dd if=/dev/zero of=/boot/1.txt bs=1M count=20</span></span><br><span class="line">[root@test01 boot]<span class="comment"># rm -rf /boot/1.txt</span></span><br></pre></td></tr></table></figure><p>被监控端压测完成以后，回到监控面板查看图形</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405042258623.png" alt="img"></p><h4 id="12-2-网卡出入流量监控"><a href="#12-2-网卡出入流量监控" class="headerlink" title="12.2 网卡出入流量监控"></a>12.2 网卡出入流量监控</h4><h5 id="12-2-1-ens33网卡进入流量监控"><a href="#12-2-1-ens33网卡进入流量监控" class="headerlink" title="12.2.1 ens33网卡进入流量监控"></a>12.2.1 ens33网卡进入流量监控</h5><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405042305206.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405042306218.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405042325915.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405042318001.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405042326553.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405042326789.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405042327196.png" alt="img"></p><p> <strong>net.if.in[if,<mode>]</mode></strong>是一个用于监控网络接口输入流量的键值（key）。这里的 <code>ens33</code> 是网络接口的名称。<code>net.if.in[ens33]</code> 键值会返回网络接口 <code>ens33</code> 上接收到的字节总数。</p><ul><li><p><code>if</code> 是网络接口的具体实例，表示我们希望监控的网络接口。  </p></li><li><p><code>&lt;mode&gt;</code> 参数决定了如何计算或显示输入的数据流量。常见的模式如下：</p></li><li><ul><li>bytes: 返回通过该网络接口接收到的数据量（以字节为单位）。</li><li>packets: 返回通过该网络接口接收到的数据包数量。</li><li>errors: 返回接收到的数据包中发生的错误数量。</li><li>dropped: 返回接收到的数据包中被丢弃的数量。</li></ul></li></ul><h5 id="12-2-2-ens33网卡出去流量监控"><a href="#12-2-2-ens33网卡出去流量监控" class="headerlink" title="12.2.2 ens33网卡出去流量监控"></a>12.2.2 ens33网卡出去流量监控</h5><p>选择配置–&gt;模版–&gt;监控项</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405042329048.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405042330046.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405042331004.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405042332757.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405042333704.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405042333338.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405042334904.png" alt="img"></p><h4 id="12-3-监控服务端口"><a href="#12-3-监控服务端口" class="headerlink" title="12.3 监控服务端口"></a>12.3 监控服务端口</h4><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405062231966.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405062232368.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405062235452.png" alt="img"></p><p><strong>创建图形</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405062236813.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405062236319.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405062237513.png" alt="img"></p><p><code>net.tcp.service[service,&lt;ip&gt;,&lt;port&gt;]</code> 是一个用于检查TCP服务是否在某个端口上运行的键值（key）。这个键值会尝试与指定的端口建立TCP连接，并检查连接是否成功。如果连接成功，则意味着该服务在该端口上正在运行。</p><ul><li><p><code>service</code> 指的是具体的 TCP 服务（如 Web 服务、FTP 服务、数据库服务等），此参数用于标识所监控的服务类型。  </p></li><li><p><code>&lt;ip&gt;</code> 参数代表 TCP 服务所绑定的 IP 地址。它标识了该服务所在的主机或服务器的 IP 地址。  </p></li><li><p><code>&lt;port&gt;</code> 参数代表该 TCP 服务所监听的端口号。每个服务都通过特定的端口号来区分其他服务。例如，HTTP 服务通常运行在端口80 。</p></li><li><ul><li><code>net.tcp.service[http,192.168.174.11,80]</code>: 监控或查询运行在 IP 地址 <code>192.168.174.11</code> 上端口 <code>80</code> 的 HTTP 服务的状态。</li><li><code>net.tcp.service[ftp,10.96.74.22,21]</code>: 监控或查询运行在 IP 地址 <code>10.96.74.22</code> 上端口 <code>21</code> 的 FTP 服务的状态。</li></ul></li></ul><h5 id="12-2-3监控网卡的上下流量总和"><a href="#12-2-3监控网卡的上下流量总和" class="headerlink" title="12.2.3监控网卡的上下流量总和"></a>12.2.3<code>监控网卡的上下流量总和</code></h5><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405062304579.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405062304730.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405062306030.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405062308725.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405062308182.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405062309394.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405062309327.png" alt="img"></p><h4 id="12-4-监控系统进程数量"><a href="#12-4-监控系统进程数量" class="headerlink" title="12.4 监控系统进程数量"></a>12.4 监控系统进程数量</h4><ol><li>系统总进程数量</li></ol><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405062242954.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405062243502.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405062244134.png" alt="img"></p><p><strong>创建监控项图形</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405062246411.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405062247689.png" alt="img"></p><p><code>proc.num</code> 是一个用于监控进程数量的键值（key）。它允许你根据进程名称、用户、状态、命令行参数和区域（在容器化环境中）来过滤和计数进程。</p><p>键值 <code>proc.num[&lt;name&gt;,&lt;user&gt;,&lt;state&gt;,&lt;cmdline&gt;,&lt;zone&gt;]</code> 的参数是可选的，你可以根据需要包含或省略它们。以下是这些参数的说明：</p><ul><li><p><code>&lt;name&gt;</code>：进程的名称或名称模式。可以使用通配符（如 <code>*</code>）来匹配多个进程。</p></li><li><p><code>&lt;user&gt;</code>：运行进程的用户名。</p></li><li><p><code>&lt;state&gt;</code>：进程的状态。可以是 <code>Z</code>（僵尸）、<code>R</code>（运行）、<code>S</code>（睡眠）、<code>T</code>（停止）或 <code>D</code>（不可中断的睡眠）。</p></li><li><p><code>&lt;cmdline&gt;</code>：进程的命令行参数。这是一个正则表达式，用于匹配进程的完整命令行。</p></li><li><p><code>&lt;zone&gt;</code>：在容器化环境中，这个参数可以用来指定容器或区域。</p></li></ul><p>如果不提供某个参数，那么Zabbix将不会根据该参数进行过滤。例如，如果你只提供进程名称，那么Zabbix将计算具有该名称的所有进程的数量，不考虑其他参数。</p><p><code>proc.num[mysql]</code>计算名为 <code>mysql</code> 的进程数量。</p><p><code>proc.num[,nginx]</code>计算用户 <code>nginx</code> 运行的进程数量。</p><ol><li>运行中的进程数量</li></ol><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405062250570.png" alt="img"></p><ol><li>监控系统中沉睡的进程数量</li></ol><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405062255488.png" alt="img"></p><h4 id="12-5-监控cpu的状态"><a href="#12-5-监控cpu的状态" class="headerlink" title="12.5 监控cpu的状态"></a>12.5 监控cpu的状态</h4><ol><li>cpu 五分钟负载情况</li></ol><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405072212759.png" alt="img"></p><p><code>system.cpu.load[&lt;cpu&gt;,&lt;mode&gt;]</code> 是一个用于监控CPU负载的键值（key）。这个键值提供了关于CPU使用情况的信息，通常用于评估系统的性能和瓶颈。</p><p>下面是关于这个键值的参数的详细说明：</p><ul><li><p><cpu>：这个参数指定了要监控的CPU或CPU核心。它可以是以下几种值之一： </cpu></p></li><li><ul><li><code>all</code>：表示监控所有CPU核心的平均负载。</li></ul></li><li><ul><li><code>0</code> 到 <code>N</code>（其中N是CPU核心的数量减去1）：表示监控特定的CPU核心。例如，<code>0</code> 表示第一个CPU核心，<code>1</code> 表示第二个CPU核心，依此类推。</li></ul></li><li><ul><li><code>avg1</code>, <code>avg5</code>, <code>avg15</code>：这些不是CPU核心编号，而是表示过去1分钟、5分钟和15分钟的平均负载。这些值通常用于评估系统负载随时间的变化情况。</li></ul></li></ul><ol><li><strong>cpu 1分钟负载情况</strong></li></ol><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405072215173.png" alt="img"></p><ol><li><strong>cpu 15分钟负载情况</strong><br><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405072216717.png" alt="img"> </li></ol><hr><hr><h3 id="13、自定义监控设置-Items"><a href="#13、自定义监控设置-Items" class="headerlink" title="13、自定义监控设置(Items)"></a>13、自定义监控设置(Items)</h3><p><strong>客户端(安装有zabbix-agent端)：</strong>    </p><ol><li><p>通过命令、脚本取出需要监控的值； </p></li><li><p>安装zabbix-agent2，编写配置文件、创建键值；格式为：key=values，key为监控项名称。values为监控项的值。通过shell命令取出。 </p></li><li><p>重启客户端服务，并测试是否取出数据。<code>zabbix-agent2 -t Key名</code> </p></li></ol><p><strong>服务端：</strong></p><ol><li><p>服务端命令行测试是否<code>get</code>到客户端自定义监控的值；</p></li><li><p>web界面：获取到的键值与监控项关联；</p></li><li><p>web界面：测试。</p></li></ol><h4 id="13-1-自定义监控项编写"><a href="#13-1-自定义监控项编写" class="headerlink" title="13.1 自定义监控项编写"></a>13.1 自定义监控项编写</h4><p><strong>小试牛刀：监控web服务80端口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令行取值</span></span><br><span class="line">[root@test01 ~]<span class="comment"># ss -tunlp | grep -w  80  | wc -l</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240428204223339.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看自定监控配置文件存放路径</span></span><br><span class="line">[root@test01 ~]<span class="comment"># grep -i "include" /etc/zabbix/zabbix_agent2.conf </span></span><br><span class="line">...</span><br><span class="line">Include=/etc/zabbix/zabbix_agent2.d/*.conf</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写自定义监控项配置文件</span></span><br><span class="line">[root@test01 ~]<span class="comment"># vim /etc/zabbix/zabbix_agent2.d/web_status.conf</span></span><br><span class="line"><span class="comment">#UserParameter=key,cmd</span></span><br><span class="line"><span class="comment">#UserParameter=web_port_status,bash /check_service/xxx.sh</span></span><br><span class="line">UserParameter=web_port_status,ss -tunlp | grep 80 | wc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启客户端服务</span></span><br><span class="line">[root@test01 ~]<span class="comment"># systemctl restart zabbix-agent2</span></span><br><span class="line">[root@test01 ~]<span class="comment"># systemctl status zabbix-agent2</span></span><br></pre></td></tr></table></figure><p><code>Include=/etc/zabbix/zabbix_agent2.d/*.conf</code> 自定义监控项配置文件默认位置。</p><p>UserParameter=key,cmd<br>UserParameter=固定格式，表示要自定义监控项。<br>key表示键值名称，也就是自定义监控项的名称，命名最好为 单词+”_”<br>cmd表示取值的命令或者脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端本地测试</span></span><br><span class="line">[root@test01 ~]<span class="comment"># zabbix_agent2 -t web_port_status</span></span><br><span class="line">web_port_status                               [s|1]</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240428205503477.png" alt="img"></p><p>解释：<code>**web_port_status**</code> <strong>表示自定义监控的Key，非配置文件名称。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端测试，安装测试工具</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># yum install -y zabbix-get</span></span><br><span class="line"></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># zabbix_get  -s 192.168.174.60 -p 10050 -k web_port_status</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><p><strong>-s 客户端IP地址；</strong></p></li><li><p><strong>-p 客户端zabbix-agent 端口，默认：10050；</strong></p></li><li><p><strong>-k 客户端自定义监控项Key名。</strong></p></li></ul><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240428211118750.png" alt="img"></p><hr><p><strong>web界面添加自定义监控项</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240428220752312.png" alt="img"></p><p><strong>配置–&gt;主机–&gt;选择主机监控项</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240428220854319.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240428221545133.png" alt="img"></p><p>参数解释：</p><ol><li><p>历史数据保留时长：根据服务器的配置决定，建议保留时长不宜过久；</p></li><li><p>趋势存储时间：通常趋势数据设置的的留存时间应当比历史数据留存时间设置的长。</p></li></ol><p>详细信息参考官方文档：<a href="https://www.zabbix.com/documentation/6.0/zh/manual/config/items/history_and_trends" target="_blank" rel="noopener">4 历史数据与趋势数据 (zabbix.com)</a></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240428222405047.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240429092334079.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240429091503703.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240429091543086.png" alt="img"></p><p><strong>web 查看自定义监控项数据</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240429094725797.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240429094800733.png" alt="img"></p><h4 id="13-2-获取不到内容报错解决"><a href="#13-2-获取不到内容报错解决" class="headerlink" title="13.2 获取不到内容报错解决"></a>13.2 获取不到内容报错解决</h4><p><strong>报错内容</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240428205848334.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**Unknown metric web_port_statuss**</span><br></pre></td></tr></table></figure><ol><li><p>客户端测试时，自定义监控名称写错；</p></li><li><p>自定义监控项配置文件内部语法错误，例如：固定格式、命令；</p></li><li><p>自定义监控项创建完成没有重启客户端。</p></li></ol><h4 id="13-3-使用脚本定义自定义监控项"><a href="#13-3-使用脚本定义自定义监控项" class="headerlink" title="13.3 使用脚本定义自定义监控项"></a>13.3 使用脚本定义自定义监控项</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**详细请见附件基于脚本实现自定义监控项**</span><br></pre></td></tr></table></figure><h3 id="14、-自定义图形"><a href="#14、-自定义图形" class="headerlink" title="14、 自定义图形"></a>14、 自定义图形</h3><h4 id="14-1-自定义单个监控项图形"><a href="#14-1-自定义单个监控项图形" class="headerlink" title="14.1 自定义单个监控项图形"></a>14.1 自定义单个监控项图形</h4><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240429095135012.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240429095158678.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240429095505410.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240429095627370.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240429095731458.png" alt="img"></p><p><strong>查看自定义图形</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240429095846535.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240429095902300.png" alt="img"></p><h4 id="14-2-仪表盘创建-聚合图形"><a href="#14-2-仪表盘创建-聚合图形" class="headerlink" title="14.2 仪表盘创建(聚合图形)"></a>14.2 仪表盘创建(聚合图形)</h4><p>​    仪表盘用于，将我们自定以图像进行集中值一个界面进行展示，使得我们更方便的找到服务器的瓶颈。</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405072141985.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405072142858.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405072143247.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405072144583.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405072145165.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405072145673.png" alt="img"></p><p><strong>查看自定义仪表盘</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405072151208.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405072151206.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405072152655.png" alt="img"></p><h3 id="15、触发器器设置-Triggers-P0级服务"><a href="#15、触发器器设置-Triggers-P0级服务" class="headerlink" title="15、触发器器设置( Triggers)  P0级服务"></a>15、触发器器设置( Triggers)  P0级服务</h3><h4 id="15-1-触发器介绍"><a href="#15-1-触发器介绍" class="headerlink" title="15.1 触发器介绍"></a>15.1 触发器介绍</h4><p>触发器是<code>条件的定义</code>,一个触发器是根据一个监控项的<code>返回值</code>,将之<code>对比预先设置的阈值</code>，当监控项返回了不符合预定义的值范围后,就进行触发下一步操作的警戒线,一般要对创建的监控项设置触发器以及触发方式和值的大小</p><ul><li><p>可以在指定主机上创建触发器,只是针对指定主机有效； </p></li><li><p>也可以在指定<code>模板上创建触发器</code>,则使用此模板的所有主机都有效,一个模板中可以有多触发器；<br>触发器中使用的表达式是非常灵活的。你可以使用它们去创建关于监控统计的复杂逻辑测试。 </p></li></ul><h4 id="15-2-触发器严重性"><a href="#15-2-触发器严重性" class="headerlink" title="15.2 触发器严重性"></a>15.2 触发器严重性</h4><p>触发器严重性表示<code>触发器的重要程度</code>，Zabbix支持下列6种触发器的严重程度：</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240429104740157.png" alt="img"></p><p>严重性功能：</p><ul><li><p>通过不同的颜色区分不同的严重程度；</p></li><li><p>用户媒介，不同的用户媒介（通知渠道）代表不同的严重程度。例如，短信 - 高严重性，email - 其他；</p></li><li><p>不同的严重性通过触发器执行对应的条件动作。</p></li></ul><h4 id="15-3-配置触发器"><a href="#15-3-配置触发器" class="headerlink" title="15.3 配置触发器"></a>15.3 配置触发器</h4><h5 id="15-3-1-触发器示例一：web服务端口"><a href="#15-3-1-触发器示例一：web服务端口" class="headerlink" title="15.3.1 触发器示例一：web服务端口"></a>15.3.1 触发器示例一：web服务端口</h5><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240429105152136.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240429105218145.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240429111807604.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240429111947106.png" alt="img"></p><p>解释：</p><ul><li><p>监控项：自定义监控项默认没有触发器，需要自己去添加，选择自定义监控项的名称；</p></li><li><p>功能：<code>last</code>函数：表示最新的值和最近一次的值作比较。</p></li><li><p>结果：如果自定义监控项取出的值为0时，触发报警。</p></li></ul><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240429112408935.png" alt="img"></p><p>解释：表达式 zabbix5和zabbix6之间的区别</p><ul><li><p>zabbix 6 </p></li><li><ul><li>last(/nginx01/web_port_status)=0   # 函数(/主机/自定义监控项)=0</li></ul></li><li><p>zabbix 5 </p></li><li><ul><li>{nginx01:web_port_status.last()}=0    # {主机:自定义监控项名称.功能函数}=0</li></ul></li></ul><p><strong>测试触发器是否生效</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端关闭nginx</span></span><br><span class="line">[root@test01 ~]<span class="comment"># systemctl stop nginx</span></span><br></pre></td></tr></table></figure><p><strong>web界面查看</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240429141751762.png" alt="img"></p><h5 id="15-3-2-触发器示例二：cpu-1分钟负载"><a href="#15-3-2-触发器示例二：cpu-1分钟负载" class="headerlink" title="15.3.2 触发器示例二：cpu 1分钟负载"></a>15.3.2 触发器示例二：cpu 1分钟负载</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dd <span class="keyword">if</span>=/dev/zero  of=/1.txt  bs=1M count=4000</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405072220786.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405072220561.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405072333602.png" alt="img"></p><p><strong>查看触发器</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405072335452.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405072335962.png" alt="img"></p><p>表达式：<strong>last(/nginx_status_monitor/system.cpu.load[all,avg1])&gt;=0.4</strong></p><p>解释：表达式函数(/监控模版/自定义监控项)&gt;=0.4</p><p><strong>图形查看触发器</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405072343646.png" alt="img"></p><hr><hr><h4 id="15-4-触发器常用表达式功能函数介绍"><a href="#15-4-触发器常用表达式功能函数介绍" class="headerlink" title="15.4 触发器常用表达式功能函数介绍"></a>15.4 触发器常用表达式功能函数介绍</h4><p>官方网站：<a href="https://www.zabbix.com/documentation/6.0/zh/manual/config/triggers/expression" target="_blank" rel="noopener">2 触发器表达式 (zabbix.com)</a></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240429142518357.png" alt="img"></p><p><strong>触发器示例场景</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 触发器示例场景1:www.zabbix.com的处理器负载过高</span></span><br><span class="line">last(www.zabbix.com/system.cpu.load[all,avg1])&gt;5</span><br><span class="line">服务器是www.zabbix.com，监控项键值是system.cpu.load[all,avg1]</span><br><span class="line">通过使用函数“last()”获取最新的值。最后&gt;5 意味着当www.zabbix.com最新获取的处理器负载值大于5时触发器就会处于异常状态。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发器示例场景2:当前处理器负载大于5并且最近10分钟内最小值大于2，表达式为True</span></span><br><span class="line">last(www.zabbix.com/system.cpu.load[all,avg1]) &gt; 5 and last(www.zabbix.com/system.cpu.load[all.avg1].min(10m)) &gt; 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发器示例场景3:监控/etc/passwd 文件是否被修改，当文件/etc/passwd的checksum值与最近的值不同时，表达式为true。</span></span><br><span class="line">diff(www.zabbix.com/vfs.file.cksum[/etc/passwd]) = 1 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发器示例场景4:如果在最后五分钟期间eth0网卡接收到的网络字节数最小值超过 100 KB 将触发。</span></span><br><span class="line">min(/Zabbix server/net.if.in[eth0,bytes],5m)&gt;100K</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发器实力场景5：Zabbix server上的处理器负载太高。</span></span><br><span class="line">last(/Zabbix server/system.cpu.load[all,avg1])&gt;5</span><br><span class="line">‘/Zabbix server/system.cpu.load[all,avg1]‘ 给出了被监控参数的简短名称。它指定了服务器是“Zabbix server”，监控项的键值是“system.cpu.load[all,avg1]”。通过使用函数“last()”获取最新的值。最后，“&gt;5”意味着当Zabbix server最新获取的处理器负载值大于5时触发器就会处于异常状态。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发器示例场景7：服务器网卡从 Internet 下载一个大文件。 min 函数的使用：</span></span><br><span class="line">min(/www.example.com/net.if.in[eth0,bytes],5m)&gt;100K</span><br><span class="line">在过去5分钟内，eth0上接收字节数大于100kb时，表达式为<span class="literal">true</span>。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发器示例场景8：服务器无法访问。</span></span><br><span class="line">count(/example.example.com/icmpping,30m,,<span class="string">"0"</span>)&gt;5、</span><br><span class="line">如果主机“example.example.com” 在过去 30 分钟内超过 5 次无法访问，则表达式为真。</span><br></pre></td></tr></table></figure><h3 id="16、zabbix监控模版"><a href="#16、zabbix监控模版" class="headerlink" title="16、zabbix监控模版"></a>16、zabbix监控模版</h3><h4 id="16-1-zabbix-server自带模版"><a href="#16-1-zabbix-server自带模版" class="headerlink" title="16.1 zabbix server自带模版"></a>16.1 zabbix server自带模版</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux by Zabbix agent</span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>解释</th></tr></thead><tbody><tr><td>Linux: Host name of Zabbix agent running</td><td>Linux：Zabbix代理运行的主机名</td></tr><tr><td>Linux: Zabbix agent ping</td><td>Linux:Zabbix代理ping</td></tr><tr><td>Linux: Version of Zabbix agent running</td><td>Linux：运行Zabbix代理的版本</td></tr><tr><td>Linux: Maximum number of open file descriptors</td><td>打开文件描述符的最大数量</td></tr><tr><td>Linux: Maximum number of processes</td><td>Linux：进程的最大数量</td></tr><tr><td>Linux: Number of processes</td><td>Linux：进程数</td></tr><tr><td>Linux: Number of running processes</td><td>Linux：正在运行的进程数</td></tr><tr><td>Linux: System boot time</td><td>Linux：系统启动时间</td></tr><tr><td>Linux: Interrupts per second</td><td>Linux:每秒中断次数</td></tr><tr><td>Linux: Load average (1m avg)</td><td>Linux：平均负载（平均1分钟）</td></tr><tr><td>Linux: Load average (5m avg)</td><td>Linux：平均负载（平均5分钟）</td></tr><tr><td>Linux: Load average (15m avg)</td><td>Linux：平均负载（平均15分钟）</td></tr><tr><td>Linux: Number of CPUs</td><td>Linux：CPU数量</td></tr><tr><td>Linux: Context switches per second</td><td>Linux:每秒上下文切换次数</td></tr><tr><td>Linux: CPU idle time: Linux: CPU utilization</td><td>Linux:CPU空闲时间：Linux:CPU利用率</td></tr><tr><td>Linux: CPU guest time</td><td>Linux 中的 CPU guest time 是指<code>虚拟机在宿主机上运行期间，CPU 资源被占用的时间</code>。这个指标可以帮助管理员了解虚拟机对宿主机 CPU 资源的使用情况，以便进行性能优化和资源分配。</td></tr><tr><td>Linux: CPU guest nice time</td><td>Linux 中的 CPU guest nice time 是指<code>虚拟机在宿主机上运行期间</code>，<code>CPU 资源被占用的 nice 时间</code>。nice 值是 Linux 系统中用于控制进程优先级的一个参数，范围从 -20（最高优先级）到 19（最低优先级）。</td></tr><tr><td>Linux: CPU idle time</td><td>在 Linux 系统中，<code>CPU idle time 指的是 CPU 处于空闲状态的时间</code>。这是系统性能监控中的一个重要指标，因为它可以帮助你理解系统资源是否得到了充分利用或者是否存在过剩的计算能力。</td></tr><tr><td>Linux: CPU interrupt time</td><td>Linux 中的 CPU interrupt time 是指 <code>CPU 在处理中断请求时所花费的时间</code>。中断是计算机系统中的一种机制，用于响应硬件设备或软件程序的请求，以便进行相应的操作。</td></tr><tr><td>Linux: CPU iowait time</td><td>在 Linux 中，CPU iowait time（I/O等待时间）是<code>指 CPU 等待 I/O 操作完成的时间</code>。当 CPU 需要从磁盘、网络或其他慢速设备读取数据时，如果该数据尚未准备好，CPU 就会进入等待状态。iowait 是衡量系统 I/O 性能的关键指标之一，它可以帮助识别是否存在 I/O 瓶颈问题。</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Apache by HTTP</span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>解释</th></tr></thead><tbody><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28776&context=template" target="_blank" rel="noopener"> Apache: Service ping</a></td><td>httpd服务是否存活</td></tr><tr><td>Apache: Service response time</td><td>Apache 服务器的响应时间。是指从客户端发送请求到接收到服务器响应所需的时间。这个指标对于评估服务器性能和用户体验非常重要。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28775&context=template" target="_blank" rel="noopener">Apache: Get status</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28788&context=template" target="_blank" rel="noopener">Apache: Total workers idle</a></td><td>Apache: Total workers idle 是指当前空闲的工作进程数量。这个指标可以帮助你了解服务器的负载情况，以及是否需要增加或减少工作进程的数量来优化性能。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28775&context=template" target="_blank" rel="noopener">Apache: Get status</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28789&context=template" target="_blank" rel="noopener">Apache: Total workers busy</a></td><td>Apache: Total workers busy 是指当前正在处理请求的工作进程数量。这个指标可以帮助你了解服务器的负载情况，以及是否需要增加或减少工作进程的数量来优化性能。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28775&context=template" target="_blank" rel="noopener">Apache: Get status</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28796&context=template" target="_blank" rel="noopener">Apache: Workers waiting for connection</a></td><td>Apache: Workers waiting for connection 是指当前正在等待连接的工作进程数量。这个指标可以帮助你了解服务器的负载情况，以及是否需要增加或减少工作进程的数量来优化性能。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28775&context=template" target="_blank" rel="noopener"> Apache: Get status</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28778&context=template" target="_blank" rel="noopener">Apache: Workers starting up</a></td><td>Apache: Workers starting up 是指当前正在启动的工作进程数量。这个指标可以帮助你了解服务器的负载情况，以及是否需要增加或减少工作进程的数量来优化性能。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28775&context=template" target="_blank" rel="noopener">Apache: Get status</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28779&context=template" target="_blank" rel="noopener">Apache: Workers slot with no current process</a></td><td><code>指当前没有正在处理请求的工作进程的插槽数量。</code></td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28775&context=template" target="_blank" rel="noopener"> Apache: Get status</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28780&context=template" target="_blank" rel="noopener">Apache: Workers sending reply</a></td><td><code>指当前正在发送响应的工作进程数量。</code></td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28775&context=template" target="_blank" rel="noopener">Apache: Get status</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28781&context=template" target="_blank" rel="noopener">Apache: Workers reading request</a></td><td><code>指当前正在读取请求的工作进程数量。</code></td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28775&context=template" target="_blank" rel="noopener">Apache: Get status</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28782&context=template" target="_blank" rel="noopener">Apache: Workers logging</a></td><td>指当前正在记录日志的工作进程数量。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28775&context=template" target="_blank" rel="noopener">Apache: Get status</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28783&context=template" target="_blank" rel="noopener">Apache: Workers keepalive (read)</a></td><td><code>指当前正在处理 Keep-Alive 连接的工作进程数量。</code></td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28775&context=template" target="_blank" rel="noopener">Apache: Get status</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28785&context=template" target="_blank" rel="noopener">Apache: Workers finishing</a></td><td><code>指当前正在结束请求的工作进程数量。</code></td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28775&context=template" target="_blank" rel="noopener">Apache: Get status</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28787&context=template" target="_blank" rel="noopener">Apache: Workers DNS lookup</a></td><td>指当前正在执行 DNS 查询的工作进程数量。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28775&context=template" target="_blank" rel="noopener">Apache: Get status</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28786&context=template" target="_blank" rel="noopener">Apache: Workers closing connection</a></td><td><code>指当前正在关闭连接的工作进程数量。</code></td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28775&context=template" target="_blank" rel="noopener">Apache: Get status</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28784&context=template" target="_blank" rel="noopener">Apache: Workers idle cleanup</a></td><td>指当前正在执行空闲清理的工作进程数量。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28775&context=template" target="_blank" rel="noopener">Apache: Get status</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28790&context=template" target="_blank" rel="noopener">Apache: Version</a></td><td>指 Apache HTTP Server 的版本号。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28775&context=template" target="_blank" rel="noopener"> Apache: Get status</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28791&context=template" target="_blank" rel="noopener">Apache: Uptime</a></td><td>指 Apache HTTP Server 自上次启动以来的运行时间。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28775&context=template" target="_blank" rel="noopener">Apache: Get status</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28793&context=template" target="_blank" rel="noopener">Apache: Requests per second</a></td><td><code>指 Apache HTTP Server 每秒处理的请求数量。</code></td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28775&context=template" target="_blank" rel="noopener"> Apache: Get status</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28792&context=template" target="_blank" rel="noopener">Apache: Total requests</a></td><td><code>指 Apache HTTP Server 自上次启动以来处理的总请求数量。</code></td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28775&context=template" target="_blank" rel="noopener">Apache: Get status</a></td><td>指获取 Apache HTTP Server 的状态信息。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28775&context=template" target="_blank" rel="noopener">Apache: Get status</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28794&context=template" target="_blank" rel="noopener">Apache: Bytes per second</a></td><td>指 Apache HTTP Server 每秒传输的字节数。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28775&context=template" target="_blank" rel="noopener"> Apache: Get status</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10265&itemid=28795&context=template" target="_blank" rel="noopener">Apache: Total bytes</a></td><td>指 Apache HTTP Server 自上次启动以来传输的总字节数。</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nginx by Zabbix agent</span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>解释</th></tr></thead><tbody><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28804&context=template" target="_blank" rel="noopener"> Nginx: Get stub status page</a></td><td>Nginx: Get stub status page 是指获取 Nginx Web Server 的状态页面。这个状态页面提供了关于服务器的实时信息，包括连接数、请求处理时间等指标。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28809&context=template" target="_blank" rel="noopener">Nginx: Number of running processes</a></td><td>指 Nginx Web Server 当前正在运行的进程数量。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28808&context=template" target="_blank" rel="noopener"> Nginx: Memory usage (vsize)</a></td><td>指 Nginx Web Server 进程的虚拟内存使用量。虚拟内存使用量（vsize）包括了进程直接使用的内存以及其映射的文件和设备所使用的内存。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28807&context=template" target="_blank" rel="noopener">Nginx: Memory usage (rss)</a></td><td><strong>Nginx Web Server 进程使用的驻留集大小内存（以字节为单位）</strong>。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28806&context=template" target="_blank" rel="noopener">Nginx: CPU utilization</a></td><td><strong>指的是Nginx进程在服务器CPU上占用的资源情况，包括用户态和内核态的占用</strong>。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28804&context=template" target="_blank" rel="noopener"> Nginx: Get stub status page</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28820&context=template" target="_blank" rel="noopener">Nginx: Version</a></td><td>指 Nginx Web Server 的版本号。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28804&context=template" target="_blank" rel="noopener">Nginx: Get stub status page</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28818&context=template" target="_blank" rel="noopener">Nginx: Requests per second</a></td><td>指 Nginx Web Server 每秒处理的请求数量。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28804&context=template" target="_blank" rel="noopener"> Nginx: Get stub status page</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28819&context=template" target="_blank" rel="noopener">Nginx: Requests total</a></td><td>指 Nginx Web Server 自上次启动以来处理的总请求数量。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28804&context=template" target="_blank" rel="noopener">Nginx: Get stub status page</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28812&context=template" target="_blank" rel="noopener">Nginx: Connections writing</a></td><td>指 Nginx Web Server 当前正在写入响应的连接数量。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28804&context=template" target="_blank" rel="noopener">Nginx: Get stub status page</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28811&context=template" target="_blank" rel="noopener">Nginx: Connections waiting</a></td><td>指 Nginx Web Server 当前正在等待连接的连接数量。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28804&context=template" target="_blank" rel="noopener">Nginx: Get stub status page</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28814&context=template" target="_blank" rel="noopener">Nginx: Connections reading</a></td><td>指 Nginx Web Server 当前正在读取请求的连接数量。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28804&context=template" target="_blank" rel="noopener">Nginx: Get stub status page</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28815&context=template" target="_blank" rel="noopener">Nginx: Connections handled per second</a></td><td>指 Nginx Web Server 每秒处理的连接数量。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28804&context=template" target="_blank" rel="noopener">Nginx: Get stub status page</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28816&context=template" target="_blank" rel="noopener">Nginx: Connections dropped per second</a></td><td>指 Nginx Web Server 每秒丢弃的连接数量。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28804&context=template" target="_blank" rel="noopener">Nginx: Get stub status page</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28813&context=template" target="_blank" rel="noopener">Nginx: Connections active</a></td><td>指 Nginx Web Server 当前活跃的连接数量。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28804&context=template" target="_blank" rel="noopener">Nginx: Get stub status page</a>: <a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28817&context=template" target="_blank" rel="noopener">Nginx: Connections accepted per second</a></td><td>指 Nginx Web Server 每秒接受的连接数量。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28810&context=template" target="_blank" rel="noopener">Nginx: Service status</a></td><td>指 Nginx Web Server 的运行状态。</td></tr><tr><td><a href="http://192.168.174.58/items.php?form=update&hostid=10266&itemid=28805&context=template" target="_blank" rel="noopener"> Nginx: Service response time</a></td><td>指 Nginx Web Server 处理请求的响应时间。</td></tr></tbody></table><h3 id="17、触发器-Action"><a href="#17、触发器-Action" class="headerlink" title="17、触发器 Action"></a>17、触发器 Action</h3><h4 id="17-1-Action-动作介绍"><a href="#17-1-Action-动作介绍" class="headerlink" title="17.1 Action 动作介绍"></a>17.1 Action 动作介绍</h4><p>Zabbix中的Action是<strong>根据不同的事件状态执行相应操作的功能</strong>。</p><p>在Zabbix监控系统中，Action是一个核心功能，它允许你基于事件的<code>不同状态来执行预定义的操作</code>。这些操作可以极大地自动化日常的运维工作，减少手动干预的需要。以下是Zabbix Action的一些主要特点和用途：</p><ol><li><p><strong>自动响应</strong>：当监控系统检测到问题（如触发器状态变化）时，可以自动执行一系列操作，而不是需要人工介入。</p></li><li><p><strong>可配置性</strong>：：自定义Action，例如发送报警通知、执行远程命令等。</p></li><li><p><strong>权限管理</strong>：为了执行某些操作，如重启服务，可能需要相应的权限。因此，配置sudo权限或修改zabbix配置文件以允许接收远程命令是常见的设置步骤。</p></li><li><p><strong>报警通知</strong>：最常见的用法是在检测到问题时，通过邮件、短信或其他方式将报警信息发送给指定的用户。</p></li><li><p><strong>远程命令执行</strong>：可以配置Action来在特定条件下执行远程命令，如系统重启、服务重启等，这通常需要确保Zabbix用户具有执行这些命令的权限。</p></li><li><p><strong>日志记录</strong>：所有执行的Action都会被记录在Zabbix的日志中，便于后续的问题排查和分析。</p></li></ol><h4 id="17-2-告警分类"><a href="#17-2-告警分类" class="headerlink" title="17.2 告警分类"></a>17.2 告警分类</h4><table><thead><tr><th>报警方式</th><th>企业使用场景</th></tr></thead><tbody><tr><td>邮件告警</td><td>企业邮箱，免费试用</td></tr><tr><td>企业微信/飞书-告警机器人</td><td>企业微信，免费使用</td></tr><tr><td>OA系统(钉钉)</td><td>钉钉，免费使用</td></tr><tr><td>短信</td><td>0.04元/条左右，云厂商，收费</td></tr><tr><td>电话</td><td>收费</td></tr></tbody></table><h4 id="17-2-邮箱告警"><a href="#17-2-邮箱告警" class="headerlink" title="17.2 邮箱告警"></a>17.2 邮箱告警</h4><p><strong>详细请见附件：zabbix 6.0 结合邮箱触发告警</strong></p><h4 id="17-3-飞书告警"><a href="#17-3-飞书告警" class="headerlink" title="17.3 飞书告警"></a>17.3 飞书告警</h4><p><strong>详细请见附件：zabbix 6.0结合飞书触发告警</strong></p><h3 id="17-4-zabbix-基于ssh远程执行故障恢复操作"><a href="#17-4-zabbix-基于ssh远程执行故障恢复操作" class="headerlink" title="17.4 zabbix 基于ssh远程执行故障恢复操作"></a>17.4 zabbix 基于ssh远程执行故障恢复操作</h3><p><img src="/2024/08/23/%E4%BC%81%E4%B8%9A%E7%BA%A7Zabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/1716386143737-e11c2eb7-3c75-47dc-a8f5-913339b9cb76.png" alt="img"></p><p><img src="/2024/08/23/%E4%BC%81%E4%B8%9A%E7%BA%A7Zabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/1716386182378-2beadc93-1f37-45fb-86c4-f43ced978a2c.png" alt="img"></p><p><img src="/2024/08/23/%E4%BC%81%E4%B8%9A%E7%BA%A7Zabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/1716386225761-4918c8c3-7e9e-4dab-a15b-a469eea5de62.png" alt="img"></p><p><img src="/2024/08/23/%E4%BC%81%E4%B8%9A%E7%BA%A7Zabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/1716386267017-e1be7003-82c1-45d5-806d-a6701a48ba12.png" alt="img"></p><p><strong>zabbix中远程命令 ssh报错Cannot obtain authentication methods: Error waiting on socket</strong></p><p>去agent2节点中的/etc/ssh/sshd_config中，将UseDNS打开注释并将yes改为no然后重启sshd服务。</p><p>UseDNS 选项打开状态下，当客户端试图登录SSH服务器时，服务器端先根据客户端的IP地址进行DNS，PTR反向查询出客户端的主机名，然后根据查询出的客户端主机名进行DNS正向A记录查询，验证与其原始IP地址是否一致，这是防止客户端欺骗的一种措施，但一般我们的是动态IP不会有PTR记录，打开这个选项不过是在白白浪费时间而已，不如将其关闭。Linux优化时常这样做。</p><h3 id="18、宏"><a href="#18、宏" class="headerlink" title="18、宏"></a>18、宏</h3><h4 id="18-1-介绍"><a href="#18-1-介绍" class="headerlink" title="18.1 介绍"></a>18.1 介绍</h4><p>​    <strong>Zabbix中的宏是一种用于简化配置和提高可重用性的功能强大的工具</strong>。在Zabbix中，宏可以被视为一种变量，用于保存预设的文本模式，并在调用时将其替换为相应的值。例如，内置宏{HOST.NAME}会在使用中自动替换为对应主机的名称。</p><h4 id="18-2-设置优先级"><a href="#18-2-设置优先级" class="headerlink" title="18.2 设置优先级"></a>18.2 设置优先级</h4><ol><li><p><strong>全局宏</strong>：作用于所有模板和主机，但优先级最低。</p></li><li><p><strong>模板宏</strong>：仅适用于关联的模板。</p></li><li><p><strong>主机宏</strong>：特定于单个主机。</p></li></ol><h4 id="18-3-作用及场景"><a href="#18-3-作用及场景" class="headerlink" title="18.3 作用及场景"></a>18.3 作用及场景</h4><ul><li><p><strong>简化配置</strong>：通过使用宏，可以在多个地方重复使用相同的值，而不必手动更改每个实例。</p></li><li><p><strong>统一管理</strong>：方便后期统一修改和维护，例如，如果需要更改服务器名称，只需更改全局宏一次即可。</p></li></ul><p>实际应用场景</p><ul><li><strong>监控项和触发器</strong>：在创建监控项或触发器时，可以使用宏来定义动态的名称或参数值。</li></ul><h4 id="18-4-宏设置"><a href="#18-4-宏设置" class="headerlink" title="18.4 宏设置"></a>18.4 宏设置</h4><p>触发动作的名字:{ACTION.NAME}</p><p>日期格式为yyyy.mm.dd:{DATE}</p><p>触发动作的事件的时长:{EVENT.AGE}</p><p>触发动作的事件的日期:{EVENT.DATE}</p><p>事件持续时间:{EVENT.DURATION}</p><p>触发动作的事件的数字ID:{EVENT.ID}</p><p>触发动作的问题事件名称:{EVENT.NAME}</p><p>描述事件严重性的数值:{EVENT.NSEVERITY}</p><p>描述事件对象的数值:{EVENT.OBJECT}</p><p>问题对应触发器的当前值:{EVENT.OPDATA}</p><p>事件恢复日期:{EVENT.RECOVERY.DATE}</p><p>恢复时间名称:{EVENT.RECOVERY.NAME}</p><p>恢复事件的文字描述:{EVENT.RECOVERY.STATUS}</p><p>出发动作的事件的文字描述:{EVENT.STATUS}</p><p>触发动作的事件时间*:{EVENT.TIME}</p><p>依赖于主机设置的主机IP地址或DNS名称:{HOST.CONN}</p><p>主机描述.:{HOST.DESCRIPTION}</p><p>主机名称:{HOST.HOST}</p><p>主机 ID.:{HOST.ID}</p><p>主机IP地址:{HOST.IP}</p><p>可见的主机名:{HOST.NAME}</p><p>主机（代理）端口:{HOST.PORT}</p><p>目标主机IP地址或DNS名称，取决于主机设置:{HOST.TARGET.CONN}</p><p>目标主机的DNS名称:{HOST.TARGET.DNS}</p><p>目标主机的技术名称:{HOST.TARGET.HOST}</p><p>目标主机的IP地址。:{HOST.TARGET.IP}</p><p>目标主机的技术名称:{HOST.TARGET.NAME}</p><p>引发通知的触发器表达式中的第N个监控项的描述。:{ITEM.DESCRIPTION}</p><p>引发通知的触发器表达式中的第 N 个监控项的序列ID。:{ITEM.ID}</p><p>触发器表达式中导致通知的第 N 监控项的键：{ITEM.KEY}</p><p>触发器表达式中导致通知的第N个监控项的名称：{ITEM.NAME}</p><p>触发器表达式中导致通知的第 N 监控项的最新状态：{ITEM.STATE}</p><p>如果在触发器状态更改的上下文中使用：{ITEM.VALUE}</p><p>触发器表达式中导致通知的第N个监控项的值类型：{ITEM.VALUETYPE}</p><p>触发器描述。：{TRIGGER.DESCRIPTION}</p><p>触发器表达式。：{TRIGGER.EXPRESSION}</p><p>触发器的名称 (已解析宏).：{TRIGGER.NAME}</p><p>触发器的原始名称 (即未解析宏).：{TRIGGER.NAME.ORIG}</p><p>触发器的最新状态 可能的值: 未知 和 正常：{TRIGGER.STATE}</p><p>当前触发器的值 可以是 PROBLEM 或者 OK：{TRIGGER.STATUS}</p><p>当前触发数值: 0 - 触发器处于正常状态, 1 - 触发器处于问题状态。：{TRIGGER.VALUE}</p><h3 id="19、zabbix-自动发现"><a href="#19、zabbix-自动发现" class="headerlink" title="19、zabbix 自动发现"></a>19、zabbix 自动发现</h3><p>为了满足监控企业成千上万台服务器，因此我们需要使用Zabbix批量监控来实现。自动发现功能是<strong>一个强大的网络监控工具，它允许系统管理员无需手动添加即可自动检测网络中的设备和服务</strong>。自动发现功能发现被监控对象。同时自动发现功能能够提高监控系统的效率，因为它能够自动发现并添加新的主机或服务，使得管理员无需手动添加监控对象。</p><p>自动发现（<strong>被动模式</strong>）：由服务端主动发起，Zabbix Server开启发现进程，定时扫描局域网中IP服务器、设备。实现自动将发现主机、自动将主机添加到主机组、自动加载模板、自动创建项目（item）、自动创建图像等功能。缺点：当 Agent服务器过多的时候采用自动发现，zabbix-server压力会比较大，自动添加主机进度就会非常慢。</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405091430543.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405092225029.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405091432175.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405091454115.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405091454293.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405091455385.png" alt="img"></p><p><strong>查看自动发现主机</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405092243625.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405092251627.png" alt="img"></p><p><a href="https://www.cnblogs.com/zdoubly/p/9222902.html" target="_blank" rel="noopener">https://www.cnblogs.com/zdoubly/p/9222902.html</a></p><h3 id="20、zabbix自动注册"><a href="#20、zabbix自动注册" class="headerlink" title="20、zabbix自动注册"></a>20、zabbix自动注册</h3><p>自动注册（<strong>主动模式</strong>）：Zabbix Server 等待 Zabbix Agent2主动上报。由客户端主动发起，客户端必须安装并启动Agent，否则无法被自动注册添加至主机列表。</p><h4 id="20-1-zabbix自动注册介绍"><a href="#20-1-zabbix自动注册介绍" class="headerlink" title="20.1 zabbix自动注册介绍"></a>20.1 zabbix自动注册介绍</h4><p>Zabbix 自动注册是一种方便的功能，它允许 Zabbix Agent2 主动向 Zabbix Server 注册自己，而无需手动在 Zabbix 中为每个主机创建条目。以下是实现 Zabbix 自动注册的关键步骤：</p><ol><li><p><strong>配置元数据</strong>：在 Zabbix Agent2 的配置文件中，需要设置一些参数，如 <code>Hostname</code>、<code>HostMetadata</code> 等客户端的元数据信息，以便 Zabbix Server 根据这些信息来匹配服务器的主机或模板。</p></li><li><p><strong>启用 Agent2 的主动模式</strong>：确保 Zabbix Agent2 是以主动模式运行的，即 Agentd必须安装并启动。在被动模式下，Zabbix Server 会主动扫描局域网中的设备，这在 Agent 数量较多时可能会给 Zabbix Server 带来较大压力。</p></li><li><p><strong>修改 zabbix_agent2.conf 文件</strong>：在客户端的 zabbix_agent2.conf 文件中，需要定义要执行的监控命令和自定义的 key。这些 key 将与服务器端的监控项相对应。</p></li></ol><h4 id="20-2-zabbix自动注册操作"><a href="#20-2-zabbix自动注册操作" class="headerlink" title="20.2 zabbix自动注册操作"></a>20.2 zabbix自动注册操作</h4><p><strong>客户端配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt;  被监控端修改zabbix-agent2配置文件，开启主动模式</span></span><br><span class="line">[root@web02 ~]<span class="comment"># vim  /etc/zabbix/zabbix_agent2.conf </span></span><br><span class="line">ServerActive=192.168.174.58</span><br><span class="line"><span class="comment"># 注释掉配置文件的主机名。</span></span><br><span class="line"><span class="comment"># Hostname=Zabbix server</span></span><br><span class="line"><span class="comment"># 获取当前主机名</span></span><br><span class="line">HostnameItem=system.hostname</span><br><span class="line"><span class="comment"># 获取当前主机元数据信息</span></span><br><span class="line">HostMetadataItem=system.uname</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 重启zabbix-agent2</span></span><br><span class="line">[root@web02 ~]<span class="comment"># systemctl restart zabbix-agent2</span></span><br><span class="line"></span><br><span class="line">[root@web02 ~]<span class="comment"># egrep -n  "^Server|^Host"  /etc/zabbix/zabbix_agent2.conf </span></span><br><span class="line">80:Server=192.168.174.58</span><br><span class="line">133:ServerActive=192.168.174.58</span><br><span class="line">153:HostnameItem=system.hostname</span><br><span class="line">176:HostMetadataItem=system.uname</span><br></pre></td></tr></table></figure><p><strong>服务端配置</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405092310344.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405092316654.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405092314364.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405092318861.png" alt="img"></p><h3 id="21、Zabbix-系列之分布式监控-Proxy-代理"><a href="#21、Zabbix-系列之分布式监控-Proxy-代理" class="headerlink" title="21、Zabbix 系列之分布式监控 Proxy 代理"></a>21、Zabbix 系列之分布式监控 Proxy 代理</h3><p><img src="/2024/08/23/%E4%BC%81%E4%B8%9A%E7%BA%A7Zabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/proxy.png" alt="img"></p><h4 id="21-1-介绍"><a href="#21-1-介绍" class="headerlink" title="21.1 介绍"></a>21.1 介绍</h4><p>Zabbix Proxy 可以代表 Zabbix Server 收集性能和可用性数据。<br>通过这种方式，Proxy 可以自己承担一些收集数据的负载，并减轻 Zabbix Server 的负担。<br>此外，当所有 Agents 和 Proxy 都向一个 Zabbix Server 报告并且所有数据都集中收集时，使用 Proxy 代理是实现集中式和分布式监控的最简单方法。<strong>Zabbix Proxy 代理是一个数据收集器，它不运行触发器、处理事件或发送警报。</strong></p><h4 id="21-2-应用场景"><a href="#21-2-应用场景" class="headerlink" title="21.2 应用场景"></a>21.2 应用场景</h4><ol><li><strong>监控远程位置</strong>：Zabbix Proxy 可以部署在远程位置，比如分支机构或数据中心，以收集该位置下所有被监控设备的数据。<br>这样可以减少网络带宽的使用，因为 Proxy 可以先将数据进行聚合，然后再传输到中央的 Zabbix Server。</li><li><strong>监控通信不可靠的场景</strong>：当网络环境不稳定或通信可靠性不高时，Zabbix Proxy 可以作为一个缓存或中转站。即使网络暂时中断，Proxy 也可以继续收集数据，并在网络恢复后将数据发送给 Zabbix Server。这有助于确保数据的完整性和可靠性。</li><li><strong>监视数千个设备</strong>：当需要监控的设备数量非常大时，单一的 Zabbix Server 可能无法处理所有的数据。在这种情况下，可以使用多个 Zabbix Proxy 来分散负载。每个 Proxy 负责一部分设备的监控，然后将数据发送给 Zabbix Server 进行集中处理。</li><li><strong>多机房采集：</strong>通过使用 Zabbix Proxy，可以简化分布式监控的维护。管理员只需要配置和维护 Zabbix Server 和各个 Proxy，而不需要直接管理所有的被监控设备。此外，由于 Proxy 可以处理一些基本的监控任务（如数据聚合、存储和转发），因此可以减少对 Zabbix Server 的依赖，降低单点故障的风险。</li></ol><h4 id="21-3-Zabbix-Proxy-必须使用单独的数据库的原因"><a href="#21-3-Zabbix-Proxy-必须使用单独的数据库的原因" class="headerlink" title="21.3 Zabbix Proxy 必须使用单独的数据库的原因"></a>21.3 Zabbix Proxy 必须使用单独的数据库的原因</h4><ol><li><strong>数据一致性和完整性：</strong> Zabbix Proxy 代理负责收集来自被监控设备的数据，并将这些数据暂时存储在本地数据库中。如果 Proxy 代理和 Server 共享同一个数据库，可能会导致数据写入的冲突和混乱，尤其是在高并发或网络不稳定的情况下。使用单独的数据库可以确保 Proxy 代理收集的数据在传输到 Server 之前得到妥善保存，并且不会因为 Server 的临时通信问题而丢失。</li><li><strong>减轻server压力：</strong> Zabbix Proxy 代理可以在一定程度上分担 Zabbix Server 的压力，特别是在监控大量设备或远程区域设备时。通过使用单独的数据库，Proxy 代理可以在本地处理大部分的数据收集和存储工作，然后再将汇总后的数据发送给 Server，从而减轻 Server 的负担。</li></ol><h4 id="21-4-安装"><a href="#21-4-安装" class="headerlink" title="21.4 安装"></a>21.4 安装</h4><p>安装数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 安装mariadb</span></span><br><span class="line">略</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 创建用户</span></span><br><span class="line">MariaDB [(none)]&gt; create database zabbix_proxy character <span class="built_in">set</span> utf8 collate utf8_bin;</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; grant all privileges on zabbix_proxy.* to zabbix@<span class="string">'%'</span> identified by <span class="string">'zabbix'</span>;</span><br><span class="line">MariaDB [(none)]&gt; grant all privileges on zabbix_proxy.* to zabbix@<span class="string">'localhost'</span> identified by <span class="string">'zabbix'</span>;</span><br><span class="line">MariaDB [(none)]&gt; grant all privileges on zabbix_proxy.* to zabbix@<span class="string">'127.0.0.1'</span> identified by <span class="string">'zabbix'</span>;</span><br><span class="line">MariaDB [(none)]&gt; flush privileges;</span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 安装zabbix_proxy</span></span><br><span class="line">[root@web01 zabbix]<span class="comment"># yum -y install zabbix-proxy-mysql zabbix-sql-scripts zabbix-selinux-policy</span></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 导入初始架构和初始数据</span></span><br><span class="line">[root@web01 zabbix]<span class="comment"># mysql -uroot  zabbix_proxy &lt; /usr/share/zabbix-sql-scripts/mysql/proxy.sql</span></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 备份文件</span></span><br><span class="line">[root@web01 zabbix]<span class="comment"># cp /etc/zabbix/zabbix_proxy.conf&#123;,.bak&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 修改文件  </span></span><br><span class="line">[root@web01 zabbix]<span class="comment"># vim /etc/zabbix/zabbix_proxy.conf</span></span><br><span class="line">Server=192.168.174.58       <span class="comment"># 指定zabbix-server的IP地址</span></span><br><span class="line">LogFile=/var/<span class="built_in">log</span>/zabbix/zabbix_proxy.log     <span class="comment"># 日志文件路径必须指定</span></span><br><span class="line">PidFile=/run/zabbix/zabbix_proxy.pid       <span class="comment"># pid文件路径必须指定</span></span><br><span class="line">Hostname=zabbix-proxy   <span class="comment"># 当前主机的主机名，注意这里一定要和hostname的结果一致</span></span><br><span class="line">DBName=zabbix_proxy <span class="comment"># 指定数据库名称</span></span><br><span class="line">DBUser=zabbix <span class="comment"># 指定连接数据库用户名</span></span><br><span class="line">DBPassword=zabbix          <span class="comment"># 指定用户名密码</span></span><br><span class="line">DBSocket=/var/lib/mysql/mysql.sock <span class="comment"># 指定mariadb的的socket文件</span></span><br><span class="line">AllowUnsupportedDBVersions=1 <span class="comment"># 关闭数据库版本检查</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动zabbix-proxy</span></span><br><span class="line">[root@web01 zabbix]<span class="comment"># systemctl enable  --now zabbix-proxy</span></span><br><span class="line">[root@web01 zabbix]<span class="comment"># systemctl status zabbix-proxy</span></span><br></pre></td></tr></table></figure><p><strong>注意：zabbix-proxy主机名需要和配置文件中的Hostname保持一致</strong></p><h4 id="zabbix-agent2配置"><a href="#zabbix-agent2配置" class="headerlink" title="zabbix-agent2配置"></a>zabbix-agent2配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@web03 ~]<span class="comment"># hostname -I</span></span><br><span class="line">192.168.174.62 </span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 修改配置zabbix-agent2配置文件</span></span><br><span class="line">[root@web03 ~]<span class="comment"># vim /etc/zabbix/zabbix_agentd.conf</span></span><br><span class="line"><span class="comment"># 这里不在写zabbix server的地址，写zabbix proxy主机的地址</span></span><br><span class="line">Server=192.168.174.60             <span class="comment"># 被动模式</span></span><br><span class="line">ServerActive=192.168.174.60  <span class="comment"># 主动模式</span></span><br><span class="line"><span class="comment">#此值也必须和hostname的值一致</span></span><br><span class="line">Hostname=web03</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 重启服务</span></span><br><span class="line">[root@web03 ~]<span class="comment"># systemctl restart zabbix-agent2</span></span><br><span class="line">[root@web03 ~]<span class="comment"># systemctl status zabbix-agent2</span></span><br></pre></td></tr></table></figure><p><strong>zabbix 服务端 web界面配置</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405100954005.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405100955450.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405100956199.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405101048266.png" alt="img"></p><p><strong>配置主机</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405101049948.png" alt="img"></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405101050284.png" alt="img"></p><p><strong>注意：如果主机可用性长时间没有变绿，则先重启被监控端zabbix-agnet2，和proxy端的zabbix-proxy。</strong></p><h3 id="22、zabbix优化方案"><a href="#22、zabbix优化方案" class="headerlink" title="22、zabbix优化方案"></a>22、zabbix优化方案</h3><ol><li><p>zabbix-proxy：当监控集群规模庞大时，使用zabbix-proxy，减少Zabbix Server的负载。</p></li><li><p>数据库优化：HA，读写分离，创建和维护适当的索引，减少查询时间。</p></li><li><p>主机和模版优化：简化配置管理，确保一致性；合理分组监控项，<strong>避免单个主机过多监控项</strong>；减少每个主机的监控负担，提高性能，使用低频率的监控项收集非关键数据，高频率的监控项收集关键数据。</p></li><li><p>触发器优化：减少触发器数量，避免不必要的复杂逻辑。</p></li><li><p>历史数据和趋势数据优化：设置合理的数据保留周期，减少数据库负担。定期清理旧数据，防止数据库膨胀。</p></li><li><p>调整 Zabbix 服务器参数：</p></li><li><ol><li><strong>StartPollers</strong>：控制 Zabbix 服务器同时运行的轮询器进程数量，<strong>建议设置为系统 CPU 核数的 2-4 倍</strong>。 轮询器负责主动从客户端（Zabbix Agent）或其他监控对象（如 HTTP、SNMP 等）获取数据。  </li><li><strong>StartTrappers</strong>：控制 Zabbix 服务器同时运行的 trapper 进程数量，<strong>建议设置为 10-20</strong>。 该进程用于接收 Zabbix 客户端和其他设备主动发送的数据（例如主动模式下的监控数据）。  </li><li><strong>CacheSize</strong>：用于存储历史数据和趋势数据的缓存大小，<strong>建议设置为系统内存的 10%-20%</strong>。<strong>以减少数据库负载</strong>。 缓存越大，Zabbix 可以更高效地处理和存储数据，从而减少对数据库的频繁读写操作。  </li><li><strong>HistoryCacheSize</strong>：历史缓存大小，用于缓存历史数据，减少数据库的 I/O 负载。建议：64M 到 256M，根据监控数据趋势计算的需求设置。  </li><li><strong>Timeout</strong>：设置 Zabbix 服务器与代理或受监控对象的通信超时时间，可以根据网络状况适当增加，但不宜过大，以免延迟过多。  </li><li><strong>StartDiscoverers：</strong>控制 Zabbix 服务器同时运行的发现进程数量，决定自动发现的并发能力。默认为1。</li><li><strong>StartDBSyncers</strong>：数据库同步进程数量，用于将数据从 Zabbix 缓存写入数据库。默认为4。</li></ol></li></ol><h3 id="23、zabbix结合Grafana实现图形展示"><a href="#23、zabbix结合Grafana实现图形展示" class="headerlink" title="23、zabbix结合Grafana实现图形展示"></a>23、zabbix结合Grafana实现图形展示</h3><p>详细请见后续文章。</p><h5 id><a href="#" class="headerlink" title></a></h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://l66stbz.github.io/tags/Linux/"/>
    
      <category term="Zabbix" scheme="https://l66stbz.github.io/tags/Zabbix/"/>
    
  </entry>
  
  <entry>
    <title>企业自动化运维神器Ansible(2)</title>
    <link href="https://l66stbz.github.io/2024/08/21/%E4%BC%81%E4%B8%9A%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E7%A5%9E%E5%99%A8Ansible(2)/"/>
    <id>https://l66stbz.github.io/2024/08/21/%E4%BC%81%E4%B8%9A%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E7%A5%9E%E5%99%A8Ansible(2)/</id>
    <published>2024-08-21T13:50:00.000Z</published>
    <updated>2024-08-24T12:37:54.914Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ansible-playbook-2"><a href="#Ansible-playbook-2" class="headerlink" title="Ansible-playbook(2)"></a>Ansible-playbook(2)</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">group模块参数：</span><br><span class="line">name参数：必须参数，用于指定组名称。</span><br><span class="line">state参数：用于指定组的状态，两个值可选，present，absent，默认为 present，设置为absent 表示删除组。</span><br><span class="line">gid参数：用于指定组的gid。如果不指定为随机</span><br><span class="line">system参数:如果是yes为系统组。--可选</span><br><span class="line">=========================================================================================</span><br><span class="line">1.创建多个play</span><br><span class="line">[root@ansible ~]# cd /etc/ansible/</span><br><span class="line">[root@ansible ansible]# vim play.yml</span><br><span class="line">- hosts: webservers1</span><br><span class="line">  user: root</span><br><span class="line">  tasks:</span><br><span class="line">  - name: create a group</span><br><span class="line">    group: name=mygrp gid=2003 system=true</span><br><span class="line">  - name: create a user</span><br><span class="line">    user: name=tom group=mygrp system=true</span><br><span class="line"></span><br><span class="line">- hosts: webservers2</span><br><span class="line">  user: root</span><br><span class="line">  tasks:</span><br><span class="line">  - name: install apache</span><br><span class="line">    yum: name=httpd state=latest</span><br><span class="line">  - name: start httpd service</span><br><span class="line">    service: name=httpd state=started</span><br><span class="line">=========================================================================================</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1569479193759.png" alt="1569479193759"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">检查并执行</span><br><span class="line">[root@ansible ansible]# ansible-playbook --syntax-check play.yml</span><br><span class="line">[root@ansible ansible]# ansible-playbook play.yml</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">2.条件执行when模块</span><br><span class="line">先判断when条件是否成立</span><br><span class="line">[root@ansible ansible]# cat /etc/ansible/hosts</span><br><span class="line">[webservers1]</span><br><span class="line">ansible-web1</span><br><span class="line">ansible-web2</span><br><span class="line"></span><br><span class="line">[root@ansible ansible]# vim when.yml</span><br><span class="line">- hosts: webservers1</span><br><span class="line">  user: root</span><br><span class="line">  tasks:</span><br><span class="line">  - name: use when</span><br><span class="line">    file: state=touch path=/tmp/when.txt</span><br><span class="line">  - name: insert data</span><br><span class="line">    shell: echo 123 &gt;&gt; /tmp/when.txt          #2在执行这个模块命令</span><br><span class="line">    when: ansible_hostname == "ansible-web1"  #1.先条件执行，先判断when是否成立，如果成立则执行上面命令,ansible-web1指的是被控节点上真正的主机名称</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1569480152773.png" alt="1569480152773"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">执行</span><br><span class="line">[root@ansible ansible]# ansible-playbook when.yml</span><br><span class="line">[root@ansible-web1 ~]# cat /tmp/when.txt</span><br><span class="line">123</span><br><span class="line">[root@ansible-web2 ~]# cat /tmp/when.txt</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">3.使用变量并不显示搜集主机相关信息</span><br><span class="line">gather_facts参数：指定了在任务部分执行前，是否先执行setup模块获取主机相关信息，默认值为true，改成false之后在执行过程中不会搜集主机相关信息。</span><br><span class="line">==========================================================================================================</span><br><span class="line">[root@ansible ansible]# vim create_user.yml</span><br><span class="line">- hosts: ansible-web1</span><br><span class="line">  user: root</span><br><span class="line">  gather_facts: false  #是否执行setup模块，搜集对方机器的信息</span><br><span class="line">  vars:                #自定义变量</span><br><span class="line">  - user: "jack"       #user是自定义变量名称，“jack”是变量值</span><br><span class="line">  - src_path: "/root/a.txt"    #同上</span><br><span class="line">  - dest_path: "/mnt/"</span><br><span class="line">  tasks:</span><br><span class="line">  - name: create user</span><br><span class="line">    user: name=&#123;&#123; user &#125;&#125;</span><br><span class="line">  - name: copy file</span><br><span class="line">    copy: src=&#123;&#123; src_path &#125;&#125; dest=&#123;&#123; dest_path &#125;&#125;</span><br><span class="line"></span><br><span class="line">[root@ansible ansible]# vim /root/a.txt  #创建测试文件</span><br><span class="line">123</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1569482053656.png" alt="1569482053656"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">执行：</span><br><span class="line">[root@ansible ansible]# ansible-playbook create_user.yml</span><br></pre></td></tr></table></figure><h2 id="Role角色"><a href="#Role角色" class="headerlink" title="Role角色"></a>Role角色</h2><p>roles则是在ansible中，playbooks的目录组织结构。而模块化之后，成为roles的组织结构，易读，代码可重用，层次清晰。</p><p>实战目标：通过role远程部署nginx并配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">两台机器配置本地解析</span><br><span class="line">[root@ansible-server ~]# vim /etc/hosts</span><br><span class="line">192.168.1.9    ansible-server</span><br><span class="line">192.168.1.13   ansible-web4</span><br><span class="line">[root@ansible-web4 ~]# vim /etc/hosts</span><br><span class="line">192.168.1.9    ansible-server</span><br><span class="line">192.168.1.13   ansible-web4</span><br><span class="line">添加主机组</span><br><span class="line">[root@ansible-server ansible]# pwd</span><br><span class="line">/etc/ansible</span><br><span class="line">[root@ansible-server ansible]# vim hosts</span><br><span class="line">[webservers4]</span><br><span class="line">ansible-web4</span><br><span class="line">配置免密登录：</span><br><span class="line">[root@ansible-server ~]# ssh-copy-id -i 192.168.1.13</span><br></pre></td></tr></table></figure><p>1.目录结构：</p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1567322212880.png" alt="1567322212880" style="zoom:50%;"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">目录顺序:</span><br><span class="line">role_name/     ---角色名称=目录</span><br><span class="line">    files/：存储一些可以用copy调用的静态文件。</span><br><span class="line">    tasks/： 存储任务的目录,此目录中至少应该有一个名为main.yml的文件，用于定义各task；其它的文件需要由main.yml进行“包含”调用； </span><br><span class="line">    handlers/:此目录中至少应该有一个名为main.yml的文件，用于定义各handler；其它的文件需要由（与notify:名字相同，方便notify通知执行下一条命令）通过main.yml进行“包含”调用； </span><br><span class="line">    vars/：此目录中至少应该有一个名为main.yml的文件，用于定义各variable；其它的文件需要由main.yml进行“包含”调用； </span><br><span class="line">    templates/：存储由template模块调用的模板文本； （也可以调用变量）</span><br><span class="line">    site.yml：定义哪个主机应用哪个角色</span><br><span class="line">=========================================================================================</span><br><span class="line">1.准备目录结构</span><br><span class="line">[root@ansible-server ~]# cd /etc/ansible/roles/  #roles为自带目录，如果不存在可以创建</span><br><span class="line">[root@ansible-server roles]# mkdir nginx/&#123;files,handlers,tasks,templates,vars&#125; -p</span><br><span class="line">2.创建文件</span><br><span class="line">[root@ansible-server roles]# touch site.yml nginx/&#123;handlers,tasks,vars&#125;/main.yml</span><br><span class="line">[root@ansible-server roles]# yum install -y tree</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1567322899375.png" alt="1567322899375"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.创建nginx的测试文件</span><br><span class="line">[root@ansible-server roles]# echo 1234 &gt; nginx/files/index.html</span><br><span class="line">2.安装nginx并配置模板</span><br><span class="line">[root@ansible-server roles]# yum install -y nginx &amp;&amp; cp /etc/nginx/nginx.conf nginx/templates/nginx.conf.j2</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">3.编写任务</span><br><span class="line">[root@ansible-server roles]# vim nginx/tasks/main.yml</span><br><span class="line">---</span><br><span class="line">- name: install epel</span><br><span class="line">  yum: name=epel-release state=latest</span><br><span class="line">- name: install nginx</span><br><span class="line">  yum: name=nginx state=latest</span><br><span class="line">- name: copy nginx.conf templte</span><br><span class="line">  template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf</span><br><span class="line">- name: copy index.html</span><br><span class="line">  copy: src=/etc/ansible/roles/nginx/files/index.html dest=/usr/share/nginx/html/index.html</span><br><span class="line">  notify: start nginx</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1567329259385.png" alt="1567329259385"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4.准备配置文件</span><br><span class="line">[root@ansible-server roles]# vim nginx/templates/nginx.conf.j2</span><br><span class="line">修改成如下内容。自定义变量</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1567324084045.png" alt="1567324084045"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5.编写变量</span><br><span class="line">[root@ansible-server roles]# vim nginx/vars/main.yml  #添加如下内容</span><br><span class="line">worker_connections: 2</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6.编写handlers</span><br><span class="line">[root@ansible-server roles]# vim nginx/handlers/main.yml #编写如下内容</span><br><span class="line">---</span><br><span class="line">- name: start nginx  #和notify的名字必须一样</span><br><span class="line">  service: name=nginx state=started</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">7.编写剧本</span><br><span class="line">[root@ansible-server roles]# vim site.yml</span><br><span class="line">---</span><br><span class="line">- hosts: webservers4</span><br><span class="line">  user: root</span><br><span class="line">  roles:</span><br><span class="line">   - nginx</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1567325911030.png" alt="1567325911030"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">检测语法</span><br><span class="line">[root@ansible-server roles]# ansible-playbook site.yml --syntax-check</span><br><span class="line">playbook: site.yml</span><br><span class="line">执行剧本：</span><br><span class="line">[root@ansible-server roles]# ansible-playbook site.yml</span><br></pre></td></tr></table></figure><p>查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible-web4 ~]# netstat -lntp </span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      3102/nginx: master  </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      926/sshd            </span><br><span class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1007/master         </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      3102/nginx: master  </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      926/sshd            </span><br><span class="line">tcp6       0      0 ::1:25                  :::*                    LISTEN      1007/master         </span><br><span class="line">[root@ansible-web4 ~]# cat /etc/nginx/nginx.conf | grep pro</span><br><span class="line"><span class="meta">#</span><span class="bash">worker_processes auto;</span></span><br><span class="line">worker_processes 2;</span><br></pre></td></tr></table></figure><p>访问：</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1567329307179.png" alt="1567329307179"></p><h2 id="项目实战：通过ansible上线"><a href="#项目实战：通过ansible上线" class="headerlink" title="项目实战：通过ansible上线"></a>项目实战：通过ansible上线</h2><h4 id="批量部署Jdk-Tomcat"><a href="#批量部署Jdk-Tomcat" class="headerlink" title="批量部署Jdk+Tomcat"></a>批量部署Jdk+Tomcat</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible-server src]# cat tomcat.yml</span><br><span class="line">- hosts: webservers</span><br><span class="line">  user: root</span><br><span class="line">  tasks:</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置JDK，上传jdk、tomcat的安装包到/usr/src</span></span></span><br><span class="line">  - name: configure Jdk1.8</span><br><span class="line">    copy: src=/usr/src/jdk-8u211-linux-x64.tar.gz  dest=/usr/src</span><br><span class="line">  - name: unzip</span><br><span class="line">    shell: tar -xvzf /usr/src/jdk-8u211-linux-x64.tar.gz -C /usr/local</span><br><span class="line">  - name: rename to java</span><br><span class="line">    shell: mv /usr/local/jdk1.8.0_211 /usr/local/java</span><br><span class="line">  - name: configure envirement1</span><br><span class="line">    shell: echo "JAVA_HOME=/usr/local/java" &gt;&gt; /etc/profile</span><br><span class="line">  - name: configure envirement2</span><br><span class="line">    shell: echo 'PATH=$JAVA_HOME/bin:$PATH' &gt;&gt; /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#Tomcat</span></span></span><br><span class="line">  - name: copy tomcat</span><br><span class="line">    copy: src=/usr/src/apache-tomcat-8.5.45.tar.gz dest=/usr/src</span><br><span class="line">  - name: unzip tomcat</span><br><span class="line">    shell: tar -xvzf /usr/src/apache-tomcat-8.5.45.tar.gz -C /usr/local</span><br><span class="line">  - name: rename to tomcat</span><br><span class="line">    shell: mv /usr/local/apache-tomcat-8.5.45 /usr/local/tomcat</span><br><span class="line">  - name: copy startup file</span><br><span class="line">    copy:  src=/usr/src/startup.sh dest=/usr/local/tomcat/bin</span><br><span class="line">    notify: start tomcat</span><br><span class="line">  handlers:</span><br><span class="line">  - name: start tomcat</span><br><span class="line">    shell: nohup /usr/local/tomcat/bin/startup.sh &amp;</span><br><span class="line">[root@java-server src]# ls</span><br><span class="line">apache-tomcat-8.5.45         debug                       kernels     tomcat.retry</span><br><span class="line">apache-tomcat-8.5.45.tar.gz  jdk-8u211-linux-x64.tar.gz  startup.sh  tomcat.yml</span><br><span class="line">[root@java-server src]# head -2 startup.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="批量部署Jenkins"><a href="#批量部署Jenkins" class="headerlink" title="批量部署Jenkins"></a>批量部署Jenkins</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">项目描述：</span><br><span class="line">1.准备两台机器，一台作为nginx代理。一台为tomcat服务器。</span><br><span class="line">2.tomcat服务器手动部署tomcat服务，并将webapps目录下面的内容提前删掉。</span><br><span class="line">3.将jenkins.war包上传到nginx服务器。通过ansible将war包拷贝过去。并启动tomcat</span><br><span class="line">4.配置nginx反向代理tomcat，实现访问jenkins。</span><br><span class="line">操作如下:</span><br><span class="line">一、tomcat服务器</span><br><span class="line">1.安装jdk与tomcat略。</span><br><span class="line">2.添加tomcat启动脚本中添加环境变量</span><br><span class="line">[root@ansible-web2 ~]# vim /usr/local/tomcat/bin/startup.sh  #需要添加如下内容</span><br><span class="line">source /etc/profile</span><br><span class="line">====================================</span><br><span class="line">二、nginx服务器：</span><br><span class="line">1.安装nginx与ansible，上传jenkins的war包略。</span><br><span class="line">2.ansible配置如下：</span><br><span class="line">3.定义变量：</span><br><span class="line">[root@ansible ~]# cd /etc/ansible/</span><br><span class="line">[root@ansible ansible]# mkdir vars</span><br><span class="line">[root@ansible ansible]# vim vars/path.yml</span><br><span class="line">src_path: /root/jenkins.war</span><br><span class="line">dest_path: /usr/local/tomcat/webapps/</span><br><span class="line"></span><br><span class="line">4.配置playbook：</span><br><span class="line">[root@ansible ansible]# vim jenkins.yml</span><br><span class="line">- hosts: webserver2</span><br><span class="line">  user: root</span><br><span class="line">  vars_files:</span><br><span class="line">   - /etc/ansible/vars/path.yml</span><br><span class="line">  tasks:</span><br><span class="line">  - name: copy jenkins.war</span><br><span class="line">    copy: src=&#123;&#123; src_path &#125;&#125; dest=&#123;&#123; dest_path &#125;&#125;</span><br><span class="line">  - name: start tomcat</span><br><span class="line">    shell: nohup /usr/local/tomcat/bin/startup.sh &amp;</span><br><span class="line">[root@ansible ansible]# ansible-playbook jenkins.yml</span><br><span class="line"></span><br><span class="line">5.配置nginx反向代理</span><br><span class="line">[root@ansible ansible]# vim /etc/nginx/conf.d/jenkins.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    charset koi8-r;</span><br><span class="line">    access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location /jenkins &#123;</span><br><span class="line">        proxy_pass http://192.168.62.181:8080;</span><br><span class="line">        proxy_set_header Host $host:$server_port;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">6.启动nginx</span><br><span class="line">7.检查nginx与tomcat是否启动成功！</span><br><span class="line">8.访问nginx服务器http://ip/jenkins。</span><br></pre></td></tr></table></figure><h4 id="批量部署Jdk-Tomcat-Jenkins"><a href="#批量部署Jdk-Tomcat-Jenkins" class="headerlink" title="批量部署Jdk+Tomcat+Jenkins"></a>批量部署Jdk+Tomcat+Jenkins</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将Jdk、Tomcat、Jenkins的安装包上传到ansbile控制节点的/usr/src下</span><br><span class="line">[root@ansible ansible]# ls /usr/src/</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1583207321017.png" alt="1583207321017"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@java-server ansible]# head -2 /usr/src/startup.sh //startup.sh是tomcat的启动脚本</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">source /etc/profile    #加上此行，是为了启动加载到环境变量</span><br></pre></td></tr></table></figure><p>下面是变量文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">变量文件</span><br><span class="line">[root@ansible ansible]# cat /etc/ansible/vars/file.yml</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1583207590404.png" alt="1583207590404"></p><p>下面是剧本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible ansible]# cat jenkins.yml</span><br><span class="line">- hosts: ansible-web1</span><br><span class="line">  user: root</span><br><span class="line">  vars_files:</span><br><span class="line">  - /etc/ansible/vars/file.yml</span><br><span class="line">  tasks:</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置JDK，上传jdk、tomcat的安装包到/usr/src</span></span></span><br><span class="line">  - name: configure JDK1.8</span><br><span class="line">    copy: src=&#123;&#123; src_jdk_path &#125;&#125;  dest=&#123;&#123; dest_jdk_path &#125;&#125;</span><br><span class="line">  - name: unzip JDK</span><br><span class="line">    shell: tar -xvzf /usr/src/jdk-8u211-linux-x64.tar.gz -C /usr/local</span><br><span class="line">  - name: rename to java</span><br><span class="line">    shell: mv /usr/local/jdk1.8.0_211 /usr/local/java</span><br><span class="line">  - name: configure JDK envirement1</span><br><span class="line">    shell: echo "JAVA_HOME=/usr/local/java" &gt;&gt; /etc/profile</span><br><span class="line">  - name: configure JDK envirement2</span><br><span class="line">    shell: echo 'PATH=$JAVA_HOME/bin:$PATH' &gt;&gt; /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#Tomcat</span></span></span><br><span class="line">  - name: copy tomcat</span><br><span class="line">    copy: src=&#123;&#123; src_tomcat_path &#125;&#125; dest=&#123;&#123; dest_tomcat_path &#125;&#125;</span><br><span class="line">  - name: unzip tomcat</span><br><span class="line">    shell: tar -xvzf /usr/src/apache-tomcat-8.5.45.tar.gz -C /usr/local</span><br><span class="line">  - name: rename to tomcat</span><br><span class="line">    shell: mv /usr/local/apache-tomcat-8.5.45 /usr/local/tomcat</span><br><span class="line">  - name: copy startup file</span><br><span class="line">    copy: src=/usr/src/startup.sh dest=/usr/local/tomcat/bin</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#Jenkins</span></span></span><br><span class="line">  - name: copy jenkins</span><br><span class="line">    copy: src=/usr/src/jenkins.war  dest=/usr/local/tomcat/webapps/</span><br><span class="line">    notify: start jenkins</span><br><span class="line">  handlers:</span><br><span class="line">  - name: start jenkins</span><br><span class="line">    shell: nohup /usr/local/tomcat/bin/startup.sh &amp;</span><br></pre></td></tr></table></figure><h4 id="剧本实现批量部署Jdk-Tomcat-Jenkins"><a href="#剧本实现批量部署Jdk-Tomcat-Jenkins" class="headerlink" title="剧本实现批量部署Jdk+Tomcat+Jenkins"></a>剧本实现批量部署Jdk+Tomcat+Jenkins</h4><p>l66：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: webservers</span><br><span class="line">  user: root</span><br><span class="line">  vars: </span><br><span class="line">        install_dir: "/usr/local"</span><br><span class="line">  tasks: </span><br><span class="line">    - name: 解压安装到目标主机路径</span><br><span class="line">      unarchive: src=&#123;&#123; item &#125;&#125; dest=&#123;&#123; install_dir &#125;&#125;</span><br><span class="line">      loop: </span><br><span class="line">        - /opt/apache-tomcat-8.5.45.tar.gz</span><br><span class="line">        - /opt/jdk-8u211-linux-x64.tar.gz</span><br><span class="line"></span><br><span class="line">    - name: tomcat目录改名</span><br><span class="line">      shell: mv &#123;&#123; install_dir &#125;&#125;/apache-tomcat-8.5.45  &#123;&#123; install_dir &#125;&#125;/tomcat</span><br><span class="line">    - name: jdk目录改名</span><br><span class="line">      shell: mv &#123;&#123; install_dir &#125;&#125;/jdk1.8.0_211   &#123;&#123; install_dir &#125;&#125;/java</span><br><span class="line"></span><br><span class="line">    - name: 声明jdk环境变量</span><br><span class="line">      copy:</span><br><span class="line">        content: |</span><br><span class="line">         JAVA_HOME=/usr/local/java</span><br><span class="line">         PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">        dest: /etc/profile.d/java.sh</span><br><span class="line"></span><br><span class="line">    - name: 上限Jenkins</span><br><span class="line">      copy: src=/opt/jenkins.war dest=/usr/local/tomcat/webapps</span><br><span class="line"></span><br><span class="line">    - name: 重新加载环境变量，并启动Tomcat</span><br><span class="line">      shell: source /etc/profile.d/java.sh &amp;&amp; nohup /usr/local/tomcat/bin/startup.sh &amp;</span><br></pre></td></tr></table></figure><p>ming：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: web01</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: 解压安装包到目标主机</span><br><span class="line">      unarchive: src=&#123;&#123; item &#125;&#125; dest=/usr/local/</span><br><span class="line">      loop:</span><br><span class="line">       - /opt/jdk-8u211-linux-x64.tar.gz</span><br><span class="line">       - /opt/apache-tomcat-8.5.45.tar.gz</span><br><span class="line">    </span><br><span class="line">    - name: 声明jdk变量</span><br><span class="line">      copy: </span><br><span class="line">        content: |</span><br><span class="line">          JAVA_HOME=/usr/local/jdk1.8.0_211</span><br><span class="line">          PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">        dest: /etc/profile.d/jdk.sh</span><br><span class="line">    </span><br><span class="line">    - name: 上线jenkins</span><br><span class="line">      copy: src=/root/jenkins.war  dest=/usr/local/apache-tomcat-8.5.45/webapps</span><br><span class="line">      notify: start tomcat</span><br><span class="line"></span><br><span class="line">  handlers:</span><br><span class="line">  - name: start tomcat</span><br><span class="line">    shell: source /etc/profile.d/jdk.sh &amp;&amp; nohup /usr/local/apache-tomcat-8.5.45/bin/startup.sh &amp;</span><br></pre></td></tr></table></figure><h4 id="剧本实现编译安装nginx"><a href="#剧本实现编译安装nginx" class="headerlink" title="剧本实现编译安装nginx"></a>剧本实现编译安装nginx</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: web09</span><br><span class="line">  user: root</span><br><span class="line">  vars:</span><br><span class="line">        install_dir: "/usr/local"</span><br><span class="line">  tasks: </span><br><span class="line">    - name: 安装编译环境</span><br><span class="line">      yum: name=&#123;&#123; item &#125;&#125; state=present</span><br><span class="line">      loop: </span><br><span class="line">        - gcc</span><br><span class="line">        - gcc-c++</span><br><span class="line">        - pcre</span><br><span class="line">        - pcre-devel</span><br><span class="line">        - openssl</span><br><span class="line">        - openssl-devel</span><br><span class="line">        - zlib</span><br><span class="line">        - zlib-devel</span><br><span class="line">    </span><br><span class="line">    - name: 创建用户nginx</span><br><span class="line">      user: name=nginx state=present shell=/sbin/nologin</span><br><span class="line"></span><br><span class="line">    - name: 解压安装包</span><br><span class="line">      unarchive: src=/opt/nginx-1.24.0.tar.gz dest=&#123;&#123; install_dir &#125;&#125;</span><br><span class="line"></span><br><span class="line">    - name: 编译安装</span><br><span class="line">      shell: cd /usr/local/nginx-1.24.0/ &amp;&amp; ./configure --prefix=/usr/local/nginx --group=nginx --user=nginx --sbin-path=/usr/local/nginx/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/tmp/nginx/client_body --http-proxy-temp-path=/tmp/nginx/proxy --http-fastcgi-temp-path=/tmp/nginx/fastcgi --pid-path=/var/run/nginx.pid --lock-path=/var/lock/nginx --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --with-pcre --with-http_realip_module --with-stream  &amp;&amp;  make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">    - name: 创建目录/tmp/nginx</span><br><span class="line">      file: path=/tmp/nginx state=directory</span><br><span class="line"></span><br><span class="line">    - name: 配置systemd启动脚本</span><br><span class="line">      copy: </span><br><span class="line">        content: |</span><br><span class="line">         <span class="section">[Unit]</span></span><br><span class="line">         Description=nginx - high performance web server</span><br><span class="line">         Documentation=http://nginx.org/en/docs/</span><br><span class="line">         After=network-online.target remote-fs.target nss-lookup.target</span><br><span class="line">         Wants=network-online.target</span><br><span class="line"></span><br><span class="line">         <span class="section">[Service]</span></span><br><span class="line">         Type=forking</span><br><span class="line">         PIDFile=/var/run/nginx.pid</span><br><span class="line">         ExecStart=/usr/local/nginx/sbin/nginx -c /etc/nginx/nginx.conf</span><br><span class="line">         ExecReload=/bin/sh -c "/bin/kill -s HUP \$(/bin/cat /var/run/nginx.pid)"</span><br><span class="line">         ExecStop=/bin/sh -c "/bin/kill -s TERM \$(/bin/cat /var/run/nginx.pid)"</span><br><span class="line"></span><br><span class="line">         <span class="section">[Install]</span></span><br><span class="line">         WantedBy=multi-user.target </span><br><span class="line">        dest: /lib/systemd/system/nginx.service</span><br><span class="line"></span><br><span class="line">    - name: 启动nginx</span><br><span class="line">      service: name=nginx state=started enabled=yes</span><br></pre></td></tr></table></figure><h4 id="剧本实现mysql登陆、修改密码、刷新权限、建库和导入数据"><a href="#剧本实现mysql登陆、修改密码、刷新权限、建库和导入数据" class="headerlink" title="剧本实现mysql登陆、修改密码、刷新权限、建库和导入数据"></a>剧本实现mysql登陆、修改密码、刷新权限、建库和导入数据</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: web09</span><br><span class="line">  user: root</span><br><span class="line">  vars:</span><br><span class="line">    root_password: "1"</span><br><span class="line">    new_password: "ldqldq666"</span><br><span class="line">    db_name: "ruoyi"</span><br><span class="line">    db_charset: "utf8mb4" </span><br><span class="line">  tasks:</span><br><span class="line">    - name: 修改mysql密码并设置允许远程连接</span><br><span class="line">      mysql_user:</span><br><span class="line">        name: root</span><br><span class="line">        host: '%'</span><br><span class="line">        password: "&#123;&#123; new_password &#125;&#125;"</span><br><span class="line">        priv: '*.*:ALL,GRANT'</span><br><span class="line">        state: present</span><br><span class="line">        login_user: root</span><br><span class="line">        login_password: "&#123;&#123; root_password &#125;&#125;"</span><br><span class="line"></span><br><span class="line">    - name: 刷新权限</span><br><span class="line">      mysql_db:</span><br><span class="line">        name: mysql</span><br><span class="line">        state: import</span><br><span class="line">        target: /dev/null</span><br><span class="line">        login_user: root</span><br><span class="line">        login_password: "&#123;&#123; new_password &#125;&#125;"</span><br><span class="line">      ignore_errors: yes</span><br><span class="line"></span><br><span class="line">    - name: 重启mysql</span><br><span class="line">      service:</span><br><span class="line">        name: mysqld</span><br><span class="line">        state: restarted</span><br><span class="line"></span><br><span class="line">    - name: 创建ruoyi数据库</span><br><span class="line">      mysql_db:</span><br><span class="line">        name: "&#123;&#123; db_name &#125;&#125;"</span><br><span class="line">        encoding: "&#123;&#123; db_charset &#125;&#125;"</span><br><span class="line">        state: present</span><br><span class="line">        login_user: root</span><br><span class="line">        login_password: "&#123;&#123; new_password &#125;&#125;"</span><br><span class="line"></span><br><span class="line">    - name: 导入数据</span><br><span class="line">      shell: mysql -uroot -p'&#123;&#123; new_password  &#125;&#125;'  ruoyi &lt; /root/RuoYi-Vue/sql/ry_20240629.sql</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://l66stbz.github.io/tags/Linux/"/>
    
      <category term="Ansible" scheme="https://l66stbz.github.io/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>企业自动化运维神器Ansible(1)</title>
    <link href="https://l66stbz.github.io/2024/08/20/%E4%BC%81%E4%B8%9A%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E7%A5%9E%E5%99%A8Ansible(1)/"/>
    <id>https://l66stbz.github.io/2024/08/20/%E4%BC%81%E4%B8%9A%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E7%A5%9E%E5%99%A8Ansible(1)/</id>
    <published>2024-08-20T13:50:00.000Z</published>
    <updated>2024-08-24T06:07:26.872Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="企业级自动化运维工具Ansible"><a href="#企业级自动化运维工具Ansible" class="headerlink" title="企业级自动化运维工具Ansible"></a>企业级自动化运维工具Ansible</h1><p>[TOC]</p><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><h3 id="1、自动化运维发展历程"><a href="#1、自动化运维发展历程" class="headerlink" title="1、自动化运维发展历程"></a>1、自动化运维发展历程</h3><ol><li><h4 id="手动运维阶段"><a href="#手动运维阶段" class="headerlink" title="手动运维阶段"></a><strong>手动运维阶段</strong></h4></li></ol><p><strong>特点：</strong></p><ul><li><strong>早期计算机时代</strong>：主要依赖运维人员手动管理服务器等。</li><li><strong>集中管理和人工操作</strong>：系统更新、配置、监控、故障排查等任务全部手动完成。</li><li><strong>局限性</strong>：效率低下、容易出现人为错误，且无法应对大规模环境。</li></ul><p><strong>典型场景：</strong>小型数据中心，几台服务器，运维人员使用SSH等手动登录服务器进行操作。</p><ol start="2"><li><h4 id="脚本化运维阶段"><a href="#脚本化运维阶段" class="headerlink" title="脚本化运维阶段"></a><strong><code>脚本化运维阶段</code></strong></h4></li></ol><p><strong>特点</strong>：</p><ul><li><strong>自动化初步萌芽</strong>：运维人员开始使用Shell、Python、Perl等脚本语言来实现部分重复性任务的自动化，如批量部署、日志收集、监控和报警等。</li><li><strong>自定义脚本和工具</strong>：企业根据需求编写自定义脚本来简化日常运维工作，减少手动操作。</li></ul><p><strong>典型场景：</strong>通过Shell脚本实现批量管理、定时任务调度等，减轻重复性工作负担。</p><ol start="3"><li><h4 id="运维工具化阶段"><a href="#运维工具化阶段" class="headerlink" title="运维工具化阶段"></a><strong><code>运维工具化阶段</code></strong></h4></li></ol><p><strong>特点：</strong></p><ul><li><strong>引入专用运维工具</strong>：随着IT基础设施的复杂化，运维工具逐渐普及。常见工具如Puppet、Ansible、SaltStack等开始出现，提供了标准化的自动化运维能力。</li><li><strong>集中式管理</strong>：通过工具的集中式管理能力，运维人员可以统一管理多台服务器，实现大规模环境下的自动化部署、配置管理和系统更新。</li></ul><p><strong>典型应用：</strong>使用Puppet进行配置管理，Ansible进行批量操作，SaltStack进行大规模部署。</p><ol start="4"><li><h4 id="容器化和微服务运维阶段"><a href="#容器化和微服务运维阶段" class="headerlink" title="容器化和微服务运维阶段"></a><strong><code>容器化和微服务运维阶段</code></strong></h4></li></ol><p><strong>特点：</strong></p><ul><li><strong>容器化</strong>：随着Docker和Kubernetes等技术的普及，运维自动化进入了容器化时代。基础设施以容器为单位进行管理，运维流程更加简化和标准化。</li><li><strong>微服务架构</strong>：应用被拆解为独立的微服务，运维需要应对大量的分布式服务，自动化工具集成了容器编排、服务发现、动态伸缩等功能。</li><li><strong>持续集成和持续交付（CI/CD）</strong>：Jenkins、GitLab CI等工具与Kubernetes和Docker相结合，实现了自动化的应用交付和部署。</li></ul><p><strong>典型应用：</strong>Kubernetes用于容器编排，结合CI/CD流水线实现自动化应用发布和扩展。</p><h3 id="2、自动化运维工具对比"><a href="#2、自动化运维工具对比" class="headerlink" title="2、自动化运维工具对比"></a>2、自动化运维工具对比</h3><ul><li><strong>Puppet：</strong>基于 Ruby 开发,采用 C/S 架构,扩展性强,基于SSL,远程命令执行相对较弱；</li><li><strong>SaltStack：</strong>基于 Python 开发,采用 C/S 架构,相对 puppet 更轻量级,配置语法使用YAML,使得配置脚本更简单.需要配置客户端以及服务器端。每台被控制节点需要安装agent；</li><li><strong>Ansible：</strong>基于Python开发,分布式,无需客户端,轻量级,配置语法使用YAML语言,更强的远程命令执行操作。</li></ul><h3 id="3、Ansible简介"><a href="#3、Ansible简介" class="headerlink" title="3、Ansible简介"></a>3、Ansible简介</h3><p>​    <strong>ansible是自动化运维工具，基于Python开发、分布式、无需客户端、轻量级。实现了批量系统配置、批量程序部署、批量运行命令等功能。</strong></p><p><strong>ansible是基于模块工作的,本身没有批量部署的能力。真正具有批量部署的是ansible所运行的模块,ansible只是提供一种框架。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Ansible特性</span><br><span class="line">    1)、no agents：不需要在被管控主机上安装任何客户端,更新时,只需在操作机上进行一次更新即可（不用安装客户端。分布式的）</span><br><span class="line">    2)、no server：无服务器端,使用时直接运行命令即可</span><br><span class="line">    3)、modules in any languages：基于模块工作,可使用任意语言开发模块</span><br><span class="line">    4)、yaml,not code：使用yaml语言定制剧本playbook</span><br><span class="line">    5)、ssh by default：基于SSH工作</span><br><span class="line">    6)、strong multi-tier solution：可实现多级指挥</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1567243310363.png" alt="1567243310363"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">connection plugins：连接插件,负责和被监控端实现通信,默认使用SSH连接。</span><br><span class="line">host inventory：主机清单,是一个配置文件里面定义监控的主机。</span><br><span class="line">modules : 模块,核心模块、command模块、自定义模块等。</span><br><span class="line">plugins : modules功能的补充,包括连接插件,邮件插件等。</span><br><span class="line">playbook：编排,定义 Ansible 多任务配置文件,非必需。</span><br></pre></td></tr></table></figure><h2 id="二、ansible安装"><a href="#二、ansible安装" class="headerlink" title="二、ansible安装"></a>二、ansible安装</h2><h4 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.  环境准备"></a>1.  环境准备</h4><ol><li><strong>初始化工作</strong></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 本地解析</span></span><br><span class="line">$ cat /etc/hosts</span><br><span class="line">192.168.174.20 ansible-server</span><br><span class="line">192.168.174.21 ansible-web01</span><br><span class="line">192.168.174.22 ansible-web02</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 关闭防火墙及selinux</span></span><br><span class="line">$ systemctl disable --now firewalld &amp;&amp; setenforce 0</span><br><span class="line">$ sed -i 's#SELINUX=enforcing#SELINUX=disabled#g' /etc/selinux/config</span><br></pre></td></tr></table></figure><ol start="2"><li><strong><code>ansible-server</code>生成SSH密钥对</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 生成密钥</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ssh-keygen</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看密钥</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ll ~/.ssh/</span></span><br><span class="line">总用量 8</span><br><span class="line">-rw-------. 1 root root 1679 8月  18 13:33 id_rsa</span><br><span class="line">-rw-r--r--. 1 root root  408 8月  18 13:33 id_rsa.pub</span><br></pre></td></tr></table></figure><ol start="3"><li><strong><code>ansible-server</code>传递公钥</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 传递公钥</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># for i in ansible-web0&#123;1..2&#125;;do ssh-copy-id -i $i;done</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>安装</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 配置EPEL网络yum源</span></span><br><span class="line">[root@ansible-server ~]# curl -o /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 安装ansible</span></span><br><span class="line">[root@ansible-server ~]# yum install -y ansible</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 查看版本</span></span><br><span class="line">[root@ansiable-server ~]# ansible --version</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 查看帮助</span></span><br><span class="line">[root@ansible-server ~]# ansible --help</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408181440961.png" alt="image-20240818144013877"></p><h2 id="三、Ansible-文件介绍"><a href="#三、Ansible-文件介绍" class="headerlink" title="三、Ansible 文件介绍"></a>三、Ansible 文件介绍</h2><h3 id="1、主配置文件"><a href="#1、主配置文件" class="headerlink" title="1、主配置文件"></a>1、主配置文件</h3><p><strong>文件位置：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/ansible/ansible.cfg</span><br></pre></td></tr></table></figure><p><strong>常用文件内容介绍：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#inventory      = /etc/ansible/hosts</span></span><br><span class="line"><span class="comment">#library        = /usr/share/my_modules/</span></span><br><span class="line"><span class="comment">#module_utils   = /usr/share/my_module_utils/</span></span><br><span class="line"><span class="comment">#remote_tmp     = ~/.ansible/tmp</span></span><br><span class="line"><span class="comment">#local_tmp      = ~/.ansible/tmp</span></span><br><span class="line"><span class="comment">#plugin_filters_cfg = /etc/ansible/plugin_filters.yml</span></span><br><span class="line"><span class="comment">#forks          = 5</span></span><br><span class="line"><span class="comment">#poll_interval  = 15</span></span><br><span class="line"><span class="comment">#sudo_user      = root</span></span><br><span class="line"><span class="comment">#ask_sudo_pass = True</span></span><br><span class="line"><span class="comment">#ask_pass      = True</span></span><br><span class="line"><span class="comment">#transport      = smart</span></span><br><span class="line"><span class="comment">#remote_port    = 22</span></span><br></pre></td></tr></table></figure><ol><li><code>#inventory = /etc/ansible/hosts</code></li></ol><ul><li><strong>解释</strong>： Ansible 的默认<code>主机清单</code>位置。主机清单列出了目标主机的 IP 地址或主机名。</li></ul><ol start="2"><li><code>#library = /usr/share/my_modules/</code></li></ol><ul><li><strong>解释</strong>：指定 Ansible 自定义模块的库路径。默认情况下，Ansible 使用内置的模块，但通过设置 <code>library</code>，你可以将自己编写的自定义模块放在 <code>/usr/share/my_modules/</code> 目录中。</li></ul><ol start="4"><li><code>#remote_tmp = ~/.ansible/tmp</code></li></ol><ul><li><strong>解释</strong>：指定 Ansible 在远程主机上存储临时文件的路径。默认情况下，Ansible 会在远程主机的 <code>~/.ansible/tmp</code> 目录中创建临时文件和目录。</li></ul><ol start="5"><li><code>#local_tmp = ~/.ansible/tmp</code></li></ol><ul><li><strong>解释</strong>：指定 Ansible 在本地主机上存储临时文件的路径。Ansible 会在执行任务时在本地生成临时文件，默认路径是 <code>~/.ansible/tmp</code>。</li></ul><ol start="6"><li><code>#plugin_filters_cfg = /etc/ansible/plugin_filters.yml</code></li></ol><ul><li><strong>解释</strong>：过滤 Ansible 插件的配置文件路径。这个配置文件控制哪些插件可以加载和使用。</li></ul><ol start="7"><li><code>#forks = 5</code></li></ol><ul><li><strong>解释</strong>：Ansible 并行处理的最大任务数量。</li></ul><ol start="8"><li><code>#poll_interval = 15</code></li></ol><ul><li><strong>解释</strong>：Ansible 检查后台任务状态的轮询间隔，单位是秒。默认情况下，Ansible 每隔 15 秒检查一次后台运行的任务状态。</li></ul><ol start="9"><li><code>#sudo_user = root</code></li></ol><ul><li><strong>解释</strong>：远程主机上执行命令时的默认 sudo 用户。这里配置的是 <code>root</code> 用户，意味着 Ansible 在使用 sudo 提权时会尝试以 root 用户身份执行任务。</li></ul><ol start="10"><li><code>#ask_sudo_pass = True</code></li></ol><ul><li><strong>解释</strong>：Ansible 将在运行任务时提示输入 sudo 密码。这在目标主机配置了需要输入 sudo 密码的情况下使用。</li></ul><ol start="11"><li><code>#ask_pass = True</code></li></ol><ul><li><strong>解释</strong>：Ansible 将在运行任务时提示输入 SSH 密码。如果目标主机不使用密钥认证而是通过密码登录，可以启用此项。</li></ul><ol start="12"><li><code>#transport = smart</code></li></ol><ul><li><strong>解释</strong>：Ansible 与目标主机通信时使用的传输方式。默认的 <code>smart</code> 模式会自动选择最佳的传输方式（通常是基于 SSH）。</li></ul><ol start="13"><li><code>#remote_port = 22</code></li></ol><ul><li><strong>解释</strong>：Ansible 连接到远程主机时使用的默认 SSH 端口。默认值为 <code>22</code>。</li></ul><h3 id="2、主机清单"><a href="#2、主机清单" class="headerlink" title="2、主机清单"></a>2、主机清单</h3><p><strong>文件位置：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/ansible/hosts</span><br></pre></td></tr></table></figure><p>官方文档:  <a href="http://docs.ansible.com/ansible/intro_inventory.html#" target="_blank" rel="noopener">http://docs.ansible.com/ansible/intro_inventory.html#</a></p><p><strong><code>Inventory文件</code>通常用于定义要管理主机的认证信息，例如ssh登录用户名、密码以及key相关信息。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 查看配置文件</span></span><br><span class="line">[root@ansible-server ~]# rpm  -qc ansible</span><br><span class="line">/etc/ansible/ansible.cfg</span><br><span class="line">/etc/ansible/hosts#ansible主机清单文件</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt;语法:</span></span><br><span class="line">[root@ansible-server ~]# vim /etc/ansible/hosts</span><br><span class="line">ansible-web1  # 单独指定主机，可以使用主机名称或IP地址</span><br><span class="line"></span><br><span class="line">[webservers]  # 主机群组自定义</span><br><span class="line">192.168.174.21 # 未做本地解析的主机地址</span><br><span class="line">192.168.174.22 # 未做本地解析的主机地址</span><br><span class="line"></span><br><span class="line">[dbservers] # 自定义主机群组</span><br><span class="line">192.168.174.[21:22]</span><br><span class="line"></span><br><span class="line">[zabbix] # 自定义主机群组</span><br><span class="line">192.168.174.21:22 # 未做本地解析的主机地址加端口</span><br><span class="line"></span><br><span class="line">[redis] # 自定义主机名</span><br><span class="line">ansible-web02 # 经过本地解析的主机名</span><br><span class="line"></span><br><span class="line">[servers:children] # 集合多个子群组</span><br><span class="line">zabbix</span><br><span class="line">redis</span><br><span class="line"></span><br><span class="line">[webservers01] # 自定义主机群组</span><br><span class="line">ansible-web0[1:2] # 经过本地解析的主机名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为一个组指定变量，组内每个主机都可以使用该变量：</span></span><br><span class="line">[weball:vars]         # 设置变量,vars--照写</span><br><span class="line">ansible_ssh_port=2222     </span><br><span class="line">ansible_ssh_user=root   </span><br><span class="line">ansible_ssh_private_key_file=/root/.ssh/id_rsa  </span><br><span class="line"><span class="meta">#</span><span class="bash">ansible_ssh_pass=<span class="built_in">test</span>      <span class="comment">#也可以定义密码，如果没有互传秘钥可以使用密码。</span></span></span><br></pre></td></tr></table></figure><p> Ansible Inventory 常见的内置参数：</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1567262857205.png" alt="1567262857205"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 查看组内主机列表：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 语法：ansible  组名  --list-hosts</span></span><br><span class="line">[root@ansible-server ~]# ansible webservers --list-host</span><br><span class="line">  hosts (2):</span><br><span class="line">    192.168.174.21</span><br><span class="line">    192.168.174.22</span><br></pre></td></tr></table></figure><h3 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h3><p><code>Ansible</code>常用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 列出所有模块</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible-doc -l</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看某个模块帮助用法</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible-doc ping</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看某个模块帮助用法</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible-doc  -s ping</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="meta">#</span><span class="bash"> ansible  &lt;pattern&gt;   -m &lt;module_name&gt;   -a &lt;arguments&gt;</span></span><br><span class="line">pattern--主机清单里定义的主机组名、主机名、IP等,all表示所有的主机,支持通配符,正则</span><br><span class="line">-m# 模块名称,默认为command</span><br><span class="line">-a# 传递给模块的参数</span><br><span class="line">-o# 单行显示</span><br><span class="line">-c# 检查，不执行命令</span><br><span class="line">-k# 提示输入ssh连接密码。默认ssh key认证</span><br><span class="line">-v# 详细过程 -vv -vvv更详细</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 示例</span></span><br><span class="line">[root@ansible-server ~]# ansible webservers -m ping</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408181526198.png" alt="image-20240818152656146"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible-server ~]<span class="comment"># ansible all -m ping -o</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408181605472.png" alt="image-20240818160505421"></p><p>使用案例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 指定单台机器：</span></span><br><span class="line">[root@ansible-server ~]# ansible ansible-web1 -m ping -o</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 同时指定多台机器：</span></span><br><span class="line">[root@ansible-server ~]# ansible ansible-web1,ansible-web2 -m ping -o</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 指定组名:</span></span><br><span class="line">[root@ansible-server ~]# ansible  webservers1 -m ping -o</span><br></pre></td></tr></table></figure><h3 id="4、Ansible执行过程"><a href="#4、Ansible执行过程" class="headerlink" title="4、Ansible执行过程"></a>4、Ansible执行过程</h3><ol><li><p>Ansible 在执行命令之前会加载配置文件（通常位于 <code>/etc/ansible/ansible.cfg</code>）并读取主机清单文件。</p></li><li><p>Ansible 根据配置文件或命令行参数决定如何连接远程主机。</p></li><li><p>Ansible 使用<strong>模块</strong>（module）在远程主机上执行具体任务。Ansible 会将模块发送到远程主机，并通过 Python 解释器或其他指定解释器执行这些模块。但需要注意的是：ansible会将模块或者命令生成对应的临时文件，并将文件通过ssh传输至远程主机的对应执行用户的<code>$HOME/.ansible/tmp/ansible-tmp-随机数字/随机字符串.py</code>文件。并添加执行权限。</p></li><li><p>模块执行完成后，Ansible 会收集结果并将其返回到控制节点。每个模块返回的数据为 JSON 格式，Ansible 会将这些数据解析为易读的输出，显示在控制台中。删除临时py文件。并退出。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 测试</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible all -m ping  -vvv   &gt; test.log</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># grep rm  test.log</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408181647679.png" alt="image-20240818164734639"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible-server ~]<span class="comment"># grep rm  test.log</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408181648295.png" alt="image-20240818164827261"></p><h3 id="5、Ansible执行颜色分类"><a href="#5、Ansible执行颜色分类" class="headerlink" title="5、Ansible执行颜色分类"></a>5、Ansible执行颜色分类</h3><ul><li><p><strong><code>绿色</code></strong>：执行成功并且没有改变内容；</p></li><li><p><strong><code>黄色</code></strong>：执行成功并且对目标主机做的更改操作；</p></li><li><p><strong><code>红色</code></strong>：命令或模块没有执行成功。</p></li></ul><h3 id="6、Ansible中shell模块几乎可以做任何事情，那为什么要有别的那么多模块且写剧本的时候明明可以从头到尾使用shell模块，但是为什么还是要使用别的模块呢？"><a href="#6、Ansible中shell模块几乎可以做任何事情，那为什么要有别的那么多模块且写剧本的时候明明可以从头到尾使用shell模块，但是为什么还是要使用别的模块呢？" class="headerlink" title="6、Ansible中shell模块几乎可以做任何事情，那为什么要有别的那么多模块且写剧本的时候明明可以从头到尾使用shell模块，但是为什么还是要使用别的模块呢？"></a>6、Ansible中shell模块几乎可以做任何事情，那为什么要有别的那么多模块且写剧本的时候明明可以从头到尾使用shell模块，但是为什么还是要使用别的模块呢？</h3><p>因为幂等性。在 Ansible 中，幂等性指的是运行相同的剧本或任务多次时，其结果应该是相同的，不会产生副作用或重复更改。也就是说，不论你执行剧本多少次，系统的最终状态都应保持一致，不会改变。</p><p>而如果我们从头到尾shell的话，是无法保证幂等性的，有的时候可能一些操作之前已经之前过了，如果使用shell的话他还会再给我们执行一次，回显颜色会为黄色。但是如果我们使用的是其对应功能的模块的话，那么他会检查我们之前是否做过这步操作，如果做过他就不会再执行。回显为绿色。</p><p>所以这会对运维人员有些许干扰，因为大部分情况我们会根据回显颜色来判断执行的结果。情况严重的话，有可能会产生一些副作用。</p><p>ansible中分模块来干不同的事情有点类似于微服务架构，采用分布式，降低了紧密型（解耦），增加了可维护性。</p><h2 id="四、Ansible模块使用"><a href="#四、Ansible模块使用" class="headerlink" title="四、Ansible模块使用"></a>四、Ansible模块使用</h2><h3 id="1、command模块（默认）"><a href="#1、command模块（默认）" class="headerlink" title="1、command模块（默认）"></a>1、<code>command</code>模块（默认）</h3><p>​    <code>ansible</code> 的 <code>command</code> 模块是最常用的模块之一，它用于在远程主机上运行命令。与 <code>shell</code> 模块不同的是，<code>command</code> 模块执行命令时不会通过 shell 执行，因此不支持管道、重定向等 shell 特性。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m command -a "uptime"</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408181659986.png" alt="image-20240818165933947"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers  -a "df -Th"</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408181659305.png" alt="image-20240818165959247"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers  -a "ls "</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408181701718.png" alt="image-20240818170134686"></p><h3 id="2、shell模块"><a href="#2、shell模块" class="headerlink" title="2、shell模块"></a>2、<code>shell</code>模块</h3><p>​        Ansible 的 <code>shell</code> 模块用于在远程主机上通过 shell 执行命令。与 <code>command</code> 模块不同的是，<code>shell</code> 模块允许你使用所有的 shell 特性，例如管道、重定向、变量扩展等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers  -m shell  -a "df -Th | grep root"</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408181705083.png" alt="image-20240818170522034"></p><h3 id="3、USER模块"><a href="#3、USER模块" class="headerlink" title="3、USER模块"></a>3、<code>USER</code>模块</h3><p>​         <code>user</code> 模块用于在远程主机上管理用户账户。它能够创建、删除、修改用户以及设置用户的权限、组和密码等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 创建用户</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m user -a "name=maoxiansheng state=present" -o</span></span><br><span class="line"></span><br><span class="line">name<span class="comment"># 用户名</span></span><br><span class="line">state<span class="comment"># 创建</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408181713168.png" alt="image-20240818171306121"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 删除用户</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m user -a "name=maoxiansheng state=absent remove=yes"  -o</span></span><br><span class="line"></span><br><span class="line">name<span class="comment"># 用户名</span></span><br><span class="line">state<span class="comment"># 删除操作</span></span><br><span class="line">remove<span class="comment"># 慎用！删除用户时，除了删除用户本身，还会删除该用户的相关资源（如用户的家目录及相关文件）。默认情况下，这个选项是 no，即只删除用户而不删除其文件。</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408181714153.png" alt="image-20240818171430115"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 创建用户并设置Shell和主目录</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible  webservers -m user -a "user=mingge home=/home/mingge state=present shell=/bin/bash" -o</span></span><br><span class="line"></span><br><span class="line">name<span class="comment"># 用户名</span></span><br><span class="line">state<span class="comment"># 创建</span></span><br><span class="line">shell<span class="comment"># 指定所创建用户shell</span></span><br><span class="line">home<span class="comment"># 指定所创建用户家目录</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408181717407.png" alt="image-20240818171717360"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 添加用户到指定组</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m user -a "name=feige groups=mingge append=yes password='123'"  -o</span></span><br><span class="line"></span><br><span class="line">name<span class="comment"># 用户名</span></span><br><span class="line">groups<span class="comment"># 加入指定组</span></span><br><span class="line">append<span class="comment"># 不会删除他已经属于的其他组。即追加到该组，而不是替换原来的组。</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408181723058.png" alt="image-20240818172331003"></p><h3 id="4、yum模块"><a href="#4、yum模块" class="headerlink" title="4、yum模块"></a>4、<code>yum</code>模块</h3><p>​     <code>yum</code> 模块用于主要通过 <code>yum</code> 包管理器进行安装、升级、删除和管理仓库。它是处理软件包的一个常见模块，适用于基于 <code>yum</code> 包管理器的 Linux 发行版。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 安装服务</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m yum -a "name=nginx state=present"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 删除服务</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m yum -a "name=nginx state=removed"</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m yum -a "name=nginx state=absent" </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 升级软件包到最新版本</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m yum -a "name=nginx state=latest" </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 安装指定版本</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m yum -a "name=nginx-1.24.0  state=present" </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 安装多个软件包</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m yum -a "name=git,vim state=present"</span></span><br></pre></td></tr></table></figure><h3 id="5、service模块"><a href="#5、service模块" class="headerlink" title="5、service模块"></a>5、<code>service</code>模块</h3><p>​        <code>service</code> 模块用于管理系统服务，例如启动、停止、重启服务或确保服务处于特定状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 启动服务</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m service -a "name=nginx  state=started"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 停止服务</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m service -a "name=nginx  state=stopped"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 重启服务</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m service -a "name=nginx  state=restarted"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 启动服务并加入开机自启</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m service -a "name=nginx  state=started enabled=yes"</span></span><br></pre></td></tr></table></figure><h3 id="6、file模块"><a href="#6、file模块" class="headerlink" title="6、file模块"></a>6、<code>file</code>模块</h3><p>​        <code>file</code> 模块用于管理文件、目录和符号链接的属性，包括创建、删除、修改权限等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 创建目录</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m file -a "path=/tmp/mingge state=directory" -o</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 创建文件</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m file -a "path=/tmp/mingge/1.txt state=touch" -o</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 删除目录或者文件</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m file -a "path=/tmp/mingge/1.txt state=absent" -o</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 修改文件权限</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m file -a "path=/tmp/mingge mode=0777" -o</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 修改文件属主和属组</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m file -a "path=/tmp/mingge/ owner=mingge group=mingge" -o</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 创建文件并设置权限</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m file -a "path=/tmp/2.txt state=touch mode=0777 owner=mingge group=mingge" -o</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 创建符号链接</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m file -a "src=/tmp/2.txt dest=/root/2.txt state=link" -o</span></span><br></pre></td></tr></table></figure><h3 id="7、copy模块"><a href="#7、copy模块" class="headerlink" title="7、copy模块"></a>7、<code>copy</code>模块</h3><p>​         <code>copy</code> 模块用于从控制节点将文件或目录复制到目标主机。</p><p><strong>常见选项：</strong></p><ul><li><strong><code>src</code></strong>：源文件或目录的路径。</li><li><strong><code>dest</code></strong>：目标路径。</li><li><strong><code>backup</code></strong>：是否在目标上备份现有文件（值为 <code>yes</code> 时备份）。</li><li><strong><code>force</code></strong>：是否强制覆盖目标文件（默认为 <code>yes</code>）。</li><li><strong><code>mode</code></strong>：设置目标文件或目录的权限（如 <code>0644</code>）。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 复制单个文件到远程主机</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m copy -a "src=/etc/hosts dest=/etc/ force=yes" -o</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 复制目录到远程主机</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m copy -a "src=/root/ops dest=/root/  force=yes" -o</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<strong>如果需要拷贝的目录为空，则无法拷贝至目标主机。</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 复制文件并修改权限</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m copy -a "src=/root/test dest=/root/test01 mode=0777" -o</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 复制文件并备份现有文件</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m copy -a "src=/root/test dest=/root/test01 backup=yes" -o</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 不覆盖已有文件</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m copy -a "src=/root/test dest=/root/test01 force=no" -o</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：不覆盖文件代表含义就是。但是需要拷贝的文件在目标主机的路径下存在。则不执行copy</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 利用字符串生成新文件</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m copy -a "content='name mingge\nage 18\n' dest=/tmp/test.txt" -o </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看文件内容</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m shell -a "cat /tmp/test.txt" -o</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408182129331.png" alt="image-20240818212923301"></p><h3 id="8、Script模块"><a href="#8、Script模块" class="headerlink" title="8、Script模块"></a>8、<code>Script</code>模块</h3><p>​         <code>script</code> 模块用于在<strong>目标主机</strong>上执行<strong>本地脚本</strong>。但需要注意的是<code>script</code> 模块只是在远程主机上执行<strong>ansible</strong>本地脚本，因此需要确保脚本是可以在远程主机的环境中正确执行的。执行脚本的路径必须是相对于控制节点的路径，而不是远程主机的路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 编写测试脚本</span></span><br><span class="line">cat &gt;&gt; echo.sh &lt;&lt;-EOF</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello.world"</span></span><br><span class="line">sleep 10</span><br><span class="line">touch test01.txt</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 执行脚本</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m script  -a "./echo.sh" -o</span></span><br></pre></td></tr></table></figure><h3 id="9、archive模块"><a href="#9、archive模块" class="headerlink" title="9、archive模块"></a>9、<code>archive</code>模块</h3><p>​         <code>archive</code> 模块用于在目标主机上创建压缩文件（归档文件）到目标主机的指定目录。它可以将文件或目录打包成 tar、zip 或其他格式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 压缩目录</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m archive -a "path=/root dest=./root.zip format=zip" -o</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 压缩多个目录或文件</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m archive -a "path=/root,/opt,/tmp/test10.txt dest=/tar/lastest.tar.gz" -o</span></span><br></pre></td></tr></table></figure><h3 id="10、unarchive模块"><a href="#10、unarchive模块" class="headerlink" title="10、unarchive模块"></a>10、<code>unarchive</code>模块</h3><p>​        <code>unarchive</code> 模块用于在目标主机上解压存档文件（如 <code>.tar</code>, <code>.zip</code> 等）。也可以将控制主机的压缩包拷贝至目标主机解压或远程的压缩文件，并将其解压到指定的目录中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 将当前主机的压缩包拷贝目标主机并解压,并且修改相关权限</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m unarchive -a 'src=./nginx-1.24.0.tar.gz dest=/usr/local/ owner=root group=root mode=0755' -o</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible  webservers  -m shell -a "ls -l  /usr/local/ | grep nginx"</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408182159547.png" alt="image-20240818215951506"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 将目标主机压缩包解压到指定目录</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m copy -a "src=./nginx-1.24.0.tar.gz dest=/root" -o</span></span><br><span class="line"></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m unarchive -a 'src=/root/nginx-1.24.0.tar.gz dest=/usr/local/ owner=root group=root mode=0755 copy=no' -o</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408182205827.png" alt="image-20240818220503783"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 从远程连接下载安装包，并解压到指定目录</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m unarchive -a "src=https://nginx.org/download/nginx-1.27.1.tar.gz dest=/opt owner=root group=root mode=0755 copy=no" -o</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible  webservers  -m shell -a "ls -l  /opt | grep nginx"</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408182211648.png" alt="image-20240818221117597"></p><h3 id="11、Fetch模块"><a href="#11、Fetch模块" class="headerlink" title="11、Fetch模块"></a>11、<code>Fetch</code>模块</h3><p>​        <code>fetch</code> 模块用于从远程主机复制<strong>文件</strong>到本地主机。该模块的主要用途是从目标机器获取文件（如日志、配置文件等）并存储在控制节点的指定位置。目前还没有远程拷贝目录到控制主机的功能。未来可能会实现！记住是可能哟。嘿嘿！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 将目标主机文件拷贝到当前主机目录下</span></span><br><span class="line">[root@ansible-server ~]# ansible webservers -m fetch -a "src=/etc/redhat-release dest=/tmp" -o</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 查看本地目录</span></span><br><span class="line">[root@ansible-server ~]# tree /tmp/</span><br><span class="line">/tmp/</span><br><span class="line">├── 192.168.174.21</span><br><span class="line">│   └── etc</span><br><span class="line">│       └── redhat-release</span><br><span class="line">├── 192.168.174.22</span><br><span class="line">│   └── etc</span><br><span class="line">│       └── redhat-release</span><br></pre></td></tr></table></figure><h3 id="12、Hostname模块"><a href="#12、Hostname模块" class="headerlink" title="12、Hostname模块"></a>12、<code>Hostname</code>模块</h3><p>​         <code>hostname</code> 模块用于在远程主机上设置或获取主机名。无法通过命令行设置多个主机名。否则会出现冲突。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 修改单个主机的主机名</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible 192.168.174.21 -m hostname  -a "name=web01" -o</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 测试</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible  192.168.174.21  -m shell -a "hostname"</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408182217372.png" alt="image-20240818221715339"></p><h3 id="13、Cron模块"><a href="#13、Cron模块" class="headerlink" title="13、Cron模块"></a>13、<code>Cron</code>模块</h3><p>​        <code>cron</code> 模块用于管理远程主机上的计划任务（cron jobs），可以添加、删除或修改已有的任务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 创建计划任务：周一至周五每天凌晨2点20备份数据库</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible 192.168.174.22 -m cron -a 'hour=2 minute=20 weekday=1-5 name="backup data mysql" job=/root/mysql_backup.sh'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible  192.168.174.22  -m shell -a "crontab -l"</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408182226482.png" alt="image-20240818222648449"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 禁用计划任务</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible 192.168.174.22 -m cron -a 'hour=2 minute=20 weekday=1-5 name="backup data mysql" job=/root/mysql_backup.sh disabled=yes'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># disabled=yes 禁用计划任务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible  192.168.174.22  -m shell -a "crontab -l"</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408182230517.png" alt="image-20240818223011478"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 启动计划任务</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible 192.168.174.22 -m cron -a 'hour=2 minute=20 weekday=1-5 name="backup data mysql" job=/root/mysql_backup.sh disabled=no'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible  192.168.174.22  -m shell -a "crontab -l"</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408182231113.png" alt="image-20240818223116065"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 删除计划任务</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible 192.168.174.22 -m cron -a "name='backup data mysql' state=absent" -o</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># state=absent 删除计划任务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible  192.168.174.22  -m shell -a "crontab -l"</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408182232755.png" alt="image-20240818223258724"></p><h3 id="14、Setup模块"><a href="#14、Setup模块" class="headerlink" title="14、Setup模块"></a>14、<code>Setup</code>模块</h3><p>​        <code>setup</code> 模块用于从远程主机收集“事实”，即主机的硬件、网络和操作系统相关的信息。<code>setup</code> 模块会收集诸如 IP 地址、操作系统类型、磁盘空间、内存、环境变量等信息，默认情况下，Ansible 在执行任务时会自动收集这些信息，但也可以通过显式调用 <code>setup</code> 模块来手动收集。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 查看主机内核版本</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m setup  -a "filter=ansible_kernel"</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408182243264.png" alt="image-20240818224336209"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 查看主机ipv4相关信息</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m setup  -a "filter=ansible_default_ipv4"</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408182245946.png" alt="image-20240818224520882"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 查看内存的总大小</span></span><br><span class="line">[root@ansible-server ~]<span class="comment"># ansible webservers -m setup -a 'filter=ansible_memtotal_mb'</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408182247379.png" alt="image-20240818224701311"></p><h2 id="五、ansible-playbook-剧本"><a href="#五、ansible-playbook-剧本" class="headerlink" title="五、ansible-playbook  剧本"></a>五、ansible-playbook  剧本</h2><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>​    <strong>playbook是ansible用于配置，部署，和管理被控节点的剧本</strong>。通过playbook的详细描述，执行其中的tasks，可以让远端主机达到预期的状态。playbook是由一个或多个”play”组成的列表。  当对一台机器做环境初始化的时候往往需要不止做一件事情，这时使用playbook会更加适合。通过playbook你可以一次在多台机器执行多个指令。通过这种预先设计的配置保持了机器的配置统一，并很简单的执行日常任务。</p><p>​    ansible通过不同的模块实现相应的管理，管理的方式通过定义的清单文件(hosts)所管理的主机包括认证的方式连接的端口等。所有的功能都是通过调用不同的模块(modules)来完成不同的功能的。不管是执行单条命令还是play-book都是基于清单文件。</p><h3 id="2、playbook格式"><a href="#2、playbook格式" class="headerlink" title="2、playbook格式"></a>2、<strong>playbook格式</strong></h3><p>playbook由yaml语言编写。YMAL格式是类似于JSON的文件格式，便于人理解和阅读，同时便于书写。 <code>驼峰式</code></p><p><strong>一个剧本里面可以有多个play，每个play只能有一个tasks，每个tasks可以有多个name</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Variables     # 变量元素,可传递给Tasks/Templates使用;  </span><br><span class="line">Tasks           # 任务元素,由模块定义的操作的列表，即调用模块完成任务;  </span><br><span class="line">Templates  # 模板元素,使用了模板语法的文本文件;  </span><br><span class="line">Handlers    # 处理器元素,通常指在某事件满足时触发的操作;  </span><br><span class="line">Roles           # 角色元素</span><br></pre></td></tr></table></figure><p><strong>playbook的基础组件：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">拷贝nginx安装包</span></span><br><span class="line">  <span class="attr">copy:</span> <span class="string">src=/opt/nginx-1.24.0.tar.gz</span> <span class="string">dest=/tmp</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">解压安装包</span></span><br><span class="line">  <span class="attr">unarchive:</span> <span class="string">src=/tmp/nginx-1.24.0.tar.gz</span> <span class="string">dest=/usr/local</span> <span class="string">copy=no</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">创建启动用户</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">name=nginx</span> <span class="string">shell=/sbin/nologin</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">name: </span><br><span class="line">    定义playbook或者task的名称(描述信息)，每一个play都可以完成一个任务。</span><br><span class="line">    </span><br><span class="line">hosts: </span><br><span class="line">    hosts用于指定要执行指定任务的主机。</span><br><span class="line">    </span><br><span class="line">user:</span><br><span class="line">    remote_user则用于指定远程主机上的执行任务的用户</span><br><span class="line">    </span><br><span class="line">tasks:</span><br><span class="line">    任务列表play的主体部分是task list. task list中的各任务按次序逐个在hosts中指定的所有主机上执行，即在所有主机上完成第一个任务后再开始第二个。</span><br><span class="line">    </span><br><span class="line">vars:</span><br><span class="line">   定义变量（如果不使用内部变量需要提前定义）</span><br><span class="line">   </span><br><span class="line">vars_files:</span><br><span class="line">  调用定义变量文件</span><br><span class="line">  </span><br><span class="line">notify:</span><br><span class="line">    任务执行结果如果是发生更改了的则触发定义在handler的任务执行</span><br><span class="line">    </span><br><span class="line">handlers:</span><br><span class="line">    用于当前关注的资源发生变化时采取一定指定的操作</span><br></pre></td></tr></table></figure><h3 id="1、hosts"><a href="#1、hosts" class="headerlink" title="1、hosts"></a>1、hosts</h3><p>​    <code>hosts</code> 组件定义了任务要运行在哪些主机或主机组上。<code>hosts</code> 是 Playbook 的核心部分之一，因为它决定了将这些任务分发到哪些远程主机执行。</p><ol><li><strong>语法格式</strong></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">&lt;目标主机或主机组&gt;</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">示例任务</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">echo</span> <span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>常见用法</strong></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 指定单个主机</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">server01</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 指定主机组</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 指定IP地址</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="number">192.168</span><span class="number">.174</span><span class="number">.22</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 指定所有主机</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 排除特定主机：将在所有主机上运行，除了dbservers组中的主机。</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all:!dbservers</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 模式匹配：只选择既属于 webservers 组又属于dbservers组的主机。</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">webservers:&amp;dbservers</span></span><br></pre></td></tr></table></figure><h3 id="2、tasks"><a href="#2、tasks" class="headerlink" title="2、tasks"></a>2、tasks</h3><p>​        <code>tasks</code> 组件用于定义一系列将被执行的操作。每个 <code>tasks</code> 列表中的任务都描述了一项操作（如安装软件、修改文件、管理服务等），并且它们是按顺序执行的。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">ploybook</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">yum:</span> <span class="string">name=nginx</span> <span class="string">state=present</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">启动并启用</span> <span class="string">nginx</span> <span class="string">服务</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=nginx</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br></pre></td></tr></table></figure><h3 id="3、示例"><a href="#3、示例" class="headerlink" title="3、示例"></a>3、示例</h3><h4 id="1-安装nginx服务，并且发布服务"><a href="#1-安装nginx服务，并且发布服务" class="headerlink" title="1. 安装nginx服务，并且发布服务"></a>1. <strong>安装nginx服务，并且发布服务</strong></h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 切换目录</span></span><br><span class="line"><span class="string">[root@ansible-server</span> <span class="string">~]#</span> <span class="string">cd</span> <span class="string">/opt/playbook/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 编写playbook文件</span></span><br><span class="line"><span class="string">[root@ansible-server</span> <span class="string">playbook]#</span> <span class="string">vim</span> <span class="string">nginx-install.yaml</span> </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装nginx</span></span><br><span class="line">    <span class="attr">yum:</span> <span class="string">name=nginx-1.24.0</span> <span class="string">state=present</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">拷贝发布文件</span></span><br><span class="line">    <span class="attr">copy:</span> <span class="string">src=/tmp/index.html</span>  <span class="string">dest=/usr/share/nginx/html/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">启动nginx</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">name=nginx</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 测试是否能够正常执行</span></span><br><span class="line"><span class="string">[root@ansible-server</span> <span class="string">playbook]#</span> <span class="string">ansible-playbook</span> <span class="string">-C</span> <span class="string">nginx-install.yaml</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408192030619.png" alt="image-20240819203043504"></p><p><strong>具体字段的含义如下：</strong></p><ul><li><strong><code>192.168.174.21</code></strong>: 目标主机的 IP 地址。</li><li><strong><code>ok=4</code></strong>: 有 4 个任务成功执行，没有发生错误。</li><li><strong><code>changed=0</code></strong>: 表示没有任何任务更改了目标主机的状态（例如安装软件、修改文件等）。</li><li><strong><code>unreachable=0</code></strong>: 表示目标主机是可达的（网络正常），没有主机是不可达的。</li><li><strong><code>failed=0</code></strong>: 表示没有任务失败，所有任务都成功完成。</li><li><strong><code>skipped=0</code></strong>: 表示没有任务被跳过。</li><li><strong><code>rescued=0</code></strong>: 表示没有任务进入救援模式（通常在任务失败时触发）。</li><li><strong><code>ignored=0</code></strong>: 表示没有被忽略的任务（例如使用 <code>ignore_errors: yes</code> 忽略的任务）。</li></ul><h4 id="2-vars变量引用"><a href="#2-vars变量引用" class="headerlink" title="2. vars变量引用"></a>2. vars变量引用</h4><p>​        <code>vars</code> 用于定义在任务中可以被引用的变量。可以通过两种方式引用变量：使用 <code></code> 或直接通过关键字引用。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">nginx_version:</span> <span class="string">"1.24.0"</span></span><br><span class="line">    <span class="attr">copy_dir:</span> <span class="string">"/tmp"</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">拷贝安装包到目标主机并解压</span></span><br><span class="line">      <span class="attr">unarchive:</span> <span class="string">src=/root/nginx-&#123;&#123;</span> <span class="string">nginx_version</span> <span class="string">&#125;&#125;.tar.gz</span> <span class="string">dest=&#123;&#123;</span> <span class="string">copy_dir</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">实例二：</span><br><span class="line">[root@ansible-server ~]# cd /etc/ansible/</span><br><span class="line">[root@ansible-server ansible]# vim test.yml  #创建文件必须以.yml/.yaml结尾</span><br><span class="line">---</span><br><span class="line"> - hosts: webservers1</span><br><span class="line">   user: root</span><br><span class="line">   tasks:</span><br><span class="line">   - name: playbook_test</span><br><span class="line">     file: state=touch path=/tmp/playbook.txt</span><br><span class="line">========================================================================</span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数解释：</span></span><br><span class="line">    hosts: 参数指定了对哪些主机进行操作；</span><br><span class="line">    user: 参数指定了使用什么用户登录远程主机操作；</span><br><span class="line">    tasks: 指定了一个任务.</span><br><span class="line">    name:参数同样是对任务的描述，在执行过程中会打印出来。</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1567316641470.png" alt="1567316641470"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 检测语法：</span></span><br><span class="line">[root@ansible-server ansible]# ansible-playbook -C test.yml </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 运行Playbook</span></span><br><span class="line">[root@ansible-server ansible]# ansible-playbook test.yml #加剧本名称</span><br></pre></td></tr></table></figure><h4 id="3-handlers和notify引用"><a href="#3-handlers和notify引用" class="headerlink" title="3. handlers和notify引用"></a>3. handlers和notify引用</h4><p>​        <code>handlers</code>（处理器）和 <code>notify</code>（触发器）用于在某些任务状态发生变化时自动执行特定操作。<code>handlers</code> 只有在被 <code>notify</code> 触发时才会执行，而 <code>notify</code> 会在任务状态为 <code>changed</code> 时触发处理器。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Nginx</span></span><br><span class="line">      <span class="attr">yum:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configure</span> <span class="string">Nginx</span></span><br><span class="line">      <span class="attr">copy:</span> <span class="string">src=/tmp/default.conf</span> <span class="string">dest=/etc/nginx/conf.d/default.conf</span> <span class="string">backup=yes</span></span><br><span class="line">      <span class="attr">notify:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">Restart</span> <span class="string">Nginx</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Start</span> <span class="string">Nginx</span> <span class="string">service</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=nginx</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restart</span> <span class="string">Nginx</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=nginx</span> <span class="string">state=restarted</span></span><br></pre></td></tr></table></figure><h4 id="4-item和loop引用"><a href="#4-item和loop引用" class="headerlink" title="4. item和loop引用"></a>4. item和loop引用</h4><p>​        <code>item</code> 通常用于在循环（<code>loop</code>）中遍历列表或字典。它允许任务在多次迭代中使用不同的值。最常见的用法是通过 <code>loop</code> 模块来执行相同的操作多次，但使用不同的参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">- hosts: webservers2</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">  - name: install packages</span><br><span class="line">    yum: name=&#123;&#123; item &#125;&#125; state=latest         #相当于for循环里面的i </span><br><span class="line">    loop:                               #取值 。但是不支持通配符</span><br><span class="line">     - httpd</span><br><span class="line">     - php</span><br><span class="line">     - php-mysql</span><br><span class="line">     - php-mbstring</span><br><span class="line">     - php-gd</span><br><span class="line">     </span><br><span class="line"><span class="meta"> #</span><span class="bash"> 或者</span></span><br><span class="line">- hosts: webservers2</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">  - name: install packages</span><br><span class="line">    yum: name=&#123;&#123; item &#125;&#125; state=latest         #相当于for循环里面的i </span><br><span class="line">    with_items:                               #取值 。但是不支持通配符</span><br><span class="line">     - httpd</span><br><span class="line">     - php</span><br><span class="line">     - php-mysql</span><br><span class="line">     - php-mbstring</span><br><span class="line">     - php-gd</span><br></pre></td></tr></table></figure><blockquote><p><code>with_items</code> 与 <code>loop</code> 类似，但 <code>loop</code> 是 Ansible 2.5 及更高版本的推荐使用方法。</p></blockquote><h4 id="5-when判断"><a href="#5-when判断" class="headerlink" title="5. when判断"></a>5. when判断</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">lrzsz</span> <span class="string">yum</span></span><br><span class="line">      <span class="attr">yum:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">vim-enhanced</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">installed</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_os_family</span> <span class="string">=="RedHat"</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">lrzsz</span> <span class="string">apt</span></span><br><span class="line">      <span class="attr">apt:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">vim</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">installed</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_os_family</span> <span class="string">=="Debian"</span></span><br></pre></td></tr></table></figure><h4 id="6-vars-files-变量文件"><a href="#6-vars-files-变量文件" class="headerlink" title="6. vars_files 变量文件"></a>6. vars_files 变量文件</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://l66stbz.github.io/tags/Linux/"/>
    
      <category term="Ansible" scheme="https://l66stbz.github.io/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ消息队列</title>
    <link href="https://l66stbz.github.io/2024/08/16/RabbitMQ%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <id>https://l66stbz.github.io/2024/08/16/RabbitMQ%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</id>
    <published>2024-08-16T14:50:00.000Z</published>
    <updated>2024-08-17T07:58:37.656Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="RabbitMQ-消息中间件-消息队列"><a href="#RabbitMQ-消息中间件-消息队列" class="headerlink" title="RabbitMQ 消息中间件/消息队列"></a>RabbitMQ 消息中间件/消息队列</h1><p>[TOC]</p><h1 id="1、消息中间件"><a href="#1、消息中间件" class="headerlink" title="1、消息中间件"></a>1、消息中间件</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><p>消息队列（Message Queue，简称 MQ）是一种用于跨进程或跨系统的异步通信机制。它允许不同的服务、应用程序或进程之间传递消息，从而实现解耦和高效的任务处理。消息队列通常用于异步处理、分布式系统、负载均衡等场景。</p><p><strong>消息传递</strong>指的是程序之间通过在消息中发送数据进行通信。</p><p>当下主流的消息中间件有RabbitMQ、Kafka、ActiveMQ、RocketMQ等</p><h2 id="1-2-异步处理"><a href="#1-2-异步处理" class="headerlink" title="1.2 异步处理"></a>1.2 异步处理</h2><p>​    场景说明：用户注册账号以后，需要发送注册成功邮件和注册成功短信，传统的做法有两种：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.串行的方式；</span><br><span class="line">2.并行的方式；</span><br></pre></td></tr></table></figure><h3 id="1-2-1-串行方式"><a href="#1-2-1-串行方式" class="headerlink" title="1.2.1 串行方式"></a>1.2.1 串行方式</h3><p>​        将注册信息写入数据库后，发送注册邮件，再发送注册短信，以上三个任务全部完成后才返回给客户端。这有一个问题是，邮件，短信并不是必须的，它只是一个通知，而这种做法让客户端等待没有必要等待的东西。</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405141546699.png" alt="串行方式"></p><h3 id="1-2-2-并行方式"><a href="#1-2-2-并行方式" class="headerlink" title="1.2.2 并行方式"></a>1.2.2 并行方式</h3><p>​        将注册信息写入数据库后，发送邮件的同时，发送短信，以上三个任务完成后，返回给客户端，并行的方式能提高处理的时间。</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405141547675.png" alt="并行方式"></p><p>假设三个业务节点分别使用50ms，串行方式使用时间150ms，并行使用时间100ms。虽然并性已经提高的处理时间，但是，前面说过邮件和短信对我正常的使用网站没有任何影响，客户端没有必要等着其发送完成才显示注册成功，应该是写入数据库后就返回。</p><h3 id="1-2-3-消息队列"><a href="#1-2-3-消息队列" class="headerlink" title="1.2.3 消息队列"></a>1.2.3 消息队列</h3><p>​        引入消息队列后，把发送邮件，短信不是必须的业务逻辑异步处理。</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405251531955.png" alt="在这里插入图片描述"></p><p>由此可以看出，引入消息队列后，用户的响应时间就等于写入数据库的时间+写入消息队列的时间(可以忽略不计)，引入消息队列后处理后，响应时间是串行的3倍，是并行的2倍。</p><h2 id="2、作用"><a href="#2、作用" class="headerlink" title="2、作用"></a>2、作用</h2><h3 id="2-1-消息中间件主要作用"><a href="#2-1-消息中间件主要作用" class="headerlink" title="2.1 消息中间件主要作用"></a>2.1 消息中间件主要作用</h3><ul><li>冗余(存储)<ul><li>消息持久化功能，将消息存储在可靠的介质中，确保在系统故障或崩溃时，消息不会丢失。</li></ul></li><li>扩展性<ul><li>消息中间件支持系统的水平扩展。通过添加更多的生产者（Producers）和消费者（Consumers），可以处理更大规模的数据量和流量。</li></ul></li><li>可恢复性<ul><li>具有内建的故障恢复机制，能够在系统组件出现故障时进行恢复。例如，当某个消费者崩溃后重新启动时，它可以从上次处理的消息位置继续处理未完成的消息，从而实现故障恢复。</li></ul></li><li>缓冲<ul><li>在生产者和消费者之间提供缓冲作用。生产者可以以自己的速度发送消息，而消费者可以以自己的速度处理消息，这种缓冲机制帮助平滑突发的流量高峰，防止系统过载。</li></ul></li><li>异步通信<ul><li>允许系统之间进行异步通信，生产者发送消息后不需要等待消费者处理完毕，这样可以提高系统的并发性和响应速度。异步通信模式下，生产者和消费者可以独立地进行处理，提升整体系统的效率。</li></ul></li><li>削峰  <ul><li>消息队列中的常用场景，一般在秒杀或抢购活动中使用广泛。一般会因为流量过大，应用系统配置承载不了这股瞬间流量，导致系统直接挂掉，即传说中的“宕机”现象。为解决这个问题，我们会将那股巨大的流量拒在系统的上层，即将其转移至 MQ 而不直接涌入我们的接口。</li></ul></li><li>解耦（耦合性）<ul><li>降低应用与应用间的耦合性</li></ul></li></ul><h2 id="3、消息中间件的两种模式"><a href="#3、消息中间件的两种模式" class="headerlink" title="3、消息中间件的两种模式"></a>3、消息中间件的两种模式</h2><h3 id="1、P2P模式-Rabbitmq"><a href="#1、P2P模式-Rabbitmq" class="headerlink" title="1、P2P模式  Rabbitmq"></a>1、P2P模式  Rabbitmq</h3><p>P2P模式包含三个角色：消息队列（Queue）、发送者(Sender)、接收者(Receiver)。每个消息都被发送到一个特定的队列，接收者从队列中获取消息。队列保留着消息，直到它们被消费或超时。</p><p><strong>P2P的特点：</strong>（点对点：Queue，不可重复消费）</p><ul><li>每个消息只有一个消费者（Consumer），即一旦被消费，消息就不再在消息队列中存在</li><li>发送者和接收者之间在时间上没有依赖性，也就是说当发送者发送了消息之后，不管接收者有没有正在运行它不会影响到消息被发送到队列</li><li>接收者在成功接收消息之后需向队列应答成功</li><li>如果希望发送的每个消息都会被成功处理的话，那么需要P2P模式</li></ul><h3 id="2、Pub-Sub模式（发布-订阅：Topic，可以重复消费）"><a href="#2、Pub-Sub模式（发布-订阅：Topic，可以重复消费）" class="headerlink" title="2、Pub/Sub模式（发布/订阅：Topic，可以重复消费）"></a>2、Pub/Sub模式（发布/订阅：Topic，可以重复消费）</h3><p>Pub/Sub模式包含三个角色：主题（Topic）、发布者（Publisher）、订阅者（Subscriber） 。多个发布者将消息发送到Topic，系统将这些消息传递给多个订阅者。</p><p><strong>Pub/Sub的特点：</strong></p><ul><li>每个消息可以有多个消费者</li><li>发布者和订阅者之间有时间上的依赖性。针对某个主题（Topic）的订阅者，它必须创建一个订阅者之后，才能消费发布者的消息</li><li>为了消费消息，订阅者必须保持运行的状态</li><li>如果希望发送的消息可以不被做任何处理、或者只被一个消费者处理、或者可以被多个消费者处理的话，那么可以采用Pub/Sub模型</li></ul><h2 id="4、常用中间件介绍与对比"><a href="#4、常用中间件介绍与对比" class="headerlink" title="4、常用中间件介绍与对比"></a>4、常用中间件介绍与对比</h2><h3 id="1、Kafka"><a href="#1、Kafka" class="headerlink" title="1、Kafka"></a>1、Kafka</h3><p>Kafka是LinkedIn开源的分布式发布-订阅消息系统，目前归属于Apache顶级项目。Kafka主要特点是追求高吞吐量，一开始的目的就是用于日志收集和传输。0.8版本开始支持复制，<strong>不支持事务，对消息的重复、丢失、错误没有严格要求，适合产生大量日志数据的互联网服务的数据收集业务。</strong></p><h3 id="2、RabbitMQ"><a href="#2、RabbitMQ" class="headerlink" title="2、RabbitMQ"></a>2、RabbitMQ</h3><p>RabbitMQ是使用Erlang语言开发的开源消息队列系统，<strong>基于AMQP协议来实现。AMQP的主要特征是异步通信、面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。AMQP协议更多用在企业系统内对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在其次。</strong></p><p><code>Erlang</code>是一种通用的面向并发的编程语言</p><blockquote><p>AMQP（Advanced Message Queuing Protocol，高级消息队列协议）是一个开放的标准应用层协议，用于消息传递。AMQP 设计的初衷是为了实现跨平台的消息队列系统，确保不同的消息传递中间件能够互操作。</p><p>主要特性</p><ol><li><strong>异步消息传递</strong>：AMQP 支持异步消息传递，可以在发送和接收消息时不需要同步等待。</li><li><strong>跨平台互操作性</strong>：AMQP 是一个开放标准，支持不同平台和编程语言的互操作。</li><li><strong>可靠性</strong>：提供消息确认、持久化、事务等机制，确保消息不会丢失。</li></ol></blockquote><h3 id="3、RocketMQ"><a href="#3、RocketMQ" class="headerlink" title="3、RocketMQ"></a>3、RocketMQ</h3><p>RocketMQ是阿里开源的消息中间件，<strong>它是纯Java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点。</strong>它对消息的可靠传输及事务性做了优化，目前在阿里集团被广泛应用于交易、充值、消息推送、日志流式处理、binglog分发等场景。</p><hr><p>RabbitMQ比Kafka可靠，Kafka更适合IO高吞吐的处理，一般应用在大数据日志处理或对实时性（少量延迟），可靠性（少量丢数据）要求稍低的场景使用，比如ELK日志收集。</p><h1 id="2、RabbitMQ集群"><a href="#2、RabbitMQ集群" class="headerlink" title="2、RabbitMQ集群"></a>2、RabbitMQ集群</h1><h3 id="1、RabbitMQ简介"><a href="#1、RabbitMQ简介" class="headerlink" title="1、RabbitMQ简介"></a><strong>1、RabbitMQ简介</strong></h3><p>RabbitMQ是Erlang开发的，集群非常方便，因为Erlang天生就是分布式语言，但其本身<strong>并不支持负载均衡，支持高并发，支持可扩展。支持AJAX，持久化，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。</strong></p><p><em>Ajax</em> 即“Asynchronous Javascript And XML”(异步 JavaScript 和 XML),是指一种创建交互式网页应用的网页开发技术。<em>Ajax</em> = 异步 JavaScript 和 XML</p><h3 id="2、RabbitMQ-特点"><a href="#2、RabbitMQ-特点" class="headerlink" title="2、RabbitMQ 特点"></a>2、RabbitMQ 特点</h3><ul><li><strong>可靠性</strong><ul><li><code>持久化</code>：消息可以持久化到磁盘，确保在服务器重启后仍然可以恢复消息。</li><li>确认机制：生产者和消费者可以收到消息传递和处理的确认，确保消息不会丢失。</li></ul></li></ul><ul><li><p><strong>扩展性</strong></p><ul><li><code>集群</code>：RabbitMQ 可以配置为集群模式，多个节点共同工作，分担消息负载。</li><li>分区交换：消息可以根据规则分发到不同的队列，实现负载均衡。</li></ul></li><li><p><strong>高可用性</strong></p><ul><li><code>镜像队列</code>：队列可以配置为镜像队列，消息会在多个节点之间复制，确保其中一个节点故障时消息不会丢失。</li><li><code>自动故障转移</code>：在集群模式下，RabbitMQ 可以自动进行故障转移，保持系统的高可用性。</li></ul></li><li><p><strong>多语言客户端</strong></p><ul><li>Java：通过 Spring AMQP、RabbitMQ Java Client 等库进行集成。</li><li>其他语言：如 .NET、JavaScript、Go、PHP 等都有对应的客户端库。</li></ul></li><li><p><strong>Web管理界面</strong></p><ul><li>提供了一个功能强大的 Web 管理界面，便于管理和监控</li></ul></li><li><p><strong>插件机制</strong></p><ul><li>通过简单的命令可以安装和启用插件。<ul><li>Management Plugin：提供 Web 管理界面。</li><li>其他插件：如延迟队列插件、安全认证插件等。</li></ul></li></ul></li></ul><h3 id="3、RabbitMQ模式"><a href="#3、RabbitMQ模式" class="headerlink" title="3、RabbitMQ模式"></a>3、RabbitMQ模式</h3><p><strong>注意:RabbitMQ模式大概分为以下三种:</strong></p><p>(1)单机模式。</p><p>(2)普通模式(默认的集群模式)。</p><p>(3)<code>镜像模式</code>(把需要的队列做成镜像队列，存在于多个节点，属于RabbiMQ的HA方案，在对业务可靠性要求较高的场合中比较适合)。要实现镜像模式，需要先搭建出普通集群模式，在这个模式的基础上再配置镜像模式以实现高可用。</p><h3 id="4、了解集群中的基本概念："><a href="#4、了解集群中的基本概念：" class="headerlink" title="4、了解集群中的基本概念："></a><strong>4、了解集群中的基本概念：</strong></h3><p>RabbitMQ的集群节点包括<code>内存节点</code>、<code>磁盘节点</code>。顾名思义内存节点就是将所有数据放在内存，磁盘节点将数据放在磁盘。</p><p>一个rabbitmq集群中可以共享 user，vhost，queue，exchange等，所有的数据和状态都是必须在所有节点上复制。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Broker:</span><br><span class="line"><span class="meta">#</span><span class="bash"> RabbitMQ 服务器本身就是一个消息代理（Broker）。它负责接收、存储和转发消息到合适的目的地。</span></span><br><span class="line"></span><br><span class="line">ConnectionFactory（连接管理器）：</span><br><span class="line"><span class="meta">#</span><span class="bash"> 应用程序与Rabbit之间建立连接的管理器，程序代码中使用；如主机名、端口、用户名、密码等。</span></span><br><span class="line"></span><br><span class="line">Exchange（交换器）：</span><br><span class="line"><span class="meta">#</span><span class="bash"> 交换器（Exchange）是消息路由的核心组件。生产者发送的消息不会直接传递到队列，而是先发送到交换器，然后由交换器根据特定的规则将消息路由到一个或多个队列中。</span></span><br><span class="line"></span><br><span class="line">Routing Key：</span><br><span class="line"><span class="meta">#</span><span class="bash"> 一个用于路由消息的字符串。当生产者发送消息到交换机(Exchange)时，会指定一个路由键。交换机会根据这个键和绑定规则将消息分发到相应的队列。</span></span><br><span class="line"></span><br><span class="line">Queue（队列）：</span><br><span class="line"><span class="meta">#</span><span class="bash"> 存储消息的地方，消费者从队列中获取并处理消息。队列可以配置为持久化，以确保消息在服务器重启后仍然存在。</span></span><br><span class="line"></span><br><span class="line">Bindding（绑定）：</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将交换机和队列连接起来，定义了交换机如何根据路由键将消息路由到队列。</span></span><br><span class="line"></span><br><span class="line">vhost（虚拟主机）：</span><br><span class="line"><span class="meta">#</span><span class="bash"> 用于多租户和权限分离的机制。一个 Broker 可以有多个 Vhost，每个 Vhost 可以有独立的交换机、队列、绑定和权限配置。这样可以隔离不同的应用或租户的数据和配置。</span></span><br><span class="line"></span><br><span class="line">producer（生产者）：</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生产者是创建并发送消息到 RabbitMQ 的应用程序或服务。生产者将消息发送到交换机，并指定一个路由键。</span></span><br><span class="line"></span><br><span class="line">consumer（消费者）：</span><br><span class="line"><span class="meta">#</span><span class="bash"> 消费者是从 RabbitMQ 队列中接收并处理消息的应用程序或服务。消费者可以订阅一个或多个队列，并根据需要处理消息。</span></span><br><span class="line"></span><br><span class="line">channel（信道）：</span><br><span class="line"><span class="meta">#</span><span class="bash"> 消息通道，在客户端的每个连接里，可建立多个channel，每个channel代表一个会话任务。消息推送使用的通道。</span></span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1571320020040.png" alt="1571320020040"></p><ol><li><strong>生产者发送消息</strong>：</li></ol><ul><li>生产者创建消息，并将其发送到 RabbitMQ 的某个交换机中。消息可以携带路由键，交换机会根据这个键和绑定规则将消息路由到相应的队列。</li></ul><ol start="2"><li><strong>交换机路由消息</strong>：</li></ol><ul><li>交换机接收消息后，根据类型和绑定规则将消息路由到一个或多个队列中。如果没有找到匹配的队列，交换机会丢弃消息，或者根据配置返回给生产者。</li></ul><ol start="3"><li><strong>消息进入队列</strong>：</li></ol><ul><li>一旦消息被路由到队列中，消息就会暂时存储在队列中，等待消费者处理。队列可以配置为持久化，以确保即使 RabbitMQ 服务崩溃，消息也不会丢失。</li></ul><ol start="4"><li><strong>消费者接收消息</strong>：</li></ol><ul><li>消费者从队列中取走消息并进行处理。消息的分发可以通过轮询（Round Robin）分配给多个消费者，或者消费者可以从多个队列中获取消息进行处理。</li></ul><ol start="5"><li><strong>消息确认</strong>：</li></ol><ul><li>消费者处理完消息后，会向 RabbitMQ 发送一个确认消息（ACK），告知消息已被成功处理。如果消费者在处理过程中失败，RabbitMQ 可以重新将消息投递给其他消费者或重新进入队列，这取决于队列的配置。</li></ul><p><strong>面试注意:集群中有两种节点</strong></p><ul><li><p><code>内存节点</code>：只保存状态到内存（持久的queue的持久内容将被保存到磁盘中）</p></li><li><p><code>磁盘节点</code>：保存状态到内存和磁盘。—推荐</p></li></ul><p>内存节点虽然不写入磁盘，但是它执行比磁盘节点要高。集群中，只需要一个磁盘节点来保存状态 就足够了。如果集群中<code>只有内存节点</code>，那么<code>不能停止</code>它们，否则所有的状态，消息等都会丢失。</p><h3 id="5、普通集群准备环境"><a href="#5、普通集群准备环境" class="headerlink" title="5、普通集群准备环境"></a>5、普通集群准备环境</h3><p>Rabbitmq官方最新rpm包下载地址：<a href="https://www.rabbitmq.com/install-rpm.html#downloads" target="_blank" rel="noopener">https://www.rabbitmq.com/install-rpm.html#downloads</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># rabbitmq 和 erlang兼容版本</span><br><span class="line">https:&#x2F;&#x2F;www.rabbitmq.com&#x2F;which-erlang.html</span><br><span class="line"># erlang 版本选择</span><br><span class="line">https:&#x2F;&#x2F;packagecloud.io&#x2F;rabbitmq&#x2F;erlang</span><br><span class="line"># rabbitmq 版本选择</span><br><span class="line">https:&#x2F;&#x2F;www.rabbitmq.com&#x2F;news.html</span><br></pre></td></tr></table></figure><p><strong>三台机器都操作:</strong></p><ol><li><p>配置hosts文件；更改三台MQ节点的<code>主机名</code>分别为rabbitmq-1、rabbitmq-2 和rabbitmq-3，然后修改hosts配置件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 三台主机修改主机名</span></span><br><span class="line">[root@rabbitmq-1 ~]# hostnamectl set-hostname rabbitmq-1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 三台主机本地解析</span></span><br><span class="line">[root@rabbitmq-1 ~]# vim /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.50.138 rabbitmq-1</span><br><span class="line">192.168.50.139 rabbitmq-2</span><br><span class="line">192.168.50.140 rabbitmq-3</span><br></pre></td></tr></table></figure></li><li><p>三个节点配置安装rabbitmq软件</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line">[root@rabbitmq-1 ~]# yum install -y *epel* gcc-c++ unixODBC unixODBC-devel openssl-devel ncurses-devel</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum安装erlang</span></span><br><span class="line">[root@rabbitmq-1 ~]# wget --content-disposition https://packagecloud.io/rabbitmq/erlang/packages/el/7/erlang-20.3-1.el7.centos.x86_64.rpm/download.rpm</span><br><span class="line">[root@rabbitmq-1 ~]# yum install erlang-20.3-1.el7.centos.x86_64.rpm -y</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试erlang</span></span><br><span class="line">[root@rabbitmq-1 ~]# erl</span><br><span class="line">Erlang/OTP 20 [erts-9.3] [source] [64-bit] [smp:1:1] [ds:1:1:10] [async-threads:10] [hipe] [kernel-poll:false]</span><br><span class="line"></span><br><span class="line">Eshell V9.3  (abort with ^G)</span><br><span class="line"><span class="meta">1&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 两次Crtl+c退出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装rabbitmq</span></span><br><span class="line">[root@rabbitmq-1 ~]# wget https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.5/rabbitmq-server-3.7.5-1.el7.noarch.rpm</span><br><span class="line">[root@rabbitmq-1 ~]# yum install rabbitmq-server-3.7.5-1.el7.noarch.rpm -y</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">[root@rabbitmq-1 ~]# systemctl daemon-reload</span><br><span class="line">[root@rabbitmq-1 ~]# systemctl enable --now rabbitmq-server</span><br><span class="line">[root@rabbitmq-1 ~]# systemctl status rabbitmq-server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每台都操作开启rabbitmq的web访问界面： </span></span><br><span class="line">[root@rabbitmq-1 ~]# rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1585804728482.png" alt="1585804728482"></p><blockquote><p>默认：RabbitMQ web界面关闭</p></blockquote><p>创建用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">注意:在一台机器操作</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加用户和密码</span></span><br><span class="line">[root@rabbitmq-1 ~]# rabbitmqctl add_user soho soso</span><br><span class="line">Adding user "soho" ...</span><br><span class="line"><span class="meta">#</span><span class="bash"> soho：用户名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> soso：密码</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置为管理员</span></span><br><span class="line">[root@rabbitmq-1 ~]# rabbitmqctl set_user_tags soho administrator</span><br><span class="line">Setting tags for user "soho" to [administrator] ...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有用户</span></span><br><span class="line">[root@rabbitmq-1 ~]# rabbitmqctl list_users</span><br><span class="line">Listing users ...</span><br><span class="line">guest[administrator]</span><br><span class="line">soho[administrator]</span><br><span class="line">...done.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建用户设置权限</span></span><br><span class="line">[root@rabbitmq-1 ~]# rabbitmqctl set_permissions -p "/" soso ".*" ".*" ".*"</span><br><span class="line">Setting permissions for user "soho" in vhost "/" ...</span><br></pre></td></tr></table></figure><blockquote><p><code>此处设置权限时注意&#39;.*&#39;之间需要有空格 三个&#39;.*&#39;分别代表了加载conf权限，read权限与write权限 例如：当没有给soho设置这三个权限前是没有权限查询队列，在ui界面也看不见</code></p></blockquote><ol start="3"><li>三台机器都操作:开启用户远程登录:</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换目录</span></span><br><span class="line">[root@rabbitmq-1 ~]# cd /etc/rabbitmq/   </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝默认配置文件至工作目录</span></span><br><span class="line">[root@rabbitmq-1 rabbitmq]# cp /usr/share/doc/rabbitmq-server-3.7.5/rabbitmq.config.example /etc/rabbitmq/rabbitmq.config</span><br><span class="line"></span><br><span class="line">[root@rabbitmq-1 rabbitmq]# ls</span><br><span class="line">enabled_plugins  rabbitmq.config</span><br><span class="line"></span><br><span class="line">[root@rabbitmq-1 rabbitmq]# vim rabbitmq.config</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改如下:</span></span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1564157816348.png" alt="1564157816348"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 三台机器都操作重启服务服务:</span></span><br><span class="line">[root@rabbitmq-1 ~]# systemctl restart rabbitmq-server</span><br></pre></td></tr></table></figure><p><strong>查看端口</strong></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1564157344617.png" alt="1564157344617"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4369 -- erlang端口</span><br><span class="line">5672 --程序连接端口</span><br><span class="line">15672 -- 管理界面ui端口</span><br><span class="line">25672 -- server间内部通信端口</span><br></pre></td></tr></table></figure><p><strong>！注意如果是云服务器，切记添加安全组端口放行。</strong></p><p>访问:192.168.50.138:15672</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1564157664109.png" alt="1564157664109"></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1564158056319.png" alt="1564158056319"></p><p><strong>这里需要注意:</strong></p><p>rabbitmq默认管理员用户:guest   密码:guest</p><p>新添加的用户为:soho 密码:soso</p><h3 id="6、开始部署集群三台机器都操作"><a href="#6、开始部署集群三台机器都操作" class="headerlink" title="6、开始部署集群三台机器都操作"></a><strong>6、开始部署集群三台机器都操作</strong></h3><p>1.首先创建好数据存放目录和日志存放目录:</p><p>3台机器都操作:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建RabbitMQ数据存放处</span></span><br><span class="line">[root@rabbitmq-1 ~]# mkdir -p /data/rabbitmq/data</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建RabbitMQ日志文件存放处</span></span><br><span class="line">[root@rabbitmq-1 ~]# mkdir -p /data/rabbitmq/logs</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改权限和属主、属组</span></span><br><span class="line">[root@rabbitmq-1 ~]# chmod 777 -R /data/rabbitmq</span><br><span class="line">[root@rabbitmq-1 ~]# chown rabbitmq.rabbitmq /data/ -R</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建配置文件:</span></span><br><span class="line">[root@rabbitmq-1 ~]# vim /etc/rabbitmq/rabbitmq-env.conf</span><br><span class="line">RABBITMQ_MNESIA_BASE=/data/rabbitmq/data</span><br><span class="line">RABBITMQ_LOG_BASE=/data/rabbitmq/logs</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启服务</span></span><br><span class="line">[root@rabbitmq-1 ~]# systemctl restart rabbitmq-server</span><br></pre></td></tr></table></figure><p><strong>2.拷erlang.cookie</strong></p><p>Rabbitmq的集群是依附于erlang的集群来工作的,所以必须先构建起erlang的集群。Erlang的集群中各节点是经由各个cookie来实现的,这个cookie存放在<code>/var/lib/rabbitmq/.erlang.cookie</code>中，文件是400的权限。所以<code>必须保证各节点cookie一致</code>,不然节点之间就<code>无法通信</code>。</p><p>如果执行# rabbitmqctl stop_app 这条命令报错:需要执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">如果执行<span class="comment"># rabbitmqctl stop_app 这条命令报错:需要执行</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">chmod 400 .erlang.cookie</span></span><br><span class="line"><span class="meta">#</span><span class="bash">chown rabbitmq.rabbitmq .erlang.cookie</span></span><br></pre></td></tr></table></figure><p>(官方在介绍集群的文档中提到过.erlang.cookie 一般会存在这两个地址：第一个是home/.erlang.cookie；第二个地方就是/var/lib/rabbitmq/.erlang.cookie。如果我们使用解压缩方式安装部署的rabbitmq，那么这个文件会在{home}目录下，也就是$home/.erlang.cookie。如果我们使用rpm等安装包方式进行安装的，那么这个文件会在/var/lib/rabbitmq目录下。)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看Cookie值</span></span><br><span class="line">[root@rabbitmq-1 ~]# cat /var/lib/rabbitmq/.erlang.cookie</span><br><span class="line">HOUCUGJDZYTFZDSWXTHJ</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> scp的方式将rabbitmq-1节点的.erlang.cookie的值复制到其他两个节点中。</span></span><br><span class="line">[root@rabbitmq-1 ~]# scp /var/lib/rabbitmq/.erlang.cookie root@192.168.50.139:/var/lib/rabbitmq/</span><br><span class="line">[root@rabbitmq-1 ~]# scp /var/lib/rabbitmq/.erlang.cookie root@192.168.50.140:/var/lib/rabbitmq/</span><br></pre></td></tr></table></figure><blockquote><p><code>.erlang.cookie</code> 文件是 Erlang 运行时系统用于节点之间的认证文件。在搭建 RabbitMQ 集群时，确保了集群中的各个节点可以相互通信和信任。每个节点在启动时都会检查 .erlang.cookie 文件的内容，只有拥有相同 cookie 值的节点才能成功地建立连接并进行通信。</p></blockquote><p><strong>3.将mq-2、mq-3作为内存节点加到mq-1节点集群中</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在mq-2、mq-3执行如下命令： 停止节点，切记不是停止服务</span></span><br><span class="line">[root@rabbitmq-2 ~]# rabbitmqctl stop_app</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1585815681534.png" alt="1585815681534"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果有数据需要重置，没有则不用</span></span><br><span class="line">[root@rabbitmq-2 ~]# rabbitmqctl reset</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1585815744200.png" alt="1585815744200"></p><p><code>注意查看回显，如果不是以上。就是错误；如果报错，重启rabbitmq服务</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将两个节点加入集群，指定角色，添加到内存节点</span></span><br><span class="line">[root@rabbitmq-2 ~]# rabbitmqctl join_cluster --ram rabbit@rabbitmq-1  </span><br><span class="line">Clustering node 'rabbit@rabbitmq-2' with 'rabbit@rabbitmq-1' ...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动节点</span></span><br><span class="line">[root@rabbitmq-2 ~]# rabbitmqctl start_app  </span><br><span class="line">Starting node 'rabbit@rabbitmq-2' ...</span><br><span class="line"> completed with 3 plugins.</span><br><span class="line">===============================================================================</span><br><span class="line"></span><br><span class="line">[root@rabbitmq-3 ~]# rabbitmqctl stop_app</span><br><span class="line">Stopping node 'rabbit@rabbitmq-3' ...</span><br><span class="line">[root@rabbitmq-3 ~]# rabbitmqctl reset</span><br><span class="line">Resetting node 'rabbit@rabbitmq-3' ...</span><br><span class="line">[root@rabbitmq-3 ~]# rabbitmqctl join_cluster --ram rabbit@rabbitmq-1</span><br><span class="line">Clustering node 'rabbit@rabbitmq-3' with 'rabbit@rabbitmq-1' ...</span><br><span class="line">[root@rabbitmq-3 ~]# rabbitmqctl start_app</span><br><span class="line">Starting node 'rabbit@rabbitmq-3' ...</span><br><span class="line"> completed with 3 plugins.</span><br><span class="line"></span><br><span class="line">（1）默认rabbitmq启动后是磁盘节点，在这个cluster命令下，mq-2和mq-3是内存节点，</span><br><span class="line">mq-1是磁盘节点。</span><br><span class="line">（2）如果要使mq-2、mq-3都是磁盘节点，去掉--ram参数即可。</span><br><span class="line">（3）如果想要更改节点类型，可以使用命令rabbitmqctl change_cluster_node_type</span><br><span class="line">disc(ram),前提是必须停掉rabbitmq基础应用erlang</span><br><span class="line">注:</span><br><span class="line"><span class="meta">#</span><span class="bash">如果有需要使用磁盘节点加入集群</span></span><br><span class="line"> [root@rabbitmq-2 ~]# rabbitmqctl join_cluster  rabbit@rabbitmq-1</span><br><span class="line"> [root@rabbitmq-3 ~]# rabbitmqctl join_cluster  rabbit@rabbitmq-1</span><br></pre></td></tr></table></figure><p><strong>4.查看集群状态</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在RabbitMQ集群任意节点上执行 rabbitmqctl cluster_status来查看是否集群配置成功。在mq-1磁盘节点上面查看</span></span><br><span class="line">[root@rabbitmq-1 ~]# rabbitmqctl cluster_status</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1564158874154.png" alt="1564158874154"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每台机器显示出三台节点，表示已经添加成功！</span><br></pre></td></tr></table></figure><p><strong>5.登录rabbitmq web管理控制台，创建新的队列</strong></p><p>打开浏览器输入<a href="http://192.168.50.138:15672" target="_blank" rel="noopener">http://192.168.50.138:15672</a>, </p><p>输入默认的<code>Username：guest</code>；输入默认的<code>Password:guest</code></p><p>此时会发现之间创建的用户登录不了，这是因为我们修改了rabbitmq的数据目录，导致之前创建的用户消失了。</p><p>登录后出现如图所示的界面。</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1564162424739.png" alt="1564162424739"></p><p>根据界面提示创建一条队列</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1564159056655.png" alt="1564159056655"></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1564159160374.png" alt="1564159160374"></p><h3 id="7、RabbitMQ镜像集群配置"><a href="#7、RabbitMQ镜像集群配置" class="headerlink" title="7、RabbitMQ镜像集群配置"></a>7、RabbitMQ镜像集群配置</h3><p>  上面已经完成RabbitMQ默认集群模式，<strong>但并不保证队列的<code>高可用性</code>，队列内容不会复制。如果队列节点宕机直接导致该队列无法应用，只能等待重启，所以要想在队列节点宕机或故障也能正常应用，就要复制队列内容到集群里的每个节点，必须要创建镜像队列。</strong></p><p><code>镜像队列是基于普通的集群模式的。</code></p><p><strong>创建镜像集群:在任意一台机器操作</strong></p><p>rabbitmq set_policy ：设置策略</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@rabbitmq-1 ~]# rabbitmqctl set_policy  ha-all "^" '&#123;"ha-mode":"all"&#125;'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令回显</span></span><br><span class="line">Setting policy "ha-all" for pattern "^" to "&#123;"ha-mode":"all"&#125;" with priority "0" for vhost "/" ...</span><br></pre></td></tr></table></figure><blockquote><p> “^”匹配所有的队列， ha-all 策略名称为ha-all, ‘{“ha-mode”:”all”}’ 策略模式为 all 即复制到所有节点，包含新增节点。</p></blockquote><p>再次查看队列已经同步到其他两台节点:</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1564159410040.png" alt="1564159410040"></p><p><strong>“^”匹配所有的队列， ha-all 策略名称为ha-all, ‘{“ha-mode”:”all”}’ 策略模式为 all 即复制到所有节点，包含新增节点。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">设置策略介绍:</span><br><span class="line">rabbitmqctl set_policy [-p Vhost] Name Pattern Definition</span><br><span class="line">-p Vhost： 可选参数，针对指定vhost下的queue进行设置</span><br><span class="line">Name: policy的名称，可以定义</span><br><span class="line">Pattern: queue的匹配模式(正则表达式),也就是说会匹配一组。</span><br><span class="line">Definition：镜像定义，包括三个部分ha-mode, ha-params, ha-sync-mode</span><br><span class="line">    ha-mode:指明镜像队列的模式，有效值为 all/exactly/nodes</span><br><span class="line">        all：表示在集群中所有的节点上进行镜像</span><br><span class="line">        exactly：表示在指定个数的节点上进行镜像，节点的个数由ha-params指定</span><br><span class="line">        nodes：表示在指定的节点上进行镜像，节点名称通过ha-params指定</span><br><span class="line">    ha-params：ha-mode模式需要用到的参数</span><br><span class="line">    ha-sync-mode：进行队列中消息的同步方式，有效值为automatic和manual</span><br><span class="line">案例:</span><br><span class="line">例如，对队列名称以hello开头的所有队列进行镜像，并在集群的两个节点上完成镜像，policy的设置命令为： </span><br><span class="line">rabbitmqctl set_policy hello-ha “^hello)” ‘&#123;“ha-mode”:”exactly”,”ha-params”:2,”ha-sync-mode”:”automatic”&#125;’</span><br></pre></td></tr></table></figure><p>则此时镜像队列设置成功。已经部署完成。将所有队列设置为镜像队列，即队列会被复制到各个节点，各个节点状态保持一致。</p><h1 id="3、RabbitMQ面试题"><a href="#3、RabbitMQ面试题" class="headerlink" title="3、RabbitMQ面试题"></a>3、RabbitMQ面试题</h1><p>1、消息队列的作用？</p><p>2、RabbitMQ有什么作用？</p><ul><li>消息队列<ul><li>将消息从发送方（生产者）传递到接收方（消费者）。通过消息队列，生产者和消费者可以异步通信，互不干扰。</li></ul></li><li>异步处理<ul><li>通过将任务封装成消息放入队列，应用程序可以实现异步处理，从而提高响应速度和处理效率。例如，Web 应用可以快速响应用户请求，同时在后台处理耗时的任务。</li></ul></li><li>组件解耦<ul><li>通过使用消息队列，系统的不同组件（服务或应用）可以互相解耦。这样，各组件可以独立开发、部署和扩展，而不必直接依赖于其他组件的实现细节。</li></ul></li><li>负载均衡<ul><li>当有多个消费者订阅同一个队列时，RabbitMQ 可以将消息分发给这些消费者，实现负载均衡，确保每个消费者处理的工作量大致均等。</li></ul></li><li>高可用性<ul><li>RabbitMQ 支持集群模式和镜像队列，可以提供高可用性和故障恢复能力，确保在节点故障时系统依然可以正常工作。</li></ul></li><li>灵活的路由<ul><li>RabbitMQ 通过交换器（Exchange）和绑定（Binding）机制，提供灵活的消息路由功能。可以根据不同的路由键、队列绑定和交换器类型，实现复杂的消息路由规则。</li></ul></li></ul><p>3、RabbitMQ的工作模式？</p><ul><li>单节点模式<ul><li>单节点模式是最简单的部署方式，适合小型应用或开发测试环境。</li></ul></li><li>普通集群模式<ul><li>普通集群模式包含多个 RabbitMQ 节点，节点之间可以共享消息队列，但消息本身不会被复制。</li></ul></li><li>镜像模式<ul><li>镜像模式是普通集群模式的扩展，增加了消息的高可用性。队列可以被镜像到集群中的多个节点上。</li></ul></li></ul><p>4、消息队列使用场景</p><ul><li>任务队列<ul><li>后台任务处理（例如发送电子邮件）</li></ul></li><li>事件通知<ul><li>分布式系统中组件之间的事件通知</li></ul></li><li>数据流处理<ul><li>实时数据流的处理和分析，例如日志收集和处理</li></ul></li><li>负载分发<ul><li>将消息负载分发给多个消费者，实现负载均衡和并行处理</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://l66stbz.github.io/tags/Linux/"/>
    
      <category term="Redis" scheme="https://l66stbz.github.io/tags/Redis/"/>
    
      <category term="Cluster" scheme="https://l66stbz.github.io/tags/Cluster/"/>
    
  </entry>
  
  <entry>
    <title>Redis-Cluster集群</title>
    <link href="https://l66stbz.github.io/2024/08/15/Redis-Cluster%E9%9B%86%E7%BE%A4/"/>
    <id>https://l66stbz.github.io/2024/08/15/Redis-Cluster%E9%9B%86%E7%BE%A4/</id>
    <published>2024-08-15T14:50:00.000Z</published>
    <updated>2024-08-17T07:54:56.366Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、Redis-Cluster去中心化集群"><a href="#一、Redis-Cluster去中心化集群" class="headerlink" title="一、Redis Cluster去中心化集群"></a>一、Redis Cluster去中心化集群</h1><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240422163108793.png" alt="image-20240422163108793"></p><p>Redis集群是一个由<code>多个</code>主从节点群组成的<code>分布式</code>服务集群，它具有复制、高可用和分片特性。Redis集群不需要sentinel哨兵也能完成节点移除和故障转移的功能。需要将每个节点设置成集群模式，这种集群模式没有中心节点，可水平扩展，据官方文档称可以线性扩展到上万个节点(官方推荐不超过1000个节点)。redis集群的性能和高可用性均优于之前版本的哨兵模式，且集群配置非常简单。<strong>redis集群的运用主要是针对海量数据+高并发+高可用的场景。</strong></p><p>分布式：分布式计算是分布式系统的核心思想，指的是将一个复杂的任务分解为多个子任务，并将这些子任务分配给不同的节点（服务器）进行处理。最终，所有节点的计算结果会汇总起来形成最终的结果。<strong>简单的来讲就是将一个单体应用拆分成不同单元的功能模块</strong></p><h2 id="1-为什么要用redis-cluster集群？"><a href="#1-为什么要用redis-cluster集群？" class="headerlink" title="1.为什么要用redis-cluster集群？"></a>1.为什么要用redis-cluster集群？</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.首先Redis单实例主要有单点，容量有限，流量压力上限的问题。</span><br><span class="line">Redis单点故障，可以通过主从复制replication，和自动故障转移sentinel哨兵机制。但Redis单Master实例提供写服务，仍然有容量和压力问题，因此需要数据分区，构建多个Master实例同时提供读写服务（不仅限于从replica节点提供读服务）。</span><br><span class="line"></span><br><span class="line">2.并发问题</span><br><span class="line">redis官方声称可以达到 10万/s,每秒执行10万条命令</span><br><span class="line">假如业务需要每秒100万的命令执行呢？</span><br><span class="line"></span><br><span class="line">解决方案如下</span><br><span class="line">1.正确的应该是考虑分布式，加机器，把数据分到不同的位置，分摊集中式的压力，一堆机器做一件事.还需要一定的机制保证数据分区，并且数据在各个主Master节点间不能混乱，当然最好还能支持在线数据热迁移的特性。</span><br></pre></td></tr></table></figure><h2 id="2、什么是Redis-Cluster"><a href="#2、什么是Redis-Cluster" class="headerlink" title="2、什么是Redis-Cluster"></a>2、什么是Redis-Cluster</h2><p>为何要搭建Redis集群。Redis是在内存中保存数据的，而我们的电脑一般内存都不大，这也就意味着Redis不适合存储大数据，Redis更适合处理高并发，一台设备的存储能力是很有限的，但是多台设备协同合作，就可以让内存增大很多倍，这就需要用到集群。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">从redis 3.0之后版本支持redis-cluster集群，它是Redis官方提出的解决方案：</span><br><span class="line">Redis-Cluster采用无中心结构，每个节点保存数据和整个集群状态,每个节点都和其他所有节点连接。其Redis-cluster架构图如下：</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/image-20210224212222130.png#id=zbfSq&originHeight=392&originWidth=350&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><blockquote><p>在这个图中，每一个蓝色的圈都代表着一个redis的服务器节点。它们任何两个节点之间都是相互连通的。客户端可以与任何一个节点相连接，然后就可以访问集群中的任何一个节点。对其进行存取和其他操作</p></blockquote><h3 id="2-1-redis-cluster特点"><a href="#2-1-redis-cluster特点" class="headerlink" title="2.1 redis cluster特点"></a>2.1 redis cluster特点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.所有的redis节点彼此互联(PING-PONG机制),内部使用二进制协议优化传输速度和带宽。</span><br><span class="line">2.客户端与redis节点直连,不需要中间proxy层.客户端不需要连接集群所有节点,连接集群中任何一个可用节点即可。</span><br><span class="line">3.节点的fail是通过集群中超过半数的节点检测失效时才生效。</span><br></pre></td></tr></table></figure><h3 id="2-2-redis-cluster数据分布"><a href="#2-2-redis-cluster数据分布" class="headerlink" title="2.2 redis-cluster数据分布"></a>2.2 redis-cluster数据分布</h3><p>Redis-cluster集群中有<strong>16384</strong>（0-16383）个哈希槽，每个redis实例负责一部分slot/槽位，集群中的所有信息通过节点数据交换而更新。一个hash slot中会有很多key和value。</p><h3 id="2-3-数据分布存储原理"><a href="#2-3-数据分布存储原理" class="headerlink" title="2.3 数据分布存储原理"></a>2.3 数据分布存储原理</h3><p>Redis 集群使用数据分片（sharding）来实现：Redis 集群中内置了 <code>16384</code> 个哈希槽，当需要在 Redis 集群中放置一个 key-value（name1: 张三） 时，redis 先对 key 使用 crc16 算法算出一个结果678698，然后把结果对 16384 求余数(集群使用公式 CRC16(key) % 16384)，这样每个key 都会对应一个编号在 0-16383 之间的哈希槽，那么redis就会把这个key 分配到对应范围的节点上了。同样，当连接三个节点任何一个节点想获取这个key时，也会这样的算法，然后内部跳转到存放这个key节点上获取数据。</p><p>例如三个节点：哈希槽分布的值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cluster1:  0-5460</span><br><span class="line">cluster2:  5461-10922</span><br><span class="line">cluster3:  10923-16383</span><br></pre></td></tr></table></figure><p>这种将哈希槽分布到不同节点的做法使得用户可以很容易地向集群中添加或者删除节点。 比如说：</p><ul><li>如果用户将新节点 D 添加到集群中， 那么集群只需要将节点 A 、B 、 C 中的某些槽移动到节点 D 就可以了。</li><li>如果用户要从集群中移除节点 A ， 那么集群只需要将节点 A 中的所有哈希槽移动到节点 B 和节点 C ， 然后再移除空白（不包含任何哈希槽）的节点 A 就可以了。</li></ul><p>因为将一个哈希槽从一个节点移动到另一个节点不会造成节点阻塞， 所以无论是添加新节点还是移除已存在节点， 又或者改变某个节点包含的哈希槽数量， 都不会造成集群下线。</p><h2 id="3、Redis-Cluster主从模式"><a href="#3、Redis-Cluster主从模式" class="headerlink" title="3、Redis Cluster主从模式"></a>3、Redis Cluster主从模式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis cluster 为了保证数据的高可用性，加入了主从模式，一个主节点对应一个或多个从节点，主节点提供数据存取，从节点则是从主节点拉取数据备份，当这个主节点挂掉后，就会有这个从节点选取一个来充当主节点，从而保证集群不会挂掉.</span><br><span class="line"></span><br><span class="line">1.主从切换机制</span><br><span class="line">选举过程是集群中所有master参与,如果半数以上master节点与故障节点通信超过(cluster-node-timeout),认为该节点故障，自动触发故障转移操作.  #故障节点对应的从节点自动升级为主节点</span><br><span class="line"></span><br><span class="line">2.什么时候整个集群就不能用了？</span><br><span class="line">如果集群任意一个主节点挂掉,且当前主节点没有从节点，则集群将无法继续，因为我们不再有办法为这个节点承担范围内的哈希槽提供服务。但是，如果这个主节点和所对应的从节点同时失败，则Redis Cluster无法继续运行。</span><br></pre></td></tr></table></figure><h1 id="二、集群部署"><a href="#二、集群部署" class="headerlink" title="二、集群部署"></a>二、集群部署</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">环境准备:</span><br><span class="line">1.准备三机器，关闭防火墙和selinux</span><br><span class="line">2.制作解析并相互做解析</span><br><span class="line">注:规划架构两种方案，一种是单机多实例，这里我们采用多机器部署</span><br><span class="line">三台机器，每台机器上面两个redis实例，一个master一个slave，第一列做主库，第二列做备库</span><br><span class="line"><span class="meta">#</span><span class="bash">记得选出控制节点</span></span><br><span class="line"></span><br><span class="line">redis-cluster1 192.168.116.172   7000、7001</span><br><span class="line">redis-cluster2 192.168.116.173   7002、7003</span><br><span class="line">redis-cluster3 192.168.116.174   7004、7005</span><br></pre></td></tr></table></figure><h2 id="1-三台机器相同操作"><a href="#1-三台机器相同操作" class="headerlink" title="1.三台机器相同操作"></a>1.三台机器相同操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.安装redis</span><br><span class="line">[root@redis-cluster1 ~]# mkdir /data</span><br><span class="line">[root@redis-cluster1 ~]# yum -y install gcc automake autoconf libtool make</span><br><span class="line">[root@redis-cluster1 ~]# wget https://download.redis.io/releases/redis-6.2.0.tar.gz</span><br><span class="line">[root@redis-cluster1 ~]# tar xzvf redis-6.2.0.tar.gz -C /data/</span><br><span class="line">[root@redis-cluster1 ~]# cd /data/</span><br><span class="line">[root@redis-cluster1 data]# mv redis-6.2.0/ redis</span><br><span class="line">[root@redis-cluster1 data]# cd redis/</span><br><span class="line">[root@redis-cluster1 redis]# make    #编译</span><br><span class="line">[root@redis-cluster1 redis]# mkdir /data/redis/data #创建存放数据的目录</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2.创建节点目录:按照规划在每台redis节点的安装目录中创建对应的目录（以端口号命名）</span><br><span class="line">[root@redis-cluster1 redis]# pwd</span><br><span class="line">/data/redis</span><br><span class="line">[root@redis-cluster1 redis]# mkdir cluster #创建集群目录</span><br><span class="line">[root@redis-cluster1 redis]# cd cluster/</span><br><span class="line">[root@redis-cluster1 cluster]# mkdir 7000 7001 #创建节点目录</span><br><span class="line"></span><br><span class="line">[root@redis-cluster2 redis]# mkdir cluster</span><br><span class="line">[root@redis-cluster2 redis]# cd cluster/</span><br><span class="line">[root@redis-cluster2 cluster]# mkdir 7002 7003</span><br><span class="line"></span><br><span class="line">[root@redis-cluster3 redis]# mkdir cluster</span><br><span class="line">[root@redis-cluster3 redis]# cd cluster/</span><br><span class="line">[root@redis-cluster3 cluster]# mkdir 7004 7005</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3.拷贝配置文件到节点目录中，#三台机器相同操作</span><br><span class="line">[root@redis-cluster1 cluster]# cp /data/redis/redis.conf 7000/</span><br><span class="line">[root@redis-cluster1 cluster]# cp /data/redis/redis.conf 7001/</span><br><span class="line"></span><br><span class="line">[root@redis-cluster2 cluster]# cp /data/redis/redis.conf 7002/</span><br><span class="line">[root@redis-cluster2 cluster]# cp /data/redis/redis.conf 7003/</span><br><span class="line"></span><br><span class="line">[root@redis-cluster3 cluster]# cp /data/redis/redis.conf 7004/</span><br><span class="line">[root@redis-cluster3 cluster]# cp /data/redis/redis.conf 7005/</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">4.修改集群每个redis配置文件。(主要是端口、ip、pid文件，三台机器相同操作)，修改如下：</span><br><span class="line">[root@redis-cluster1 cluster]# cd 7000/</span><br><span class="line">[root@redis-cluster1 7000]# vim redis.conf #修改如下</span><br><span class="line">bind 192.168.116.172  #每个实例的配置文件修改为对应节点的ip地址</span><br><span class="line">port 7000   #监听端口，运行多个实例时，需要指定规划的每个实例不同的端口号</span><br><span class="line">daemonize yes #redis后台运行</span><br><span class="line">pidfile /var/run/redis_7000.pid #pid文件，运行多个实例时，需要指定不同的pid文件</span><br><span class="line">logfile /var/log/redis_7000.log #日志文件位置，运行多实例时，需要将文件修改的不同。</span><br><span class="line">dir /data/redis/data #存放数据的目录</span><br><span class="line">appendonly yes #开启AOF持久化，redis会把所接收到的每一次写操作请求都追加到appendonly.aof文件中，当redis重新启动时，会从该文件恢复出之前的状态。</span><br><span class="line">appendfilename "appendonly.aof"  #AOF文件名称</span><br><span class="line">appendfsync everysec #表示对写操作进行累积，每秒同步一次</span><br><span class="line">以下为打开注释并修改</span><br><span class="line">cluster-enabled yes #启用集群</span><br><span class="line">cluster-config-file nodes-7000.conf #集群配置文件，由redis自动更新，不需要手动配置，运行多实例时请注修改为对应端口</span><br><span class="line">cluster-node-timeout 5000 #单位毫秒。集群节点超时时间，即集群中主从节点断开连接时间阈值，超过该值则认为主节点不可以，从节点将有可能转为master</span><br><span class="line">cluster-replica-validity-factor 10 #在进行故障转移的时候全部slave都会请求申请为master，但是有些slave可能与master断开连接一段时间了导致数据过于陈旧，不应该被提升为master。该参数就是用来判断slave节点与master断线的时间是否过长。（计算方法为：cluster-node-timeout * cluster-replica-validity-factor，此处为：5000 * 10 毫秒）</span><br><span class="line">cluster-migration-barrier 1 #一个主机将保持连接的最小数量的从机，以便另一个从机迁移到不再被任何从机覆盖的主机</span><br><span class="line">cluster-require-full-coverage yes #集群中的所有slot（16384个）全部覆盖，才能提供服务</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">注：</span></span><br><span class="line">所有节点配置文件全部修改切记需要修改的ip、端口、pid文件...避免冲突。确保所有机器都修改。</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">5.启动三台机器上面的每个节点(三台机器相同操作)</span><br><span class="line">[root@redis-cluster1 ~]# cd /data/redis/src/</span><br><span class="line">[root@redis-cluster1 src]# nohup ./redis-server ../cluster/7000/redis.conf &amp;</span><br><span class="line">[root@redis-cluster1 src]# nohup ./redis-server ../cluster/7001/redis.conf &amp;</span><br><span class="line"></span><br><span class="line">[root@redis-cluster2 7003]# cd /data/redis/src/</span><br><span class="line">[root@redis-cluster2 src]# nohup ./redis-server ../cluster/7002/redis.conf &amp;</span><br><span class="line">[root@redis-cluster2 src]# nohup ./redis-server ../cluster/7003/redis.conf &amp;</span><br><span class="line"></span><br><span class="line">[root@redis-cluster3 7005]# cd /data/redis/src/</span><br><span class="line">[root@redis-cluster3 src]# nohup ./redis-server ../cluster/7004/redis.conf &amp;</span><br><span class="line">[root@redis-cluster3 src]# nohup ./redis-server ../cluster/7005/redis.conf &amp;</span><br></pre></td></tr></table></figure><p>查看端口</p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/image-20210227170755994.png#id=ivIvP&originHeight=134&originWidth=1390&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/image-20210227171013509.png#id=wSIBf&originHeight=142&originWidth=1394&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/image-20210227171119590.png#id=XyVG3&originHeight=141&originWidth=1396&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">6.创建redis-cluster集群：在其中一个节点操作就可以</span><br><span class="line">redis节点搭建起来后，需要完成redis cluster集群搭建，搭建集群过程中，需要保证6个redis实例都是运行状态。</span><br><span class="line">Redis是根据IP和Port的顺序，确定master和slave的，所以要排好序，再执行。</span><br><span class="line"></span><br><span class="line">参数:</span><br><span class="line">--cluster-replicas 1:表示为集群中的每个主节点创建一个从节点.书写流程:主节点ip+port 对应一个从节点ip+port（注意:若节点在不同的机器上，注意主节点的书写位置，要避免主节点在同一台机器上，影响性能。正常是前面三个节点为主节点，后面的为从节点）</span><br><span class="line"></span><br><span class="line">[root@redis-cluster1 src]# cd /data/redis/src/</span><br><span class="line">[root@redis-cluster1 src]# ./redis-cli --cluster create --cluster-replicas 1 192.168.174.130:6379 192.168.174.131:6379 192.168.174.132:6379 192.168.174.133:6379 192.168.174.134:6379 192.168.174.135:6379</span><br><span class="line"></span><br><span class="line">192.168.116.172:7000 192.168.116.172:7001 192.168.116.173:7002 192.168.116.173:7003 192.168.116.174:7004 192.168.116.174:7005</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span></span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 192.168.116.173:7003 to 192.168.116.172:7000</span><br><span class="line">Adding replica 192.168.116.174:7005 to 192.168.116.173:7002</span><br><span class="line">Adding replica 192.168.116.172:7001 to 192.168.116.174:7004</span><br><span class="line">M: de5b4b2f6a559362ed56d4de1e3994fd529917b5 192.168.116.172:7000</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">S: 2e8c1caa63ac4a1b9a6eea4f0fd5eab4c6b73c21 192.168.116.172:7001</span><br><span class="line">   replicates 60e3755761c9cbdacb183f59e3d6205da5335e86</span><br><span class="line">M: e0370608cd33ddf5bb6de48b5627799e181de3b6 192.168.116.173:7002</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">S: 4035841f20f07674671e6bff5d4c6db99c00626b 192.168.116.173:7003</span><br><span class="line">   replicates de5b4b2f6a559362ed56d4de1e3994fd529917b5</span><br><span class="line">M: 60e3755761c9cbdacb183f59e3d6205da5335e86 192.168.116.174:7004</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: e200afc33b10bd6975160bfeda7277d02371981a 192.168.116.174:7005</span><br><span class="line">   replicates e0370608cd33ddf5bb6de48b5627799e181de3b6</span><br><span class="line">Can I set the above configuration? (type 'yes' to accept): yes  #写yes同意</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Nodes configuration updated</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Assign a different config epoch to each node</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span></span><br><span class="line">Waiting for the cluster to join</span><br><span class="line">.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Performing Cluster Check (using node 192.168.116.172:7000)</span></span><br><span class="line">M: de5b4b2f6a559362ed56d4de1e3994fd529917b5 192.168.116.172:7000</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: e0370608cd33ddf5bb6de48b5627799e181de3b6 192.168.116.173:7002</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 2e8c1caa63ac4a1b9a6eea4f0fd5eab4c6b73c21 192.168.116.172:7001</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 60e3755761c9cbdacb183f59e3d6205da5335e86</span><br><span class="line">M: 60e3755761c9cbdacb183f59e3d6205da5335e86 192.168.116.174:7004</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 4035841f20f07674671e6bff5d4c6db99c00626b 192.168.116.173:7003</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates de5b4b2f6a559362ed56d4de1e3994fd529917b5</span><br><span class="line">S: e200afc33b10bd6975160bfeda7277d02371981a 192.168.116.174:7005</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates e0370608cd33ddf5bb6de48b5627799e181de3b6</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Check <span class="keyword">for</span> open slots...</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Check slots coverage...</span></span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/image-20210323164542348.png#id=xfNMs&originHeight=438&originWidth=908&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7.查看集群状态可连接集群中的任一节点，此处连接了集群中的节点192.168.116.172:7000</span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;登录集群客户端，-c标识以集群方式登录</span></span><br><span class="line">[root@redis-cluster1 src]# ./redis-cli -h 192.168.116.172 -c -p 7000</span><br><span class="line">192.168.116.172:7000&gt; ping</span><br><span class="line">PONG</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 查看集群信息</span></span><br><span class="line">192.168.116.173:7002&gt; cluster info</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408151322482.png" alt="image-20240815132244405"></p><blockquote><ul><li><strong><code>cluster_state:ok</code></strong>:<ul><li>集群的当前状态。<code>ok</code> 表示集群正常运行。如果为 <code>fail</code>，表示集群出现问题（例如某个节点不可达或有故障）。</li></ul></li><li><strong><code>cluster_slots_assigned:16384</code></strong>:<ul><li>集群中已分配的哈希槽数量。Redis 集群的哈希槽总数是 16384，表示所有槽都已分配。</li></ul></li><li><strong><code>cluster_slots_ok:16384</code></strong>:<ul><li>集群中正常工作的哈希槽数量。这里为 16384，表示所有槽都正常。</li></ul></li><li><strong><code>cluster_slots_pfail:0</code></strong>:<ul><li>处于 <code>pfail</code>（潜在故障）状态的哈希槽数量。<code>pfail</code> 表示集群认为某些节点可能有问题，但尚未完全确认。这里为 0，表示没有节点处于潜在故障状态。</li></ul></li><li><strong><code>cluster_slots_fail:0</code></strong>:<ul><li>处于 <code>fail</code> 状态的哈希槽数量。<code>fail</code> 表示有节点被标记为已故障，并且集群确认它们无法工作。这里为 0，表示没有节点发生故障。</li></ul></li><li><strong><code>cluster_known_nodes:8</code></strong>:<ul><li>集群中已知的节点数量。这里为 8，表示集群中有 8 个节点，这些节点包括主节点和从节点。</li></ul></li><li><strong><code>cluster_size:4</code></strong>:<ul><li>集群的大小，即主节点的数量。这里为 4，表示集群中有 4 个主节点。</li></ul></li><li><strong><code>cluster_current_epoch:8</code></strong>:<ul><li>当前集群的 <code>epoch</code>（纪元）。<code>epoch</code> 用于处理集群的重新分片或节点选举。在集群中，每次重新选主或分配槽时，<code>epoch</code> 会递增。</li></ul></li><li><strong><code>cluster_stats_messages_ping_sent:1923</code></strong>:<ul><li>该节点向集群中其他节点发送的 <code>ping</code> 消息数量。这里为 1923，表示该节点已经发送了 1923 条 <code>ping</code> 消息来监控集群中的其他节点状态。</li></ul></li><li><strong><code>cluster_stats_messages_pong_sent:1955</code></strong>:<ul><li>该节点向集群中其他节点发送的 <code>pong</code> 消息数量。这里为 1955，表示该节点响应了 1955 次其他节点发送的 <code>ping</code> 消息。</li></ul></li><li><strong><code>cluster_stats_messages_sent:3878</code></strong>:<ul><li>该节点发送的所有类型的消息总数，包括 <code>ping</code>、<code>pong</code>等消息类型。这里总计为 3878 条消息。</li></ul></li><li><strong><code>cluster_stats_messages_ping_received:1955</code></strong>:<ul><li>该节点接收到的 <code>ping</code> 消息数量。这里为 1955，表示该节点接收了 1955 条来自其他节点的 <code>ping</code> 消息。</li></ul></li><li><strong><code>cluster_stats_messages_pong_received:1923</code></strong>:<ul><li>该节点接收到的 <code>pong</code> 消息数量。这里为 1923，表示该节点接收了 1923 条来自其他节点的 <code>pong</code> 消息。</li></ul></li><li><strong><code>cluster_stats_messages_received:3878</code></strong>:<ul><li>该节点接收到的所有类型的消息总数。包括 <code>ping</code>、<code>pong</code> 等消息类型。</li></ul></li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 查看集群节点</span></span><br><span class="line">192.168.174.50:6379&gt; CLUSTER nodes</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408151326241.png" alt="image-20240815132602182"></p><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">05a613685a2f0e49c5be0603ad5a867ac64bd601 192.168.174.54:6379@16379 master - 0 1723698435000 8 connected 1333-5460</span><br></pre></td></tr></table></figure><ul><li><strong><code>05a613685a2f0e49c5be0603ad5a867ac64bd601</code></strong>:<ul><li>节点的唯一标识符 (Node ID)，用于唯一标识 Redis 集群中的每个节点。</li></ul></li><li><strong><code>192.168.174.54:6379@16379</code></strong>:<ul><li>节点的 IP 地址和端口号。<code>192.168.174.54</code> 是 IP 地址，<code>6379</code> 是 Redis 的服务端口，<code>16379</code> 是集群端口。</li></ul></li><li><strong><code>master</code></strong>:<ul><li>节点的角色。在此行中，该节点是 <code>master</code> 节点，表示它是集群中的主节点，负责管理指定范围的哈希槽。</li></ul></li><li><strong><code>-</code></strong>:<ul><li>此字段用于标记节点的状态或者对某些节点的关系。在此处显示为 <code>-</code>，表示该节点没有故障。</li></ul></li><li><strong><code>0</code></strong>:<ul><li>这是节点的延迟时间（ping-sent），即上次向该节点发送 ping 的时间。<code>0</code> 表示当前未发送 ping。</li></ul></li><li><strong><code>1723698435000</code></strong>:<ul><li>上次接收到节点 pong 响应的时间戳，单位为毫秒。</li></ul></li><li><strong><code>8</code></strong>:<ul><li>节点的 纪元，用于协调集群中的选举和状态同步。</li></ul></li><li><strong><code>connected</code></strong>:<ul><li>节点的连接状态。<code>connected</code> 意味节点目前在线且正常连接到集群。</li></ul></li><li><strong><code>1333-5460</code></strong>:<ul><li>该节点负责的哈希槽范围。</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18ede67545805ff44b1183bdeb3be6a513ded867 192.168.174.55:6379@16379 slave e473d8099e960ce1e5cd44807efd10f80706dfff 0 1723698435170 2 connected</span><br></pre></td></tr></table></figure><ul><li><strong><code>18ede67545805ff44b1183bdeb3be6a513ded867</code></strong>:<ul><li>节点的唯一标识符 (Node ID)。</li></ul></li><li><strong><code>192.168.174.55:6379@16379</code></strong>:<ul><li>节点的 IP 地址和端口号。<code>192.168.174.55</code> 是 IP 地址，<code>6379</code> 是 Redis 的服务端口，<code>16379</code> 是集群端口。</li></ul></li><li><strong><code>slave</code></strong>:<ul><li>该节点的角色是 <code>slave</code>。</li></ul></li><li><strong><code>e473d8099e960ce1e5cd44807efd10f80706dfff</code></strong>:<ul><li><code>slave</code> 节点所属的主节点的 ID。该从节点在从主节点复制数据。</li></ul></li><li><strong><code>0</code></strong>:<ul><li>节点的延迟时间（ping-sent），即上次向该节点发送 ping 的时间。这里的 <code>0</code> 表示当前未发送 ping。</li></ul></li><li><strong><code>1723698435170</code></strong>:<ul><li>这是上次接收到节点 pong 响应的时间戳，单位为毫秒。</li></ul></li><li><strong><code>2</code></strong>:<ul><li>节点的 纪元，用于协调集群中的选举和状态同步。</li></ul></li><li><strong><code>connected</code></strong>:<ul><li>节点的连接状态。<code>connected</code> 意味着该节点目前在线且正常连接到集群。</li></ul></li></ul></blockquote><h1 id="三、集群操作"><a href="#三、集群操作" class="headerlink" title="三、集群操作"></a>三、集群操作</h1><h2 id="1、客户端登陆"><a href="#1、客户端登陆" class="headerlink" title="1、客户端登陆"></a>1、客户端登陆</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">测试链接redis，存取数据(链接集群中任意一台机器就可以。)</span><br><span class="line">存：</span><br><span class="line">[root@redis-cluster1 src]# ./redis-cli -h 192.168.116.172 -c -p 7000</span><br><span class="line">192.168.116.172:7000&gt; ping</span><br><span class="line">PONG</span><br><span class="line">192.168.116.172:7000&gt; set name qianfeng</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> Redirected to slot [5798] located at 192.168.116.173:7002</span></span><br><span class="line">OK</span><br><span class="line">192.168.116.173:7002&gt;</span><br><span class="line"></span><br><span class="line">读</span><br><span class="line">[root@redis-cluster3 src]# ./redis-cli -h 192.168.116.173 -c -p 7002</span><br><span class="line">192.168.116.173:7002&gt; ping</span><br><span class="line">PONG</span><br><span class="line">192.168.116.173:7002&gt; get name</span><br><span class="line">"qianfeng"</span><br><span class="line">192.168.116.173:7002&gt; exists name  #查看某一个key是否存在</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h2 id="2、Redis-Cluster-添加节点"><a href="#2、Redis-Cluster-添加节点" class="headerlink" title="2、Redis Cluster 添加节点"></a>2、Redis Cluster 添加节点</h2><ol><li><strong>环境准备</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.174.56 redis07</span><br><span class="line">192.168.174.57 redis08</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>两台服务器安装redis实例</strong></li></ol><p>略</p><ol start="3"><li><strong>添加的master节点操作</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 添加软连接</span></span><br><span class="line">[root@redis07 ~]<span class="comment"># ln -s /usr/local/redis/src/redis-cli  /usr/bin/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 加入Redis Cluster集群</span></span><br><span class="line">[root@redis07 ~]<span class="comment"># redis-cli --cluster add-node 192.168.174.56:6379 192.168.174.51:6379</span></span><br></pre></td></tr></table></figure><blockquote><p>参数解释：</p><ul><li>192.168.174.56:6379   当前需要加入集群的master地址</li><li>192.168.174.51:6379   加入的集群中存在的任意master地址</li></ul></blockquote><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408151909547.png" alt="image-20240815190931101"></p><ol start="4"><li><strong>登录集群任意节点查看</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@redis01 redis]<span class="comment"># redis-cli  -h 192.168.174.50 -c</span></span><br><span class="line">192.168.174.50:6379&gt; cluster nodes</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408151910155.png" alt="image-20240815191056049"></p><ol start="5"><li><p><strong>给新节点分配Hash槽</strong></p><p>需要给新节点进行hash槽分配，这样该主节才可以存储数据。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@redis01 redis]<span class="comment"># redis-cli  --cluster reshard 192.168.174.56:6379</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.116.175:7006)</span><br><span class="line">......</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line">How many slots <span class="keyword">do</span> you want to move (from 1 to 16384)? 4000 <span class="comment">#输入要分配的槽数量 </span></span><br><span class="line">What is the receiving node ID?  828c48dc72d52ff5be972512d3d87b70236af87c <span class="comment">#输入接收槽的节点id,通过cluster nodes 查看新增的192.168.174.56:6379 的id</span></span><br><span class="line"></span><br><span class="line">Please enter all the <span class="built_in">source</span> node IDs.</span><br><span class="line">  Type <span class="string">'all'</span> to use all the nodes as <span class="built_in">source</span> nodes <span class="keyword">for</span> the <span class="built_in">hash</span> slots.</span><br><span class="line">  Type <span class="string">'done'</span> once you entered all the <span class="built_in">source</span> nodes IDs.</span><br><span class="line">输入： all</span><br><span class="line">然后输入输入yes确认</span><br></pre></td></tr></table></figure><ol start="6"><li><strong>查看集群节点分配的槽位</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.174.52:6379&gt; cluster nodes</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408151917575.png" alt="image-20240815191716473"></p><ol start="8"><li><strong>给master添加slave</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@redis01 redis]<span class="comment"># redis-cli --cluster add-node 192.168.174.57:6379 192.168.174.56:6379 --cluster-slave --cluster-master-id d9a270610aad049ab23045f6ed9098c58591c7b3</span></span><br></pre></td></tr></table></figure><blockquote><p>参数解释：</p><ul><li>192.168.174.57:6379  添加的slave节点ip+端口</li><li>192.168.174.56:6379  需要添加slave的master节点ip+端口</li><li>d9a270610aad049ab23045f6ed9098c58591c7b3  需要添加slave的master节点的标识码</li></ul></blockquote><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408151948284.png" alt="image-20240815194824248"></p><ol start="9"><li><strong>平衡各个主节点的槽</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@redis01 redis]<span class="comment"># redis-cli --cluster rebalance --cluster-threshold 1 192.168.174.56:6379</span></span><br><span class="line"><span class="comment"># --cluster-threshold 1 只要不均衡的slot数量超过1,就触发rebanlance</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408151951528.png" alt="image-20240815195134465"></p><ol start="10"><li><strong>测试</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">192.168.174.52:6379&gt; <span class="built_in">set</span> ccc ddd</span><br><span class="line">-&gt; Redirected to slot [135] located at 192.168.174.56:6379</span><br><span class="line">OK</span><br><span class="line">192.168.174.56:6379&gt; keys *</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">2) <span class="string">"name02"</span></span><br><span class="line">3) <span class="string">"ccc"</span></span><br></pre></td></tr></table></figure><h2 id="3、Redis-Cluster移除节点"><a href="#3、Redis-Cluster移除节点" class="headerlink" title="3、Redis Cluster移除节点"></a>3、Redis Cluster移除节点</h2><p> <strong>如果要下线节点6，节点7，请务必先下线从节点，并且节点6的slot的迁移到其他节点了，如果先线下节点6的话 会发产生故障切换，节点7成主节点了。在移除某个redis节点之前，首先不能在登入该节点当中，否则不能正常移除该节点。</strong></p><ol><li><strong>移除从节点</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@redis01 redis]<span class="comment"># redis-cli --cluster del-node 192.168.174.57:6379 7df33a0481c29290a14769e4f77e9f5654f20e3d</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408151957154.png" alt="image-20240815195705121"></p><ol start="2"><li><strong>查看集群节点</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.174.56:6379&gt; cluster nodes</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408151957171.png" alt="image-20240815195753038"></p><ol start="3"><li><strong>查看每个节点槽的数量</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@redis01 redis]<span class="comment"># redis-cli  --cluster info 192.168.174.56:6379</span></span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408152000626.png" alt="image-20240815200036592"></p><blockquote><p>要删除的当前主节点哈希槽状态：<code>0-1364 5461-6826 10923-12287</code><br>共有哈希槽=<code>1365 + 1366 + 1365 = 4096个</code></p></blockquote><ol start="4"><li>将<code>redis06</code>节点上面的槽迁移到其他节点</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ip+port：要移除的节点</span></span><br><span class="line"><span class="comment"># cluster-from:移除节点的id</span></span><br><span class="line"><span class="comment"># cluster-to:接受槽主节点的id，需要将4096平均移动到不同的主节点，需要写不同接受槽的主节点id</span></span><br><span class="line"><span class="comment"># cluster-slots:移除槽的数量</span></span><br><span class="line"></span><br><span class="line">redis-cli --cluster reshard 192.168.174.56:6379 --cluster-from d9a270610aad049ab23045f6ed9098c58591c7b3 --cluster-to 788f2fbe060a59449a31da7a0c8afc384007387b --cluster-slots 1365 --cluster-yes</span><br><span class="line"></span><br><span class="line">redis-cli --cluster reshard 192.168.174.56:6379 --cluster-from d9a270610aad049ab23045f6ed9098c58591c7b3 --cluster-to 98a4ff6a6533f30a2c3211f28f4c5a709949d44e --cluster-slots 1366 --cluster-yes</span><br><span class="line"></span><br><span class="line">redis-cli --cluster reshard 192.168.174.56:6379 --cluster-from d9a270610aad049ab23045f6ed9098c58591c7b3 --cluster-to 58fa947712a4a3af5fde37982f4ea02126655e02 --cluster-slots 1365 --cluster-yes</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>查看集群节点信息</strong></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.174.56:6379&gt; cluster nodes</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408152007085.png" alt="image-20240815200748940"></p><ol start="6"><li><strong>删除节点</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster del-node 192.168.174.56:6379  d9a270610aad049ab23045f6ed9098c58591c7b3</span><br></pre></td></tr></table></figure><blockquote><p>参数解释：</p><ul><li>192.168.174.56:6379  需要删除的节点IP+端口</li><li>d9a270610aad049ab23045f6ed9098c58591c7b3  节点标识码</li></ul></blockquote><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408152010340.png" alt="image-20240815201059309"></p><ol start="7"><li><strong>查看集群节点信息</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.174.51:6379&gt; cluster nodes</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408152011138.png" alt="image-20240815201150073"></p><h1 id="四、主从切换"><a href="#四、主从切换" class="headerlink" title="四、主从切换"></a>四、主从切换</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">测试：</span><br><span class="line">1.将节点cluster1的主节点7000端口的redis关掉</span><br><span class="line">[root@redis-cluster1 src]# ps -ef |grep redis </span><br><span class="line">root      15991      1  0 01:04 ?        00:02:24 ./redis-server 192.168.116.172:7000 [cluster]</span><br><span class="line">root      16016      1  0 01:04 ?        00:02:00 ./redis-server 192.168.116.172:7001 [cluster]</span><br><span class="line">root      16930   1595  0 08:04 pts/0    00:00:00 grep --color=auto redis</span><br><span class="line">[root@redis-cluster1 src]# kill -9 15991</span><br><span class="line"></span><br><span class="line">查看集群信息：</span><br><span class="line">192.168.116.173:7002&gt; CLUSTER nodes</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/image-20210228001320857.png#id=xicjO&originHeight=311&originWidth=1886&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p>可以看到7000端口这个redis已经是fail失败的了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2.将该节点的7000端口redis启动在查看</span><br><span class="line">[root@redis-cluster1 log]# cd /data/redis/src/</span><br><span class="line">[root@redis-cluster1 src]# ./redis-server ../cluster/7000/redis.conf</span><br><span class="line"></span><br><span class="line">查看节点信息：</span><br><span class="line">192.168.116.173:7002&gt; CLUSTER nodes</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408151311810.png" alt="image-20240815131113698"></p><h3 id="redis面试问题整理"><a href="#redis面试问题整理" class="headerlink" title="redis面试问题整理"></a>redis面试问题整理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">一、如何解决Redis，mysql双写一致性？</span><br><span class="line">1.最经典的缓存+数据库读写的模式:</span><br><span class="line">读的时候，先读缓存，缓存没有的话，就读数据库，然后取出数据后放入缓存，同时返回响应。</span><br><span class="line">更新的时候，先更新数据库，然后再删除缓存。</span><br><span class="line">2.给缓存设置过期时间，这种方案下，可以对存入缓存的数据设置过期时间，所有的写操作以数据库为准，也就是说如果数据库写成功，缓存更新失败，那么只要到达过期时间，则后面的读请求自然会从数据库中读取新值然后回填缓存。</span><br><span class="line"></span><br><span class="line">二、缓存雪崩</span><br><span class="line">数据未加载到缓存中，或者缓存同一时间大面积的失效，从而导致所有请求都去查数据库，导致数据库CPU和内存负载过高，甚至宕机。</span><br><span class="line">产生雪崩的简单过程：</span><br><span class="line">1、redis集群大面积故障</span><br><span class="line">2、缓存失效，但依然大量请求访问缓存服务redis</span><br><span class="line">3、redis大量失效后，大量请求转向到mysql数据库，mysql的调用量暴增，很快就扛不住了，甚至直接宕机</span><br><span class="line">4、由于大量的应用服务依赖mysql和redis的服务，这个时候很快会演变成各服务器集群的雪崩，最后网站彻底崩溃。</span><br><span class="line"><span class="meta">#</span><span class="bash">解决：</span></span><br><span class="line"></span><br><span class="line">1.缓存的高可用性</span><br><span class="line">缓存层设计成高可用，防止缓存大面积故障。即使个别节点、个别机器、甚至是机房宕掉，依然可以提供服务，例如 Redis Sentinel 和 Redis Cluster 都实现了高可用。</span><br><span class="line"></span><br><span class="line">2.缓存降级</span><br><span class="line">可以利用ehcache等本地缓存(暂时支持)，主要还是对源服务访问进行限流、资源隔离（熔断）、降级等。</span><br><span class="line">当访问量剧增、服务出现问题仍然需要保证服务还是可用的。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级，这里会涉及到运维的配合。</span><br><span class="line">降级的最终目的是保证核心服务可用，即使是有损的。</span><br><span class="line">在进行降级之前要对系统进行梳理，比如：哪些业务是核心(必须保证)，哪些业务可以容许暂时不提供服务(利用静态页面替换)等，以及配合服务器核心指标，来后设置整体。</span><br><span class="line"></span><br><span class="line">3.Redis备份和快速预热</span><br><span class="line">1)Redis数据备份和恢复</span><br><span class="line">2)快速缓存预热</span><br><span class="line"></span><br><span class="line">4.提前演练</span><br><span class="line">最后，建议还是在项目上线前，演练缓存层宕掉后，应用以及后端的负载情况以及可能出现的问题，对高可用提前预演，提前发现问题。</span><br><span class="line"></span><br><span class="line">三、缓存穿透</span><br><span class="line">缓存穿透是指查询一个一不存在的数据。例如：从缓存redis没有命中，需要从mysql数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，造成缓存穿透。</span><br><span class="line">解决：</span><br><span class="line">如果查询数据库也为空，直接设置一个默认值存放到缓存，这样第二次到缓冲中获取就有值了，而不会继续访问数据库。设置一个过期时间或者当有值的时候将缓存中的值替换掉即可。</span><br><span class="line"></span><br><span class="line">四、缓存并发</span><br><span class="line">这里的并发指的是多个redis的client同时set key引起的并发问题。其实redis自身就是单线程操作，多个client并发操作，按照先到先执行的原则，先到的先执行，其余的阻塞。</span><br><span class="line"></span><br><span class="line">五、缓存预热</span><br><span class="line">缓存预热就是系统上线后，将相关的缓存数据直接加载到缓存系统。</span><br><span class="line">这样就可以避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！</span><br><span class="line">解决：</span><br><span class="line">1、直接写个缓存刷新页面，上线时手工操作下；</span><br><span class="line">2、数据量不大，可以在项目启动的时候自动进行加载；</span><br><span class="line">目的就是在系统上线前，将数据加载到缓存中。</span><br><span class="line"></span><br><span class="line">其他面试：</span><br><span class="line">1.Redis官方为什么不提供Windows版本？</span><br><span class="line">因为目前Linux版本已经相当稳定，而且用户量很大，无需开发windows版本，反而会带来兼容性等问题。</span><br><span class="line">2.一个字符串类型的值能存储最大容量是多少？</span><br><span class="line">512M</span><br><span class="line">3.Redis集群方案什么情况下会导致整个集群不可用？</span><br><span class="line">有A，B，C三个节点的集群,在没有复制模型的情况下,如果节点B失败了，那么整个集群就会以为缺少5501-11000这个范围的槽而不可用。</span><br><span class="line">4.说说Redis哈希槽的概念？</span><br><span class="line">Redis集群没有使用一致性hash,而是引入了哈希槽的概念，Redis集群有16384个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽，集群的每个节点负责一部分hash槽。</span><br><span class="line">5.Redis集群之间是如何复制的？</span><br><span class="line">异步复制</span><br><span class="line">6.Redis集群最大节点个数是多少？</span><br><span class="line">16384个。</span><br><span class="line">7.Redis集群如何选择数据库？</span><br><span class="line">Redis集群目前无法做数据库选择，默认在0数据库。</span><br><span class="line">8.怎么测试Redis的连通性？</span><br><span class="line">ping</span><br><span class="line">9.如何与Redis互动？</span><br><span class="line">安装服务器后，您可以运行redis安装提供的Redis客户端，也可以打开命令提示符并使用以下命令：</span><br><span class="line">redis-cli</span><br><span class="line">10.使用Redis有什么好处？</span><br><span class="line">Redis非常快。</span><br><span class="line">它支持服务器端锁定。</span><br><span class="line">它有一个丰富的客户端库。</span><br><span class="line">这是一个很好的反击。</span><br><span class="line">它支持原子操作。</span><br><span class="line">11.使用Redis有哪些缺点/限制？</span><br><span class="line">它是单线程的。</span><br><span class="line">它对一致哈希的客户端支持有限。</span><br><span class="line">它具有很大的持久性开销。</span><br><span class="line">它没有广泛部署。</span><br><span class="line">12.Redis和RDBMS有什么区别？</span><br><span class="line">Redis是NoSQL数据库，而RDBMS是SQL数据库。</span><br><span class="line">Redis遵循键值结构，而RDBMS遵循表结构。</span><br><span class="line">Redis非常快，而RDBMS相对较慢。</span><br><span class="line">Redis将所有数据集存储在主存储器中，而RDBMS将其数据集存储在辅助存储器中。</span><br><span class="line">Redis通常用于存储小型和常用文件，而RDBMS用于存储大文件。</span><br><span class="line">Redis仅为Linux，BSD，Mac OS X，Solaris提供官方支持。它目前没有为Windows提供官方支持，而RDBMS提供对两者的支持</span><br><span class="line">13.什么是redis的事务？</span><br><span class="line">a）事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</span><br><span class="line">b）事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。</span><br><span class="line">14.Redis单点吞吐量</span><br><span class="line">单点TPS达到8万/秒，QPS达到10万/秒，补充下TPS和QPS的概念</span><br><span class="line">1.QPS: 应用系统每秒钟最大能接受的用户访问量</span><br><span class="line">每秒钟处理完请求的次数，注意这里是处理完，具体是指发出请求到服务器处理完成功返回结果。可以理解在server中有个counter，每处理一个请求加1，1秒后counter=QPS。</span><br><span class="line">2.TPS： 每秒钟最大能处理的请求数</span><br><span class="line">每秒钟处理完的事务次数，一个应用系统1s能完成多少事务处理，一个事务在分布式处理中，可能会对应多个请求，对于衡量单个接口服务的处理能力，用QPS比较合理。</span><br><span class="line"></span><br><span class="line">问题2:Redis的多数据库机制，了解多少？</span><br><span class="line">正常：Redis支持多个数据库，并且每个数据库的数据是隔离的不能共享，单机下的redis可以支持16个数据库（db0 ~ db15）</span><br><span class="line">集群: 在Redis Cluster集群架构下只有一个数据库空间，即db0。因此，我们没有使用Redis的多数据库功能！</span><br><span class="line"></span><br><span class="line">问题3:Redis集群机制中，你觉得有什么不足的地方吗？</span><br><span class="line">假设我有一个key，对应的value是Hash类型的。如果Hash对象非常大，是不支持映射到不同节点的！只能映射到集群中的一个节点上！还有就是做批量操作比较麻烦！</span><br><span class="line"></span><br><span class="line">问题4:懂Redis的批量操作么？</span><br><span class="line">正常: 比如mset、mget操作等</span><br><span class="line">集群: 我们在生产上采用的是Redis Cluster集群架构，不同的key会划分到不同的slot中，因此直接使用mset或者mget等操作是行不通的。</span><br><span class="line"></span><br><span class="line">问题6:你们有对Redis做读写分离么？</span><br><span class="line">正常:没有做</span><br><span class="line">集群:不做读写分离。我们用的是Redis Cluster的架构，是属于分片集群的架构。而redis本身在内存上操作，不会涉及IO吞吐，即使读写分离也不会提升太多性能，Redis在生产上的主要问题是考虑容量，单机最多10-20G，key太多降低redis性能.因此采用分片集群结构，已经能保证了我们的性能。其次，用上了读写分离后，还要考虑主从一致性，主从延迟等问题，徒增业务复杂度。</span><br></pre></td></tr></table></figure><p>elk相关面试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.ELK能做什么？</span><br><span class="line">ELK组件在海量日志系统的运维中，可用于解决：</span><br><span class="line">分布式日志数据集中式查询和管理</span><br><span class="line">系统监控，包含系统硬件和应用各个组件的监控</span><br><span class="line">故障排查</span><br><span class="line">安全信息和事件管理</span><br><span class="line">报表功能</span><br><span class="line"></span><br><span class="line">2.ES与关系数据库对比</span><br><span class="line">在 ES 中，文档归属于一种 类型 (type) ，而这些类型存在于索引 (index) 中，类比传统关系型数据库</span><br><span class="line">DB -&gt; Databases -&gt; Tables -&gt; Rows -&gt; Columns</span><br><span class="line">关系型      数据库          表            行              列  </span><br><span class="line"></span><br><span class="line">ES -&gt; Indices   -&gt; Types  -&gt; Documents -&gt; Fields</span><br><span class="line">ES       索引            类型            文档           域（字段）</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://l66stbz.github.io/tags/Linux/"/>
    
      <category term="Redis" scheme="https://l66stbz.github.io/tags/Redis/"/>
    
      <category term="Cluster" scheme="https://l66stbz.github.io/tags/Cluster/"/>
    
  </entry>
  
  <entry>
    <title>NoSQL-Redis</title>
    <link href="https://l66stbz.github.io/2024/08/14/NoSQL-Redis/"/>
    <id>https://l66stbz.github.io/2024/08/14/NoSQL-Redis/</id>
    <published>2024-08-14T14:50:00.000Z</published>
    <updated>2024-08-17T07:53:47.741Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Redis-缓存数据库"><a href="#Redis-缓存数据库" class="headerlink" title="Redis 缓存数据库"></a>Redis 缓存数据库</h1><p>[TOC]</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>缓存数据库是一种<strong><code>位于应用程序与主要后端数据库之间的中间层，用于提高数据访问速度的技术</code></strong>。</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405131854766.png" alt="image-20240513185433565"></p><p>以下是一些关于缓存数据库的详细介绍： </p><ol><li><strong>作用</strong>：缓存数据库主要用于存储那些<code>频繁访问</code>或计算成本较高的数据副本。这些数据通常被放置在高速、低延迟的存储介质上，如内存中，以便快速访问。<code>加快访问速度 ,缓解关系型数据库的读压力</code>。</li><li><strong>使用场景</strong>：当应用程序需要数据时，首先会从<code>缓存</code>中查询。如果所需数据在<code>缓存</code>中存在，则可以直接获取，从而避免了<code>直接访问</code>主数据库的步骤，这可以显著减少数据<code>检索</code>的时间，并减轻主数据库的<code>负载</code>。</li><li><strong>常见类型</strong>：<ul><li><strong><code>Redis</code></strong>：它是一种非关系型（NoSQL）<code>内存键值</code>存储数据库，支持多种数据结构，包括字符串、哈希、列表等。Redis以其快速的读写能力和丰富的功能而闻名，适用于缓存、消息传递、会话存储等多种场景。</li><li><strong>Memcached</strong>：同样是键值对形式的内存缓存系统，设计相对简单，主要用于缓存常用数据，特别适应于分布式环境中的数据缓存需求。</li></ul></li><li><strong>优势</strong>：缓存数据库的使用可以减少数据库的<code>读取次数</code>，加快数据的处理速度，改善用户体验，并在高流量环境下保持系统的响应性和稳定性。</li></ol><blockquote><p><strong>注意事项</strong>：缓存数据库固然提供了许多好处，但也要注意数据一致性和缓存失效的问题。必须确保在适当的时候更新或清除缓存，以避免过时或错误的数据被使用。</p></blockquote><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a><strong>1、简介</strong></h3><p>NoSQL产品: <strong>Redis</strong>、<strong>MongoDB</strong>、<strong>Memcached</strong></p><ul><li>MongoDB：<ul><li><strong>基于文档的数据存储</strong>：MongoDB使用BSON（类似JSON）格式存储数据，这使得数据结构灵活且易于扩展。</li></ul></li></ul><p>NOSQL名词解释：非关系型数据库;<code>通常</code>是以键值对的方式存储数据（<strong>Key-Value</strong>）的形式。</p><h3 id="2、NoSQL的优点-缺点"><a href="#2、NoSQL的优点-缺点" class="headerlink" title="2、NoSQL的优点/缺点"></a>2、NoSQL的优点/缺点</h3><p>优点：</p><ul><li><strong>数据模型灵活性</strong><ul><li>NoSQL数据库不需要<code>预先定义表结构</code>，可以根据实际需求动态调整<code>数据类型</code>。</li></ul></li><li><strong>高可扩展性</strong><ul><li>NoSQL数据库采用<code>分布式</code>架构，可以通过水平扩展来处理<code>大规模</code>数据和<code>高并发</code>读写。通过在集群中添加更多的节点，可以提高数据库的性能和容量。这种高可扩展性使得NoSQL数据库适用于大规模数据处理和高并发场景，可以满足业务的快速增长需求。</li></ul></li><li><strong>高性能</strong><ul><li>NoSQL数据库通常采用<code>内存存储</code>，以及并行计算和<code>分布式</code>计算技术，可以提供高性能的数据存储和查询能力。在对数据进行读取和写入操作时，NoSQL数据库可以快速响应，提供低延迟的数据访问。</li></ul></li></ul><p>缺点：</p><ul><li><code>一致性问题</code><ul><li>NoSQL数据库通常采用最终一致性的策略，即在一段时间内达到一致状态，可以容忍一定的数据不一致性。在数据更新和复制过程中，可能会出现数据不一致的情况。</li></ul></li><li>查询能力限制<ul><li>NoSQL数据库的查询能力相对较弱，通常只支持基本的查询操作。与传统关系型数据库相比，NoSQL数据库缺少复杂的查询操作和聚合函数。在需要进行复杂的数据查询和分析的场景中，NoSQL数据库的查询能力可能无法满足需求。</li></ul></li><li>缺乏标准化<ul><li>NoSQL数据库的种类繁多，没有一个统一的标准化规范。不同的NoSQL数据库具有不同的查询语言。</li></ul></li></ul><h3 id="3、关系型数据库与非关系型数据库的区别：———面试高频率问题"><a href="#3、关系型数据库与非关系型数据库的区别：———面试高频率问题" class="headerlink" title="3、关系型数据库与非关系型数据库的区别：———面试高频率问题"></a>3、关系型数据库与非关系型数据库的区别：———面试高频率问题</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1.首先了解一下 什么是关系型数据库？</span><br><span class="line">关系型数据库最典型的数据结构是表，由二维表及其之间的联系所组成的一个数据组织。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">优点：</span><br><span class="line">1、易于维护：都是使用表结构，格式一致；</span><br><span class="line">2、使用方便：SQL语言通用，可用于复杂查询；</span><br><span class="line">3、复杂操作：支持SQL，可用于一个表以及多个表之间非常复杂的查询。</span><br><span class="line">缺点：</span><br><span class="line">1、读写性能比较差，尤其是海量数据的高效率读写；</span><br><span class="line">2、固定的表结构，灵活度稍欠；</span><br><span class="line">3、高并发读写需求，传统关系型数据库来说，硬盘I/O是一个很大的瓶颈；</span><br><span class="line"></span><br><span class="line">二 非关系型数据库</span><br><span class="line">什么非关系型数据库呢？</span><br><span class="line"></span><br><span class="line">非关系型数据是一种数据结构化存储方法的集合，可以是文档或者键值对等</span><br><span class="line"></span><br><span class="line">优点：</span><br><span class="line">1、格式灵活：存储数据的格式可以是key,value形式、文档形式、图片形式等等，使用灵活，应用场景广泛，而关系型数据库则只支持基础类型。</span><br><span class="line">2、速度快：nosql可以使用硬盘或者随机存储器作为载体，而关系型数据库只能使用硬盘；</span><br><span class="line">3、高扩展性；</span><br><span class="line">4、成本低：nosql数据库部署简单，基本都是开源软件。</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">1、不提供sql支持，学习和使用成本较高；</span><br><span class="line">2、无事务处理；</span><br><span class="line">3、数据结构相对复杂，复杂查询方面稍欠。</span><br></pre></td></tr></table></figure><h2 id="2、Memcached"><a href="#2、Memcached" class="headerlink" title="2、Memcached"></a>2、Memcached</h2><h3 id="2-1-特点"><a href="#2-1-特点" class="headerlink" title="2.1 特点"></a>2.1 特点</h3><ol><li><code>分布式缓存</code><br>Memcached是一个分布式的缓存系统，可以将<code>数据存储</code>在多个服务器上，从而提供更高的<code>可用性</code>和<code>可扩展</code>性。</li><li><code>内存存储</code><br>Memcached将缓存数据存储在<code>内存</code>中，因此读取速度<code>非常快</code>，适用于需要快速访问的数据。由于数据存储在内存中，读取速度非常快，适用于缓存热点数据。但是服务器重启后，数据会丢失。</li><li>键值存储<br>Memcached采用键值对存储数据，通过键(key)快速定位和检索数据值(value)。</li><li>自动过期<br>缓存数据可以设置过期时间，过期后自动从缓存中移除，避免数据过时或脏数据的问题。</li><li><code>缓存逐出策略</code><br>当内存不足时，Memcached会根据一定的策略逐出部分数据，为新数据腾出空间。</li></ol><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405131914933.png" alt></p><h3 id="2-2-服务框架"><a href="#2-2-服务框架" class="headerlink" title="2.2 服务框架"></a>2.2 服务框架</h3><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405131914275.png" alt></p><p><strong>原理</strong></p><p>1、检查客户端的请求数据是否在memcached中，如有，直接把请求2数据返回，不再对数据库进行任何操作，路径操作为①②③⑦。<br>2、如果请求的数据不在memcached中，就去查数据库，把从数据库中获取的数据返回给客户端，同时把数据缓存一份到memcached中（memcached客户端不负责，需要程序明确实现），路径操作为①②④⑤⑦⑥。</p><p>3、保持缓存的<code>新鲜性</code>，每当数据发生变化的时候（比如，数据有被修改，或被删除的情况下），要同步更新的缓存信息，确保用户不会在缓存取到旧的数据。</p><h3 id="2-3-配置安装Memcached"><a href="#2-3-配置安装Memcached" class="headerlink" title="2.3 配置安装Memcached"></a>2.3 配置安装Memcached</h3><p>memcache能存放多少数据，取决于服务器本身的内存有多大。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">1.安装----准备一台服务器</span><br><span class="line">[root@memcached ~]# yum install memcached -y</span><br><span class="line">[root@memcached ~]# systemctl start memcached  #启动</span><br><span class="line">2.修改配置文件</span><br><span class="line">[root@memcached ~]# vim /etc/sysconfig/memcached</span><br><span class="line">PORT="11211"    ---监听的端口，默认11211可以修改</span><br><span class="line">USER="memcached"  -----用户</span><br><span class="line">MAXCONN="1024"   -----默认并发，可以修改</span><br><span class="line">CACHESIZE="64"    ------给的内存。默认是M</span><br><span class="line">OPTIONS=""       ----监听的网络地址</span><br><span class="line">然后把ip地址发给开发人员，开发的会使用api接口连接memcached.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 安装telent,Telnet是一种用于远程登录的协议。传输数据是明文的，存在安全性问题。</span></span><br><span class="line">[root@memcached ~]# yum install -y telnet</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 测试</span></span><br><span class="line">[root@memcached ~]# telnet 192.168.246.188 11211</span><br><span class="line">Trying 192.168.246.188...</span><br><span class="line">Connected to 192.168.246.188.</span><br><span class="line">Escape character is '^]'.</span><br><span class="line">set name 0 60 10    # key名   标记位(id号)   过期时间  大小</span><br><span class="line">helloworld        #  name的key值</span><br><span class="line">STORED         # 出现stoped表示已经存储成功。</span><br><span class="line">get name       #查询key值</span><br><span class="line">VALUE name 0 10</span><br><span class="line">helloword</span><br><span class="line">END</span><br><span class="line">quit   ---退出</span><br><span class="line">参数解释:</span><br><span class="line"><span class="meta">#</span><span class="bash"> name：key的名字 自己定义</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 0：key的id号，需要和其他的key不一样</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 60：缓存过期时间,单位为秒，0为永远</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 9：字符串最大长度</span></span><br><span class="line"></span><br><span class="line">不用它的原因：存储的数据类型单一，而且数据只能存储在内存中。无法实现数据的持久化，服务器重启，数据将消失。</span><br><span class="line">========================================================================</span><br><span class="line">扩展:安装php支持memcached的扩展模块: 安装php7.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 安装PHP依赖的epel源</span></span><br><span class="line">[root@memcached ~]# rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 安装PHP yum源</span></span><br><span class="line">[root@memcached ~]# rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 安装PHP</span></span><br><span class="line">[root@memcached ~]# yum install php70w.x86_64 php70w-cli.x86_64 php70w-common.x86_64 php70w-gd.x86_64 php70w-ldap.x86_64 php70w-mbstring.x86_64 php70w-mcrypt.x86_64 php70w-mysql.x86_64 php70w-pdo.x86_64 php70w-devel zlib-devel make gcc zlib-devel libmemcached-devel git php70w-fpm -y</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 下载PHP Memcache 扩展包</span></span><br><span class="line">[root@memcached ~]# yum install libmemcached php70w-pecl-memcached -y</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 安装nginx</span></span><br><span class="line">[root@memcached ~]# yum -y install nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 配置默认界面</span></span><br><span class="line">[root@memcached ~]# vim /etc/nginx/conf.d/default.conf </span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        root           /usr/share/nginx/html;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 编辑php页面</span></span><br><span class="line">[root@memcached ~]# cd /usr/share/nginx/html/index.php</span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 启动服务</span></span><br><span class="line">[root@memcached ~]# systemctl enable --now nginx php-fpm</span><br></pre></td></tr></table></figure><blockquote><p>游览器访问：<a href="http://192.168.174.38/index.php" target="_blank" rel="noopener">http://192.168.174.38/index.php</a></p></blockquote><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408131446837.png" alt="image-20240813144523867"></p><h2 id="3、Redis服务"><a href="#3、Redis服务" class="headerlink" title="3、Redis服务"></a>3、Redis服务</h2><h3 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h3><p><strong>redis是一个开源的、使用C语言编写的、支持网络交互的、可基于内存也可持久化的Key-Value数据库</strong>，它支持多种数据结构，如<code>字符串</code>（strings）、<code>散列</code>（hashes）、列表</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/4c8ac61a7ac746b693b4237ed8b9b7f5.png" alt="img"></p><p><strong>redis的官网：</strong><a href="http://www.redis.io" target="_blank" rel="noopener">www.redis.io</a></p><h4 id="3-1-1-redis的特点"><a href="#3-1-1-redis的特点" class="headerlink" title="3.1.1 redis的特点:"></a>3.1.1 redis的特点:</h4><ul><li><strong>高性能</strong>：由于数据存储在内存中，Redis能够实现<code>微秒级</code>的读写速度。</li><li><strong>持久化</strong>：虽然数据主要<code>存储</code>在<code>内存</code>中，但Redis提供了数据<code>持久化</code>的功能，可以将内存中的数据定期保存到<code>磁盘</code>中，以防止<code>数据丢失</code>。</li><li><strong>支持丰富数据类型</strong>：除了基本的键值对存储，Redis还支持列表、集合、有序集合等多种数据结构，这使得它能够适应更多样的应用场景。</li><li><strong>原子性操作</strong>：Redis的所有操作都是<code>原子性</code>的，这意味着每一个操作都将完整地执行，不会被其他客户端的命令所干扰，确保了数据的一致性和完整性。</li></ul><h4 id="3-1-2-Redis和memcached区别（面试题）"><a href="#3-1-2-Redis和memcached区别（面试题）" class="headerlink" title="3.1.2 Redis和memcached区别（面试题）"></a>3.1.2 Redis和memcached区别（面试题）</h4><ul><li><strong>数据结构</strong>：Redis提供了更丰富的数据类型，包括<code>字符串</code>、<code>列表</code>、<code>集合</code>、<code>有序集合</code>和<code>散列</code>等，而Memcached主要支持简单的<code>键值对结构</code>。这使得Redis能够支持更复杂的数据操作，减少网络IO次数和数据体积。</li><li><strong>数据持久化</strong>：Memcached不支持数据<code>持久化</code>，服务器重启后数据会<code>丢失</code>，但这使得它在运行时拥有更高的性能。相比之下，Redis支持数据持久化到磁盘，提供了数据的恢复能力，但这也意味着它需要承担额外的<code>性能开销</code>。</li><li><strong>性能考虑</strong>：Memcached在存储大数据时性能更高，因为它的<code>内存管理</code>机制简单高效。而Redis虽然在处理大量数据时性能有所下降，但它提供了更多的<code>数据结构</code>和操作。</li><li><strong>应用场景</strong>：Memcached通常用于<code>缓存系统</code>中，以减轻数据库的读负载，适合<code>多读少写</code>的场景。而Redis不仅适用于缓存，还适用于对<code>读写效率</code>要求高、数据处理复杂和对<code>安全</code>性要求较高的系统。</li></ul><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/2350b528a088429d972d2fdcfe6e18d3.jpeg" alt="img"></p><h2 id="4、安装Redis"><a href="#4、安装Redis" class="headerlink" title="4、安装Redis"></a>4、安装Redis</h2><h3 id="4-1-安装单机版redis"><a href="#4-1-安装单机版redis" class="headerlink" title="4.1  安装单机版redis"></a>4.1  安装单机版redis</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 下载redis安装包</span></span><br><span class="line">[root@redis-master ~]# wget https://download.redis.io/releases/redis-6.2.7.tar.gz   </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 解压安装包到指定目录</span></span><br><span class="line">[root@redis-master ~]# tar xzf redis-6.2.7.tar.gz -C /usr/local/ &amp;&amp; cd /usr/local   </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 创建软链接</span></span><br><span class="line">[root@localhost local]# ln -s redis-6.2.7 redis</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 切换redis家目录</span></span><br><span class="line">[root@localhost local]# cd redis/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 安装编译环境</span></span><br><span class="line">[root@redis-master redis]# yum install -y gcc make</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 编译</span></span><br><span class="line">[root@redis-master redis]# make</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 备份文件</span></span><br><span class="line">[root@redis-master redis]# cp redis.conf redis.conf.bak</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 修改配置文件</span></span><br><span class="line">[root@redis-master redis]# vim redis.conf</span><br><span class="line">bind 192.168.246.202     # 只监听内网IP</span><br><span class="line">daemonize yes            # 开启后台模式将no改为yes</span><br><span class="line">port 6379                # 端口号</span><br><span class="line">dir /data/redis/data     # 本地数据库存放持久化数据的目录该目录需要存在创建存放数据的目录</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 配置systemctl的redis启动脚本</span></span><br><span class="line">[root@redis-master redis]# cat &gt;&gt; /lib/systemd/system/redis.service &lt;&lt;-EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Redis</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/redis/src/redis-server /usr/local/redis/redis.conf  --daemonize no</span><br><span class="line">ExecStop=/usr/local/redis/src/redis-cli -h 127.0.0.1 -p 6379 shutdown</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">E</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 重新加载并且启动服务</span></span><br><span class="line">[root@redis-master system]# systemctl daemon-reload</span><br><span class="line">[root@redis-master system]# systemctl enable --now redis</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/youngfit/typora/raw/master/images/1564302473951.png#id=m3S85&originHeight=202&originWidth=1195&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 登陆redis</span></span><br><span class="line">[root@redis-master system]# cd /usr/local/redis/src/</span><br><span class="line">[root@redis-master src]# ./redis-cli -h 192.168.246.202 -p 6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 测试redis是否可以用</span></span><br><span class="line">192.168.246.202:6379&gt; ping    </span><br><span class="line">PONG</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 设置key--name，并设置值</span></span><br><span class="line">192.168.246.202:6379&gt; set name xiaoming    </span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 获取到key</span></span><br><span class="line">192.168.246.202:6379&gt; get name    </span><br><span class="line">"xiaoming"</span><br><span class="line"></span><br><span class="line">========================================================================</span><br><span class="line"></span><br><span class="line">192.168.246.202:6379&gt; set key value [EX seconds] [PX milliseconds] [NX|XX]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数解释：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> EX seconds ： 将键的过期时间设置为 seconds 秒。默认为秒；</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> PX milliseconds ： 将键的过期时间设置为 milliseconds 毫秒。默认为毫秒；</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NX ： 只在键不存在时， 才对键进行设置操作。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> XX ： 只在键已经存在时， 才对键进行设置操作。会覆盖原有的values值</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 使用 EX 选项：</span></span><br><span class="line">[root@localhost src]# ./redis-cli -h 192.168.62.231 -p 6379</span><br><span class="line">192.168.62.231:6379&gt; set name1 xiaohong EX 10</span><br><span class="line">OK</span><br><span class="line">192.168.62.231:6379&gt; get name1</span><br><span class="line">"xiaohong"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 等待10s，再次查看</span></span><br><span class="line">192.168.62.231:6379&gt; get name1</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 使用 PX 选项：</span></span><br><span class="line">192.168.62.231:6379&gt; set name2 xiaohong PX 3233</span><br><span class="line">OK</span><br><span class="line">192.168.62.231:6379&gt; get name2</span><br><span class="line">"xiaohong"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 等待3s，再次查看</span></span><br><span class="line">192.168.62.231:6379&gt; get name2</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt;  NX 选项：</span></span><br><span class="line">192.168.62.231:6379&gt; set class 2204 NX</span><br><span class="line">OK # 键不存在，设置成功</span><br><span class="line">192.168.62.231:6379&gt; get class</span><br><span class="line">"2204"</span><br><span class="line">192.168.62.231:6379&gt; set class 2205 NX</span><br><span class="line">(nil)  # 键已经存在，设置失败</span><br><span class="line">192.168.62.231:6379&gt; get class</span><br><span class="line">"2204"  # 维持原值不变</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; XX 选项：</span></span><br><span class="line">192.168.62.231:6379&gt; set home taikang XX</span><br><span class="line">(nil)  # 因为键不存在，设置失败</span><br><span class="line">192.168.62.231:6379&gt; set home taikang</span><br><span class="line">OK # 先给键设置一个值</span><br><span class="line">192.168.62.231:6379&gt; set home zhengzhou XX</span><br><span class="line">OK # 设置新值成功</span><br><span class="line">192.168.62.231:6379&gt; get home</span><br><span class="line">"zhengzhou"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 删除key</span></span><br><span class="line">192.168.62.231:6379&gt; del class</span><br><span class="line">(integer) 1</span><br><span class="line">192.168.62.231:6379&gt; get class</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 切换数据库</span></span><br><span class="line">127.0.0.1:6379[1]&gt; SELECT 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看当前库所有的数据</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br></pre></td></tr></table></figure><h3 id="4-2-redis的相关工具"><a href="#4-2-redis的相关工具" class="headerlink" title="4.2  redis的相关工具"></a><strong>4.2  redis的相关工具</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli           # redis的客户端</span><br><span class="line">./redis-server        # redis的服务端</span><br><span class="line">./redis-check-aof     # 用于修复出问题的AOF文件</span><br><span class="line">./redis-sentinel      # 用于集群管理</span><br></pre></td></tr></table></figure><h2 id="5、Redis设置密码的两种方式"><a href="#5、Redis设置密码的两种方式" class="headerlink" title="5、Redis设置密码的两种方式"></a>5、Redis设置密码的两种方式</h2><p>Redis修改密码的方式主要有两种：使用<code>redis-cli</code>命令行工具和通过配置文件。</p><h3 id="5-1-命令行临时修改密码"><a href="#5-1-命令行临时修改密码" class="headerlink" title="5.1 命令行临时修改密码"></a><strong>5.1 命令行临时修改密码</strong></h3><ol><li><strong>登录Redis</strong>：首先，你需要使用当前没有密码的Redis客户端登录到Redis服务器。</li><li><strong>设置新密码</strong>：使用<code>CONFIG SET</code>命令来设置新的密码。例如，要设置密码为<code>qfyyds</code>，你可以执行：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG SET requirepass <span class="string">"qfyyds"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 密码使用方式</span></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 方式一：</span></span><br><span class="line">192.168.174.48:6379&gt; AUTH qfyyds</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 方式二：</span></span><br><span class="line">[root@localhost ~]<span class="comment"># redis-cli  -h 192.168.174.48  -p 6379 -a qfyyds</span></span><br></pre></td></tr></table></figure><blockquote><p> 注意：这种方式设置的密码只会<code>临时生效</code>，重启Redis服务后密码会失效。</p></blockquote><h3 id="5-2-配置文件永久修改密码"><a href="#5-2-配置文件永久修改密码" class="headerlink" title="5.2 配置文件永久修改密码"></a><strong>5.2 配置文件永久修改密码</strong></h3><ol><li><strong>找到Redis配置文件</strong>：通常，Redis的配置文件名为<code>redis.conf</code>，它位于Redis安装目录或数据目录中。</li><li><strong>编辑配置文件</strong>：编辑<code>redis.conf</code>。</li><li><strong>设置密码</strong>：在配置文件中找到<code># requirepass foobared</code>这一行（没有<code>#</code>注释符号），将<code>foobared</code>替换为你想要设置的新密码。例如，设置为<code>afyyds</code>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis]<span class="comment"># vim redis.conf</span></span><br><span class="line">···</span><br><span class="line">requirepass qfyyds</span><br><span class="line">···</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 重启服务</span></span><br><span class="line">[root@localhost redis]<span class="comment"># systemctl restart redis</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 查看服务状态</span></span><br><span class="line">[root@localhost redis]<span class="comment"># systemctl status redis</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 测试</span></span><br><span class="line">[root@localhost src]<span class="comment"># ./redis-cli </span></span><br><span class="line">127.0.0.1:6379&gt; get name </span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; auth qfyyds</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name </span><br><span class="line"><span class="string">"zhangsan"</span></span><br></pre></td></tr></table></figure><p><strong>保存并重启Redis</strong>：保存配置文件并重启Redis服务，新的密码设置就会生效。</p><blockquote><p>注意事项：在修改密码后，确保所有客户端都已更新为使用新密码进行<code>连接</code>，否则可能会出现认证失败的问题。</p></blockquote><hr><h3 id="5-3-Redis配置文件详解"><a href="#5-3-Redis配置文件详解" class="headerlink" title="5.3 Redis配置文件详解"></a>5.3 Redis配置文件详解</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis]<span class="comment"># egrep -v "^#|^$" redis.conf</span></span><br><span class="line"><span class="comment"># 设置Redis服务器监听所有IP地址，即允许任何客户端连接。</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line"><span class="comment"># 关闭保护模式，允许非本机客户端连接。</span></span><br><span class="line">protected-mode no</span><br><span class="line"><span class="comment"># 设置Redis服务器监听的端口号为6379。</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="comment"># 设置TCP连接队列的大小为511，即允许最多有511个连接等待被处理。</span></span><br><span class="line">tcp-backlog 511</span><br><span class="line"><span class="comment"># 设置超时时间</span></span><br><span class="line">timeout 0</span><br><span class="line"><span class="comment"># 设置TCP心跳间隔为300秒。</span></span><br><span class="line">tcp-keepalive 300</span><br><span class="line"><span class="comment"># 以守护进程方式运行Redis服务器。</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="comment"># 指定Redis服务器的进程ID文件路径。</span></span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"><span class="comment"># 设置日志级别为notice，只记录警告和错误信息。</span></span><br><span class="line">loglevel notice</span><br><span class="line"><span class="comment"># 指定日志文件的路径。</span></span><br><span class="line">logfile <span class="string">"/var/log/redis.log"</span></span><br><span class="line"><span class="comment"># 设置Redis支持的数据库数量为16个。</span></span><br><span class="line">databases 16</span><br><span class="line"><span class="comment"># 在后台保存出错时停止写入操作。</span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"><span class="comment"># rdbcompression yes：启用RDB文件压缩。</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"><span class="comment"># 在RDB文件中包含CRC64校验和</span></span><br><span class="line">rdbchecksum yes</span><br><span class="line"><span class="comment"># 指定RDB文件的名称。</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"><span class="comment"># 不删除同步生成的RDB文件。</span></span><br><span class="line">rdb-del-sync-files no</span><br><span class="line"><span class="comment"># 指定RDB文件和AOF文件的存储目录。</span></span><br><span class="line">dir /data/redis/data</span><br><span class="line"><span class="comment"># 设置副本节点为只读模式。</span></span><br><span class="line">replica-read-only yes</span><br><span class="line"><span class="comment"># 设置密码为"qfyyds"，用于验证客户端连接。</span></span><br><span class="line">requirepass qfyyds</span><br><span class="line"><span class="comment"># 禁用AOF持久化。</span></span><br><span class="line">appendonly no</span><br><span class="line"><span class="comment"># 指定AOF文件的名称。</span></span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line"><span class="comment"># 每秒执行一次fsync操作，将缓冲区的数据写入磁盘。</span></span><br><span class="line">appendfsync everysec</span><br></pre></td></tr></table></figure><h2 id="6、数据持久化"><a href="#6、数据持久化" class="headerlink" title="6、数据持久化"></a>6、数据持久化</h2><p>Redis是一个内存数据库，一旦断电或服务器进程退出，内存数据库中的数据将<code>全部丢失</code>，所以需要redis持久化；Redis持久化就是把<code>数据保存在磁盘上</code>，利用<code>永久性存储介质</code>将数据保存，在特定的时间将保存的数据进行恢复的工作机制。</p><h3 id="6-1-redis持久化-–-两种方式"><a href="#6-1-redis持久化-–-两种方式" class="headerlink" title="6.1 redis持久化 – 两种方式"></a><strong>6.1 redis持久化 – 两种方式</strong></h3><h4 id="6-1-1-RDB"><a href="#6-1-1-RDB" class="headerlink" title="6.1.1  RDB"></a>6.1.1  RDB</h4><p>​    在指定的时间间隔内将内存中的数据集写入磁盘，也就是<code>快照</code>(Snapshot),数据恢复是将快照文件直接读到<code>内存中</code>redis会单独创建(<code>fork</code>)一个<code>子进程</code>来进行<code>持久化</code>，会先将数据写入一个到一个<code>临时文件</code>(dump.rdb)中,待持久化过程结束后，再用本次的临时文件替换上次持久化后的文件。</p><p><code>fork函数</code>的作用是复制一个与当前进程一样的进程，新进程的所有数据数值都和原进程一致，但是一个全新的进程，并作为<code>原进程的子进程</code>。</p><p>redis服务器在处理<code>bgsave</code>采用<code>子线程</code>进行IO写入，而主进程仍然可以接收其他请求，但创建子进程是同步阻塞的，此时不接受其他请求。</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/2231965-20221006153432205-771654931.png" alt="img"></p><blockquote><p><code>save</code>: 该命令会阻塞当前redis服务器，执行save命令期间，redis不能处理其他命令，直到RDB过程结束为止(会造成长时间阻塞，不建议使用)</p><p> <code>bgsave</code>:该命令执行后，redis会在后台异步进行快照操作，快照同时还可以响应客户端的请求，阻塞只发生在fork阶段，基本上redis内部的所有RDB操作都是采用bgsave命令。</p></blockquote><h5 id="1-RDB持久化配置"><a href="#1-RDB持久化配置" class="headerlink" title="1.  RDB持久化配置"></a>1.  RDB持久化配置</h5><p>​    RDB持久化默认开启，但是需要配置触发规则。如下列代码所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-master redis]<span class="comment"># vim /usr/local/redis/redis.conf</span></span><br><span class="line">···</span><br><span class="line"><span class="comment"># dbfilename：持久化数据存储在本地的文件</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment">#dir：持久化数据存储在本地的路径,可自定义</span></span><br><span class="line">dir /data/redis/data</span><br><span class="line"></span><br><span class="line"><span class="comment">##snapshot触发的时机，save &lt;seconds&gt; &lt;changes&gt; </span></span><br><span class="line"><span class="comment">##对于此值的设置，需要谨慎，评估系统的变更操作密集程度  </span></span><br><span class="line"><span class="comment">##可以通过save “”来关闭snapshot功能  </span></span><br><span class="line"><span class="comment"># 900秒内如果至少有一个key进行了修改则进行持久化操作</span></span><br><span class="line">save 900 1</span><br><span class="line"><span class="comment"># 300秒内如果至少有10个key进行了修改则进行持久化操作</span></span><br><span class="line">save 300 10</span><br><span class="line"><span class="comment"># 60秒内，如果至少有10000个key进行了修改则进行持久化操作</span></span><br><span class="line">save 60 10000 </span><br><span class="line"></span><br><span class="line"><span class="comment">##yes代表当使用bgsave命令持久化出错时候停止写RDB快照文件,no表明忽略错误继续写文件，“错误”可能因为磁盘已满/磁盘故障/OS级别异常等</span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"><span class="comment">##是否启用rdb文件压缩，默认为“yes”，压缩往往意味着“额外的cpu消耗”，同时也意味着较短的网络传输时间  </span></span><br><span class="line">rdbcompression yes</span><br></pre></td></tr></table></figure><h5 id="2-RDB持久化数据恢复"><a href="#2-RDB持久化数据恢复" class="headerlink" title="2. RDB持久化数据恢复"></a>2. RDB持久化数据恢复</h5><p>​    将备份文件(dump.rdb)移动到redis路径下(可以配置文件的存放路径)启动服务即可，redis启动会将文件数据加载到内存，在此期间redis会处于阻塞状态，直到全部数据存入内存。</p><h5 id="3-RDB持久化的优缺点"><a href="#3-RDB持久化的优缺点" class="headerlink" title="3. RDB持久化的优缺点"></a>3. RDB持久化的优缺点</h5><ul><li><p>优点：</p><ul><li><p>数据恢复快；</p></li><li><p>体积小；</p></li><li><p>数据备份使用子进程，对redis服务性能影响小。</p></li></ul></li><li><p>缺点：</p><ul><li>在一定时间间隔进行备份，当redis意外宕机，将会丢失最后一次修改的数据，无法做到秒级持久化；</li><li>fork进程时，会占用一定的内存空间；</li><li>RDB文件是二进制的没有可读性。</li></ul></li></ul><h4 id="6-1-2-AOF"><a href="#6-1-2-AOF" class="headerlink" title="6.1.2 AOF"></a>6.1.2 AOF</h4><p>​    将客户端的每一个<strong>写操作命令</strong>以日志的形式记录下来，追加到<code>appendonly.aof</code>的文件末尾，在redis服务器重启时，会加载aof文件中的所有命令，来达到数据恢复的目的。</p><p>当有写命令请求时，会追加到AOF缓冲区内，AOF缓冲区根据AOF持久化策略[<code>always</code>,<code>everysec</code>,<code>no</code>]将操作同步到磁盘的AOF文件中，当AOF文件大小超过重写策略或手动重写时，会对AOF文件进行重写来压缩AOF文件容量，redis服务重启时，会重新加载AOF文件中的写操作来进行数据恢复。</p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/2231965-20221006153451739-1327556975.png" alt="img"><h5 id="1-AOF持久化策略"><a href="#1-AOF持久化策略" class="headerlink" title="1. AOF持久化策略"></a>1. AOF持久化策略</h5><ul><li><code>always</code>: 把每个写命令立即同步到AOF文件，很慢但安全；</li><li><code>everysec</code>: 每秒同步一次，默认配置；</li><li><code>no</code>: redis不执行写入磁盘。</li></ul><h5 id="2-AOF的触发方式"><a href="#2-AOF的触发方式" class="headerlink" title="2. AOF的触发方式"></a>2. AOF的触发方式</h5><ol><li>手动触发<code>bgrewriteaof</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; BGREWRITEAOF</span><br><span class="line">Background append only file rewriting started</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost data]<span class="comment"># stat appendonly.aof </span></span><br><span class="line">  文件：<span class="string">"appendonly.aof"</span></span><br><span class="line">  大小：112       块：8          IO 块：4096   普通文件</span><br><span class="line">设备：fd00h/64768dInode：17874728    硬链接：1</span><br><span class="line">权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)</span><br><span class="line">最近访问：2024-05-14 22:03:51.707774066 +0800</span><br><span class="line">最近更改：2024-05-14 22:03:51.707774066 +0800</span><br><span class="line">最近改动：2024-05-14 22:03:51.818774763 +0800</span><br></pre></td></tr></table></figure><p><strong>默认情况，redis是没有开启AOF(默认使用RDB持久化)，需要通过配置文件开启。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 是否开启 Redis AOF持久化，默认为no</span></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; AOF持久化文件名</span></span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; AOF持久化策略，默认为eveysec，每秒同步一次</span></span><br><span class="line"><span class="comment"># appendfsync always</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment"># appendfsync no</span></span><br></pre></td></tr></table></figure><ul><li><strong>Always</strong>：每次执行<code>写入操作</code>后，都会立即调用fsync将数据<code>同步到磁盘</code>。这确保了极高的数据<code>持久性</code>，因为即使在系统崩溃的情况下，也最多只会丢失一次写入操作的数据。然而，这种模式会对性能产生较大影响，因为在每次写入后都进行fsync会导致较高的I/O开销。</li><li><strong>Everysec</strong>：这是默认设置，<code>每秒</code>执行一次fsync。它在性能和持久性之间取得了平衡，既保证了较好的数据安全性，又避免了频繁的I/O操作对性能的影响。</li><li><strong>No</strong>：不做持久化</li></ul><h5 id="3-AOF的重写机制"><a href="#3-AOF的重写机制" class="headerlink" title="3. AOF的重写机制"></a>3. AOF的重写机制</h5><p>​    AOF持久化，会把每次写命令都<code>追加</code>到<code>appendonly.aof</code>文件中，当文件过大，redis的数据恢复时间就会变长，因此加入重写策略对aof文件进行重写，生成一个恢复当前数据的最少命令集。<code>通过压缩AOF文件里面的相同指令保留最新的一个数据操作指令，即将存储了某个key的多次变更记录。只是存储最新的变更记录即可，丢弃历史变更记录 。</code></p><p>​        <img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/2231965-20221006153525610-1156564768.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Redis 重写机制配置</span></span><br><span class="line">[root@localhost redis]<span class="comment">#  vim redis.conf</span></span><br><span class="line">···</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line">···</span><br></pre></td></tr></table></figure><blockquote><ol><li><strong>auto-aof-rewrite-percentage</strong>：当前 AOF 文件大小超过上次重写后 AOF 文件大小的百分比时，触发 AOF 重写机制<strong>，默认值为 100 。</strong></li><li><strong>auto-aof-rewrite-min-size</strong>：表示当当前 AOF 文件大小超过指定值时，才可能触发 AOF 重写机制，<strong>默认值为 64 MB 。</strong></li></ol><ul><li>系统自动触发 AOF 重写机制还需要满足以下条件 ：<ul><li><code>当前没有正在执行 BGSAVE 或 BGREWRITEAOF 的子进程</code></li><li><code>当前没有正在执行 SAVE 的主进程</code></li><li><code>当前没有正在进行集群切换或故障转移</code></li></ul></li></ul></blockquote><h6 id="3-1-Redis-AOF-重写机制原理"><a href="#3-1-Redis-AOF-重写机制原理" class="headerlink" title="3.1 Redis AOF 重写机制原理"></a>3.1 Redis AOF 重写机制原理</h6><p>Redis AOF（Append Only File）重写流程是一个<code>用于优化</code>和<code>压缩AOF文件</code>的过程，以减少存储空间和提高写入效率。以下是AOF重写的流程：</p><ol><li><p>触发条件：当满足一定条件时，Redis会自动触发AOF重写。常见的触发条件包括<code>文件大小超过阈值</code>、系统负载较低等。</p></li><li><p>创建子进程：<code>Redis启动一个子进程进行AOF重写操作。这个子进程与主进程并行运行，不会阻塞主进程的处理</code>。</p></li><li><p>遍历数据库：<code>子进程开始遍历Redis数据库中的所有键值对</code>。这个过程中，子进程会记录下每个键值对的操作命令，但不会执行这些命令。</p></li><li><p>生成重写缓冲区：在遍历数据库的过程中，<code>子进程会将记录的操作命令写入一个临时文件，即重写缓冲区。这个临时文件最终会成为新的AOF文件。</code></p></li><li><p>同步命令到主进程：<code>在重写过程中，子进程会将部分命令同步回主进程，以确保主进程和子进程的数据一致性。</code>这是通过Redis的内部机制实现的，确保在重写过程中主进程的数据不会被破坏。</p></li><li><p>重写AOF文件：当子进程遍历完整个数据库并生成重写缓冲区后，它会根据一定的规则对缓冲区中的命令进行优化和压缩，生成新的AOF文件。这个<code>新文件会替换原有的AOF文件，具有更小的体积和更高的写入效率</code>。</p></li><li><p>更新配置：<code>一旦新的AOF文件生成并替换原有的文件，Redis会更新其配置信息，将新的AOF文件名写入配置文件中。</code>这样，在下次启动时，Redis就会使用新的AOF文件作为持久化存储。</p></li><li><p><strong>AOF重写机制带来优点</strong></p></li></ol><p>通过AOF重写流程，Redis可以有效地优化和压缩AOF文件，减少存储空间的使用，并提高写入效率。同时，由于重写过程是在子进程中进行的，不会阻塞主进程的处理，因此对Redis的性能影响较小。</p><p><strong>白话文解释：</strong></p><ul><li>旧AOF文件过大触发重写机制</li><li>创建子进程构建一个新的aof文件</li><li>子进程读取当前redis里面的数据，写入到新的aof文件里面</li><li>读取redis数据期间，主进程如果有其他新的操作指令则写入重写缓存中</li><li>重写完成以后，将重写缓存追加到新的aof文件中</li><li>用新的aof文件覆盖现有的aof文件 </li></ul><h5 id="4-AOF的优点和缺点"><a href="#4-AOF的优点和缺点" class="headerlink" title="4. AOF的优点和缺点"></a>4. AOF的优点和缺点</h5><p>​    优点：</p><ul><li><p>数据安全性高，不易丢数据；</p></li><li><p>AOF文件有序保存了所有写操作，可读性强。</p><p>缺点：</p></li><li><p>AOF方式生成文件体积大；</p></li><li><p>数据恢复速度比RDB慢。</p></li></ul><p>持久化配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3、AOF默认关闭--开启</span><br><span class="line">[root@redis-master src]# cd ..</span><br><span class="line">[root@redis-master redis]# vim redis.conf</span><br><span class="line">修改如下:</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/youngfit/typora/raw/master/images/1564304309935.png#id=WCMEC&originHeight=149&originWidth=362&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、此选项为aof功能的开关，默认为“no”，可以通过“yes”来开启aof功能,只有在“yes”下，aof重写/文件同步等特性才会生效</span><br><span class="line">====================================</span><br><span class="line">2、指定aof文件名称</span><br><span class="line">appendfilename appendonly.aof  </span><br><span class="line">====================================</span><br><span class="line">3、指定aof操作中文件同步策略，有三个合法值：always everysec no,默认为everysec</span><br><span class="line">appendfsync everysec</span><br><span class="line">always     #每次有数据修改发生时都会写入AOF文件</span><br><span class="line">everysec   #每秒钟同步一次，该策略为AOF的缺省策略/默认策略</span><br><span class="line">no         #从不同步。高效但是数据不会被持久化</span><br></pre></td></tr></table></figure><p><strong>开启持久化功能后，重启redis后，数据会自动通过持久化文件恢复。<code>RDB是默认持久化方式，但 Redis 允许 RDB 与 AOF 两种持久化技术同时开启。不过如果同时存在两种持久化方式，会默认采取AOF的方式，AOF持久化方式的优先级更高。</code></strong></p><p><strong>拓展RDB快照备份恢复：</strong></p><p>redis数据库备份与恢复（dump.rdb快照方式），两台机器</p><p><strong>备份Redis实例配置</strong></p><ol><li><strong>备份redis实例操作</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 备份机器的redis.conf配置文件内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim  /usr/local/redis/redis.conf </span></span><br><span class="line">···</span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir /data/redis/data</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line">rdbcompression yes</span><br><span class="line">···</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># ./src/redis-cli </span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name zhangsan</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; BGSAVE </span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># ls /data/redis/data</span></span><br><span class="line">dump.rdb</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># scp /data/redis/data/dump.rdb 192.168.174.49:/data/redis/data/</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>恢复Redis实例配置</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 配置文件修改</span></span><br><span class="line">[root@redis-backup ~]<span class="comment"># vim /usr/local/redis/redis.conf </span></span><br><span class="line">···</span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir /data/redis/data/</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line">rdbcompression yes</span><br><span class="line">daemonize yes</span><br><span class="line">···</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;启动实例</span></span><br><span class="line">[root@redis-backup ~]<span class="comment"># cd /usr/local/redis/src/</span></span><br><span class="line">[root@redis-backup redis]<span class="comment"># ./src/redis-server redis.conf </span></span><br><span class="line">[root@redis-backup redis]<span class="comment"># ./src/redis-cli </span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"name"</span></span><br></pre></td></tr></table></figure><h2 id="7、Redis主从配置"><a href="#7、Redis主从配置" class="headerlink" title="7、Redis主从配置"></a>7、Redis主从配置</h2><h3 id="7-1-主从简介"><a href="#7-1-主从简介" class="headerlink" title="7.1 主从简介"></a>7.1 主从简介</h3><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240418113140326.png" alt="image-20240418113140326" style="zoom:50%;"><p>持久化技术只是解决了Redis服务故障之后，快速数据恢复的问题。宕机和数据恢复的过程中整个业务系统来说，还是有损失的，并没有根本上提升可用性问题，而且持久化技术对于Redis服务性能来说是有损的。我们需要的是保障<code>Redis的高可用</code>，减少甚至避免Redis服务<code>发生宕机</code>的可能。</p><p>目前实现Redis高可用的模式主要有三种： <code>主从模式</code>、<code>哨兵模式</code>、<code>集群模式</code>。我们先来聊一下主从模式。<br>Redis 提供的主从模式，是通过复制的方式，将主服务器上的Redis的数据同步复制一份到从 Redis 服务器，这种做法很常见，MySQL通过binlog进行的主从复制也是这么做的。<br>主节点的Redis我们称之为master，从节点的Redis我们称之为slave，<code>主从复制为单向复制，只能由主到从，不能由从到主。</code>可以有多个从节点，比如1主3从甚至n从，从节点的多少根据实际的业务需求来判断。</p><p>主从结构，一是为了纯粹的<code>冗余备份</code>，二是为了<code>提升读性能</code>，比如很消耗性能的操作就可以由从服务器来处理。<br>redis的主从同步是异步进行的，这意味着主从同步不会影响主逻辑，也不会降低redis的处理性能。<br><strong><code>主从架构中，可以考虑关闭主服务器的数据持久化功能，只让从服务器进行持久化，这样可以提高主服务器的处理性能。</code></strong></p><h3 id="7-2-主从复制的意义"><a href="#7-2-主从复制的意义" class="headerlink" title="7.2 主从复制的意义"></a>7.2 主从复制的意义</h3><ul><li><p><strong>故障隔离和恢复</strong></p><p>无论主节点或者从节点<code>宕机</code>，其他节点依然可以保证服务的正常运行，并可以手动或自动切换主从。</p><ul><li>如果Slave库故障，则读写操作全部走到Master库中</li><li>如果Master库故障，则将Slave转成Master库，仅丢失Master库来不及同步到Slave的小部分数据</li></ul></li><li><p><strong>读写隔离</strong>：Master 节点提供写服务，Slave 节点提供读服务，分摊流量压力，均衡流量的负载。</p></li><li><p><strong>提供高可用保障</strong>：主从模式是高可用的最基础版本，也是 <code>sentinel 哨兵模式</code>和<code>cluster 集群模式</code>实施的前置条件。</p></li></ul><h3 id="7-3-主从同步原理偏移"><a href="#7-3-主从同步原理偏移" class="headerlink" title="7.3 主从同步原理偏移"></a><strong>7.3 主从同步原理</strong>偏移</h3><ol><li>从服务器会向主服务器发出<code>SYNC指令</code>；</li><li>当主服务器接到此命令后，就会调用<code>BGSAVE</code>指令来<code>fork</code>一个子进程专门进行数据持久化工作，也就是将主服务器的数据写入<code>RDB文件</code>中。在数据持久化期间，主服务器将执行的写指令都缓存在内存中；</li><li>在BGSAVE指令执行完成后，主服务器会将持久化好的RDB文件发送给从服务器，</li><li>从服务器接到此文件后会将其存储到磁盘上，然后再将其读取到内存中。</li><li>这个动作完成后，主服务器会将这段时间缓存的写指令再以redis协议的格式发送给从服务器。</li></ol><p>另外，要说的一点是，即使有多个从服务器同时发来SYNC指令，主服务器也只会执行一次BGSAVE，然后把持久化好的RDB文件发给多个从服务器。</p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240418113526905.png" alt="image-20240418113526905" style="zoom: 200%;"><p>2.8版本之后，redis支持了效率更高的<code>增量同步策略</code>，这大大降低了连接断开的恢复成本。主服务器会在内存中维护一个缓冲区，缓冲区中存储着将要发给从服务器的内容。从服务器在与主服务器出现网络瞬断之后，从服务器会尝试再次与主服务器连接，一旦连接成功，主服务器就会向从服务器发送增量内容。增量同步功能，需要服务器端支持全新的PSYNC指令。这个指令，只有在redis-2.8之后才具有。<img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240418114706094.png" alt="image-20240418114706094" style="zoom:67%;"></p><p><code>扩展内容</code>：</p><p><strong>1. 首次配置完成主从库之后的全量复制</strong>：在从库第一次连接到主库时，将采用psync复制方式进行全量复制。 这意味着从库会从头开始复制主库中的全部数据。<br><strong>2. 主从正常运行期间，准实时同步</strong>：在正常运行状态下，从库通过读取主库的<code>缓冲区来</code>进行增量复制。 这个过程涉及复制主库上发生的新的数据变更。<br><strong>3. 从库第二次启动（异常或主从网络断开后恢复）</strong>： Append增量数据 + 准实时同步将通过读取主库的缓冲区进行部分复制。 这种方式能够快速同步中断期间发生的数据变更，而不会对主库造成重大影响。</p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/167509-20240327210817418-1726205885.png" alt="image" style="zoom: 50%;"><p><code>PSYNC</code> 命令是Redis中用于从节点与主节点之间数据同步的关键命令。它的工作原理包括以下几个步骤：</p><p><strong>1. 启动或重连判断：</strong><br>当从节点（Slave）启动或与主节点（Master）的连接断开后重连时，从节点需要确定是否曾经同步过。如果从节点没有保存任何主节点的运行ID（runid），它将视为第一次连接到主节点。</p><p><strong>2. 首次同步处理：</strong><br>如果是第一次同步的情况下，从节点会发送 <code>PSYNC -1</code> 命令给主节点，代表请求全量数据同步。 全量同步是指主节点将其所有数据完整地<code>Copy</code>一份给从节点。</p><p><strong>3. 主从重连后的处理：</strong><br>对于之前已经同步过的从节点，它会发送 <code>PSYNC runid offset</code> 命令，其中runid是主节点的唯一标识符，offset是从节点上次同步数据的偏移量。这样本质就是增量同步。</p><p><strong>4. 主节点响应：</strong><br>主节点接收到PSYNC命令后，会检查runid是否匹配，以及offset是否在复制积压缓冲区的范围内。如果匹配且offset有效，主节点将回复<code>CONTINUE</code>，并发送自从节点上次断开连接以来的所有写命令。</p><p><strong>5. 触发全量同步的条件：</strong><br>如果runid不匹配，或offset超出了积压缓冲区的范围，主节点将通知从节点执行全量同步，回复<code>FULLRESYNC runid offset</code>。</p><p><strong>6. 积压缓冲区的作用：</strong><br>主节点会在处理写命令的同时，将这些命令存入复制积压队列（缓冲池），同时记录队列中存放命令的全局offset。<br>这样做法是保证了效率。当从节点断线重连，且条件允许时（runid和offset都具备），它可以通过offset从积压队列中进行增量复制，而不是全量复制，这样复制的成本就低很多。</p><p><strong>7. 保障数据一致性：</strong><br>PSYNC机制允许从节点在网络不稳定或其他意外断开连接的情况下，能够以增量方式重新同步数据。这也是它的一大优势，那就是保持主从节点数据的一致性。</p><p><strong>8. 什么时候启动重连工作</strong><br>判断是否进行全量同步，需要考虑两个关键因素：首先，确认这是否是第一次进行数据同步；其次，检查缓存区是否已经达到或超过其容量上限。只有在是第一次同步，或者缓存区已溢出的情况下，才会执行全量同步。</p><h3 id="7-4-1主n从的同步说明"><a href="#7-4-1主n从的同步说明" class="headerlink" title="7.4 1主n从的同步说明"></a>7.4 1主n从的同步说明</h3><p>如果你有多个从库，则在每次连接的时候需要注意一些细节，如下:</p><ul><li><p>多个从库情况下，每个从库都会记录自己的 <code>slave_repl_offset</code>，各自复制的进度也不相同。</p></li><li><p>重连主库进行恢复时，从库会通过<code>psync</code>命令将 slave_repl_offset 告知主库，主库判断从库的状态，来决定进行增量复制，还是全量复制。</p></li><li><p>replication buffer(复制缓冲区) 和 repl_backlog 的说明</p><ul><li><code>replication buffer</code>： 与每个从节点（slave）相关联的缓冲区，存在于主节点（master）上。当主从连接稳定时，主节点会将其接收到的所有写命令放入这个缓冲区中，并异步地发送给从节点。这样，从节点就可以通过执行这些写命令来更新自己的数据集。可以通过<code>client-output-buffer-limit</code>配置来设定其大小限制，以防止因从节点处理速度慢而导致主节点内存溢出。</li></ul><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405102015164.webp" alt></p><ul><li><code>repl_backlog_buffer</code>：是为了解决从库断连后找不到主从差异数据而设立的环形缓冲区，从而避免全量同步带来的性能开销。在redis.conf配置文件中可以设置大小，如果从库断开时间过长，repl_backlog_buffer<code>环形缓冲区</code>会被主库的写命令覆盖，那么从库重连后只能全量同步，所以repl_backlog_size配置尽量大一点可以降低从库连接后全量同步的频率。</li></ul><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405102014054.webp" alt></p></li><li><p>主库和从库会各自记录自己的复制进度，所以，不同的从库在进行恢复时，需要将自己的复制进度（slave_repl_offset）发给主库，主库才可以按照偏移量取数据跟它同步。</p></li></ul><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/image-20240422111235791.png" alt="image-20240422111235791" style="zoom: 33%;"><h3 id="7-5-部署三台机器Redis—主从同步"><a href="#7-5-部署三台机器Redis—主从同步" class="headerlink" title="7.5 部署三台机器Redis—主从同步"></a>7.5 部署三台机器Redis—主从同步</h3><ol><li><strong>集群环境准备</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 三台服务器关闭防火墙</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">disable</span> --now firewalld &amp;&amp; setenforce 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 三台服务器添加本地解析</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt;&gt; /etc/hosts &lt;&lt;-EOF</span></span><br><span class="line">redis-master192.168.174.38</span><br><span class="line">redis-slave-1192.168.174.39</span><br><span class="line">redis-slave-2192.168.174.40</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ol start="2"><li><strong><code>redis-master</code>节点配置</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 修改配置文件</span></span><br><span class="line">[root@redis-master ~]# vim /usr/local/redis/redis.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置Redis监听的IP地址和端口号，默认监听所有IP地址和6379端口</span></span><br><span class="line">bind 0.0.0.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭保护模式，允许远程访问</span></span><br><span class="line">protected-mode no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定Redis监听的端口号</span></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加Redis的最大内存限制，以容纳更多数据</span></span><br><span class="line"><span class="meta">#</span><span class="bash">maxmemory 16GB   增加内存限制，根据您的服务器实际内存调整</span></span><br><span class="line">maxmemory 20480mb</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 启动主节点redis服务</span></span><br><span class="line">[root@redis-master ~]# cd /usr/local/redis/src</span><br><span class="line">[root@redis-master src]# ./redis-server ../redis.conf &amp;   会加载此文件中的配置信息</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 查看端口</span></span><br><span class="line">[root@redis-master src]# ss -tunlp | grep  6379</span><br><span class="line">tcp    LISTEN     0      128       *:6379                  *:*                   users:(("redis-server",pid=1360,fd=6))</span><br></pre></td></tr></table></figure><blockquote><p> 关闭protected-mode模式，此时外部网络可以直接访问</p><p>开启protected-mode保护模式，需配置bind ip或者设置访问密码</p></blockquote><ol start="3"><li><strong><code>redis-slave01</code>配置</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 修改配置文件</span></span><br><span class="line">[root@redis-slave01 ~]# vim /usr/local/redis/redis.conf</span><br><span class="line">...</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置Redis监听的IP地址和端口号，默认监听所有IP地址和6379端口</span></span><br><span class="line">bind 0.0.0.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加需要同步的主库信息</span></span><br><span class="line">replicaof 192.168.174.39 6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭保护模式，允许远程访问</span></span><br><span class="line">protected-mode no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义数据目录</span></span><br><span class="line">dir /data/redis</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 启动redis服务</span></span><br><span class="line">[root@redis-slave-1 ~]# cd /usr/local/redis/src/</span><br><span class="line">[root@redis-slave-1 src]# ./redis-server ../redis.conf &amp;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 查看端口</span></span><br><span class="line">[root@redis-slave01 src]# ss -tunlp | grep  6379</span><br><span class="line">tcp    LISTEN     0      128       *:6379                  *:*                   users:(("redis-server",pid=1360,fd=6))</span><br></pre></td></tr></table></figure><blockquote><p>可以通过 <code>replicaof（Redis 5.0 之前使用 slaveof）</code>命令形成主库和从库的关系。</p></blockquote><ol start="4"><li><strong><code>redis-slave02</code>配置</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 修改配置文件</span></span><br><span class="line">[root@redis-slave01 ~]# vim /usr/local/redis/redis.conf</span><br><span class="line">...</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置Redis监听的IP地址和端口号，默认监听所有IP地址和6379端口</span></span><br><span class="line">bind 0.0.0.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加需要同步的主库信息</span></span><br><span class="line">replicaof 192.168.174.48 6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭保护模式，允许远程访问</span></span><br><span class="line">protected-mode no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义数据目录</span></span><br><span class="line">dir /data/redis</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 启动redis服务</span></span><br><span class="line">[root@redis-slave-1 ~]# cd /usr/local/redis/src/</span><br><span class="line">[root@redis-slave-1 src]# ./redis-server ../redis.conf &amp;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 查看端口</span></span><br><span class="line">[root@redis-slave01 src]# ss -tunlp | grep  6379</span><br><span class="line">tcp    LISTEN     0      128       *:6379                  *:*                   users:(("redis-server",pid=1360,fd=6))</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>测试主从复制</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; redis-master执行</span></span><br><span class="line">[root@redis-master redis]# cd src/</span><br><span class="line">[root@redis-master src]# ./redis-cli </span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; set name jack</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"jack"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 分别在slave-1和slave-2上面执行</span></span><br><span class="line">[root@redis-slave01 redis]# cd src/</span><br><span class="line">[root@redis-slave01 src]# ./redis-cli </span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"jack"</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line">[root@redis-slave-2 src]# ./redis-cli </span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"jack"</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; redis-master查看复制状态</span></span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=192.168.246.203,port=6379,state=online,offset=490,lag=0</span><br><span class="line">slave1:ip=192.168.246.204,port=6379,state=online,offset=490,lag=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; redis-slave执行</span></span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:192.168.246.202</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br></pre></td></tr></table></figure><p><strong>注意：从服务器一般默认禁止写入操作：<code>slave-read-only yes</code></strong></p><p><code>redis-master</code>执行<code>info repliaction</code>参数解释</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408132333247.png" alt="image-20240813233259506"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示当前节点的角色是主节点</span></span><br><span class="line">role:master</span><br><span class="line"><span class="comment"># 表示当前主节点连接了两个从节点。</span></span><br><span class="line">connected_slaves:2</span><br><span class="line"><span class="comment"># 表示第一个从节点的IP地址为192.168.174.49，端口号为6379，状态为在线（online），复制偏移量为3276，与主节点的延迟为1。</span></span><br><span class="line">slave0:ip=192.168.174.49,port=6379,state=online,offset=3276,lag=1</span><br><span class="line"><span class="comment"># 表示第二个从节点的IP地址为192.168.174.50，端口号为6379，状态为在线（online），复制偏移量为3276，与主节点的延迟为1。</span></span><br><span class="line">slave1:ip=192.168.174.50,port=6379,state=online,offset=3276,lag=1</span><br><span class="line"><span class="comment"># 表示当前没有进行故障转移。</span></span><br><span class="line">master_failover_state:no-failover</span><br><span class="line"><span class="comment"># 表示主节点的复制ID。</span></span><br><span class="line">master_replid:169726e22cc9736afd05f50b7fef4d8b6e48b47a</span><br><span class="line"><span class="comment"># 表示主节点的第二个复制ID，这里为全零。</span></span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line"><span class="comment"># 表示主节点当前的复制偏移量。</span></span><br><span class="line">master_repl_offset:3276</span><br><span class="line"><span class="comment"># 表示第二个从节点的复制偏移量，这里为-1，表示没有设置。</span></span><br><span class="line">second_repl_offset:-1</span><br><span class="line"><span class="comment"># 表示复制积压缓冲区是否处于活动状态，1表示活动。</span></span><br><span class="line">repl_backlog_active:1</span><br><span class="line"><span class="comment"># 表示复制积压缓冲区的大小，单位为字节。</span></span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line"><span class="comment"># 表示复制积压缓冲区中第一个字节的偏移量。</span></span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line"><span class="comment"># 表示复制积压缓冲区的历史长度。</span></span><br><span class="line">repl_backlog_histlen:3276</span><br></pre></td></tr></table></figure><p><code>redis-slave</code>执行<code>info replication</code>参数解释</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408132336143.png" alt="image-20240813233652087"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> slave 节点执行 info replication 命令回显参数解释</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示当前节点的角色是从节点。</span></span><br><span class="line">role:slave</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示主节点的IP地址为192.168.174.48。</span></span><br><span class="line">master_host:192.168.174.48</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示主节点的端口号为6379。</span></span><br><span class="line">master_port:6379</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示与主节点的连接状态为正常（up）。</span></span><br><span class="line">master_link_status:up</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示距离上一次与主节点进行IO操作的时间过去了8秒。</span></span><br><span class="line">master_last_io_seconds_ago:8</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示当前没有正在进行的主从同步操作。</span></span><br><span class="line">master_sync_in_progress:0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示从节点读取复制数据时的偏移量。</span></span><br><span class="line">slave_read_repl_offset:3794</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示从节点当前的复制偏移量。</span></span><br><span class="line">slave_repl_offset:3794</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示从节点的优先级为100。</span></span><br><span class="line">slave_priority:100</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示从节点以只读模式运行。</span></span><br><span class="line">slave_read_only:1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示从节点已经向其他节点宣告自己是复制节点。</span></span><br><span class="line">replica_announced:1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示当前从节点没有连接其他从节点。</span></span><br><span class="line">connected_slaves:0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示当前没有进行故障转移。</span></span><br><span class="line">master_failover_state:no-failover</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示主节点的复制ID。</span></span><br><span class="line">master_replid:169726e22cc9736afd05f50b7fef4d8b6e48b47a</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示主节点的第二个复制ID，这里为全零。</span></span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示主节点当前的复制偏移量。</span></span><br><span class="line">master_repl_offset:3794</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示第二个从节点的复制偏移量，这里为-1，表示没有设置。</span></span><br><span class="line">second_repl_offset:-1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示复制积压缓冲区是否处于活动状态，1表示活动。</span></span><br><span class="line">repl_backlog_active:1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示复制积压缓冲区的大小，单位为字节。</span></span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示复制积压缓冲区中第一个字节的偏移量。</span></span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示复制积压缓冲区的历史长度。</span></span><br><span class="line">repl_backlog_histlen:3794</span><br></pre></td></tr></table></figure><h3 id="7-6-主从同步保证数据一致性"><a href="#7-6-主从同步保证数据一致性" class="headerlink" title="7.6 主从同步保证数据一致性"></a>7.6 主从同步保证数据一致性</h3><p>​    为了保证主服务器Redis的数据和从服务器Redis的数据的一致性，也为了分担访问压力，均衡负载，应用层面一般采取读写分离的模式。读操作：主、从库都可以执行，一般是在从库上读数据，对实时性和准确性有100%高真要求的部分业务，在谨慎评估之后也可以读主库，前提是不能给Master带来高压力和风险。写操作：只在主库上写数据，写完之后将写操作指令同步到从库。</p><h3 id="7-7-总结"><a href="#7-7-总结" class="headerlink" title="7.7 总结"></a>7.7 总结</h3><ul><li>主从复制的作用一个是为分担读写压力，均衡负载，另一个是为了保证部分实例宕机之后服务的持续可用性，所以Redis演变出主从架构和读写分离。</li><li>主从复制的步骤包括：建立连接的阶段、数据同步的阶段、基于长连接的命令传播阶段。</li><li>数据同步可以分为<code>全量复制</code>和<code>部分复制</code>，全量复制一般为第一次全量或者长时间主从连接断开。</li><li>主从模式是比较低级的可用性优化，要做到故障自动转移，异常预警，高保活，还需要更为复杂的哨兵或者集群模式，这个后面我们继续介绍。</li></ul><h2 id="8、Redis-sentinel—哨兵模式"><a href="#8、Redis-sentinel—哨兵模式" class="headerlink" title="8、Redis-sentinel—哨兵模式"></a><strong>8、Redis-sentinel—哨兵模式</strong></h2><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202405141432953.png" alt="img"></p><h3 id="8-1-哨兵简介-Redis-Sentinel"><a href="#8-1-哨兵简介-Redis-Sentinel" class="headerlink" title="8.1 哨兵简介:Redis Sentinel"></a>8.1 哨兵简介:Redis Sentinel</h3><p><strong>Sentinel(哨兵)进程</strong>是用于监控redis集群中Master主服务器工作的状态，在Master主服务器发生故障的时候，可以实现Master和Slave服务器的切换，保证系统的高可用。</p><p>哨兵(Sentinel) 是一个分布式系统，你可以在一个架构中运行<code>多个哨兵(sentinel) 进程</code>，这些进程使用<code>流言协议</code>来接收关于Master主服务器是否下线的信息，并使用<code>投票协议</code>来决定是否执行<code>自动故障迁移</code>,以及选择哪个Slave作为新的Master。</p><p>流言协议：</p><p>​    流言协议是一种<code>去中心化</code>的信息传播方式，其工作原理类似于人们在日常生活中传播流言：<strong>每个节点都将自己所知的信息告诉给它所连接的其他节点，这些节点再将信息传播给它们所连接的节点，以此类推，直到所有节点都获得了这条信息。</strong></p><h5 id="1、Redis哨兵集群的角色划分"><a href="#1、Redis哨兵集群的角色划分" class="headerlink" title="1、Redis哨兵集群的角色划分"></a>1、Redis哨兵集群的角色划分</h5><ul><li><strong>主节点（Master）：</strong> 处理客户端的读写请求。</li><li><strong>从节点（Slave）：</strong> 复制主节点的数据，用于提供读取服务和备份。</li><li><strong>哨兵节点（Sentinel）：</strong> 监控集群中各节点的健康状态，负责选举和故障转移。</li></ul><h5 id="2、作用"><a href="#2、作用" class="headerlink" title="2、作用"></a>2、作用</h5><ul><li><strong><code>监控(Monitoring): 哨兵(sentinel) 会不断地检查你的Master和Slave是否运作正常。</code></strong></li><li>提醒(Notification)：当被 监控的某个Redis节点出现问题时, 哨兵(sentinel) 可以通过 API 向管理员或者其他应用程序发送通知。</li><li>自动故障迁移(Automatic failover)：当一个Master不能正常工作时，哨兵(sentinel) 会开始一次自动故障迁移操作，它会将失效Master的其中一个Slave升级为新的Master, 并让失效Master的其他Slave改为复制新的Master；当客户端试图连接失效的Master时，集群也会向客户端返回新Master的地址，使得集群可以使用现在的Master替换失效Master。</li></ul><p><strong>哨兵之间如何通信</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408150827546.png" alt="image-20240815082655417"></p><p>哨兵实例之间可以相互发现，要归功于 Redis 提供的 <strong>pub/sub</strong> 机制，也就是发布 / 订阅机制。</p><p>哨兵只要和主库建立起了连接，就可以在主库上发布消息了，比如说发布它自己的连接信息（IP 和端口）。同时，它也可以从主库上订阅消息，获得其他哨兵发布的连接信息。当多个哨兵实例都在主库上做了发布和订阅操作后，它们之间就能知道彼此的 IP 地址和端口。</p><p>为了区分不同应用的消息，Redis 会以<strong>频道</strong>的形式，对这些消息进行分门别类的管理。<strong>所谓的频道，实际上就是消息的类别。</strong>当消息类别相同时，它们就属于同一个频道。反之，就属于不同的频道。<strong>只有订阅了同一个频道的应用，才能通过发布的消息进行信息交换</strong>。</p><p>在主从集群中，主库上有一个名为<strong><code>“sentinel:hello”</code></strong>的频道，不同哨兵就是通过它来相互发现，实现互相通信的。</p><p>在上图图中，哨兵 1 把自己的 IP（172.16.19.3）和端口（26579）发布到“<strong><code>sentinel:hello</code></strong>”频道上，哨兵 2 和 3 订阅了该频道。那么此时，哨兵 2 和 3 就可以从这个频道直接获取哨兵 1 的 IP 地址和端口号。</p><p>然后，哨兵 2、3 可以和哨兵 1 建立网络连接。通过这个方式，哨兵 2 和 3 也可以建立网络连接，这样一来，哨兵集群就形成了。它们相互间可以通过网络连接进行通信，比如说对主库有没有下线这件事儿进行判断和协商。</p><p><strong>哨兵如何知道从库的ip地址和端口呢？</strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408150832516.png" alt="image-20240815083231411"></p><p>由哨兵向主库发送 INFO 命令来完成的。就像上图所示，哨兵 2 给主库发送 INFO 命令，主库接受到这个命令后，就会把从库列表返回给哨兵。接着，哨兵就可以根据从库列表中的连接信息，和每个从库建立连接，并在这个连接上持续地对从库进行监控。哨兵 1 和 3 可以通过相同的方法和从库建立连接。</p><h5 id="3、工作模式"><a href="#3、工作模式" class="headerlink" title="3、工作模式"></a>3、工作模式</h5><ul><li>每个Sentinel（哨兵）进程以每秒钟一次的频率向整个集群中的Master主服务器，Slave从服务器以及其他Sentinel（哨兵）进程发送一个 PING 命令。并通过实例返回的结果来判断实例是否在线。</li><li>如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 <code>down-after-milliseconds</code> 选项所指定的值， 则这个实例会被 Sentinel（哨兵）进程标记为主观下线（SDOWN）。</li><li>如果一个Master主服务器被标记为<strong>主观下线</strong>（SDOWN），则正在监视这个Master主服务器的所有 Sentinel（哨兵）进程要以每秒一次的频率确认Master主服务器的确进入了<strong>主观下线状态</strong>。</li><li>当有足够数量的 Sentinel（哨兵）进程（<strong>大于等于配置文件指定的值</strong>）在指定的时间范围内确认Master主服务器进入了<strong>主观下线</strong>状态（SDOWN）， 则Master主服务器会被标记为<strong>客观下线</strong>（ODOWN）。</li><li>在一般情况下， 每个 Sentinel（哨兵）进程会以<strong>每 10 秒一次</strong>的频率向集群中的所有Master主服务器、Slave从服务器发送 INFO 命令。</li><li>当Master主服务器被 Sentinel（哨兵）进程标记为客观下线（ODOWN）时，Sentinel（哨兵）进程向下线的 <strong>Master主服务器的所有 Slave从服务器发送 INFO 命令的频率会从 10 秒一次改为每秒一次</strong>。</li><li>若没有足够数量的 Sentinel（哨兵）进程同意 Master主服务器下线， Master主服务器的客观下线操作就会被移除。若 Master主服务器重新向 Sentinel（哨兵）进程发送 PING 命令返回有效回复，Master主服务器的主观下线状态就会被移除。</li></ul><h5 id="4、主观下线和客观下线"><a href="#4、主观下线和客观下线" class="headerlink" title="4、主观下线和客观下线"></a>4、主观下线和客观下线</h5><p>主观下线：<code>Subjectively Down</code>，简称 <code>SDOWN</code>，指的是当前一个Sentinel 实例对某个redis服务器做出的下线判断。<br>客观下线：<code>Objectively Down</code>， 简称<code>ODOWN</code>，指的是多个 Sentinel 实例在对Master Server做出 SDOWN  判断，并且通过<code>SENTINEL is-master-down-by-addr</code> 命令互相交流之后，得出的Master  Server下线判断，然后开启failover/故障转移</p><h5 id="5、配置哨兵模式"><a href="#5、配置哨兵模式" class="headerlink" title="5、配置哨兵模式"></a>5、配置哨兵模式</h5><ul><li>每台机器上修改redis主配置文件<code>redis.conf</code>文件设置：<code>bind 0.0.0.0</code></li><li>每台机器上修改<code>sentinel.conf</code>配置文件：修改如下配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-master ~]#  cd /usr/local/redis/</span><br><span class="line"></span><br><span class="line">[root@redis-master redis]# vim sentinel.conf</span><br><span class="line">...</span><br><span class="line">sentinel monitor mymaster 192.168.174.48 6379 2 </span><br><span class="line">sentinel down-after-milliseconds mymaster 3000 </span><br><span class="line">sentinel failover-timeout mymaster 10000 </span><br><span class="line">protected-mode no </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每台机器启动哨兵服务：</span></span><br><span class="line">[root@redis-master redis]# ./src/redis-sentinel sentinel.conf </span><br><span class="line">注意:在生产环境下将哨兵模式启动放到后台执行:     ./src/redis-sentinel sentinel.conf &amp;</span><br></pre></td></tr></table></figure><blockquote><p>参数解释：</p><p><code>sentinel down-after-milliseconds mymaster 3000</code>：</p><p>​    当集群中有2个sentinel认为master死了时，才能真正认为该master已经不可用了。 (slave上面写的是master的ip，master写自己ip)</p><p><code>sentinel down-after-milliseconds mymaster 3000</code>： </p><p>​    表示如果名为 <code>mymaster</code> 的主节点在3秒（3000毫秒）内未对 Sentinel 的 PING 命令做出有效响应，那么 Sentinel 会开始考虑该主节点可能已经出现故障，并做好相应的故障转移准备。</p><p><code>sentinel failover-timeout mymaster 10000</code> ：</p><p>​    表示在进行名为 <code>mymaster</code> 的主节点的故障转移操作时，Sentinel 最多允许花费10秒（10000毫秒）的时间来完成整个操作。</p><p><code>protected-mode no</code>：</p><p>​    关闭加密保护模式</p></blockquote><p><img src="https://gitee.com/youngfit/typora/raw/master/images/1564310139143.png#id=T6LR2&originHeight=666&originWidth=1751&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><strong>将master的哨兵模式退出（Crtl+c），再将redis服务stop了，在两台slave上面查看其中一台是否切换为master:(没有优先级，为随机切换)</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">^C4854:signal-handler (1564349039) Received SIGINT scheduling shutdown...</span><br><span class="line">4854:X 29 Jul 05:23:59.592 # User requested shutdown...</span><br><span class="line">4854:X 29 Jul 05:23:59.592 # Sentinel is now ready to exit, bye bye...</span><br><span class="line">[root@redis-master redis]# systemctl stop redis.service</span><br><span class="line">或者用kill命令杀死</span><br></pre></td></tr></table></figure><p>在slave机器上面查看:</p><p><img src="https://gitee.com/youngfit/typora/raw/master/images/1564320905579.png#id=Cshe1&originHeight=594&originWidth=1882&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><p><img src="https://gitee.com/youngfit/typora/raw/master/images/1564320763210.png#id=UPfuL&originHeight=339&originWidth=1897&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=" alt></p><h5 id="6、Redis故障Master选举算法（了解）"><a href="#6、Redis故障Master选举算法（了解）" class="headerlink" title="6、Redis故障Master选举算法（了解）"></a>6、Redis故障Master选举算法（了解）</h5><ul><li><strong>优先级：</strong> 每个节点都有一个优先级，选择优先级最高的节点作为新的主节点。</li><li><strong>复制偏移量：</strong> 选择复制偏移量最大的从节点，确保数据同步性。</li><li><strong>运行ID：</strong> 选择运行ID最大的节点，确保节点唯一性。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisSentinelPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.exceptions.JedisException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisClusterElection</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String masterName = <span class="string">"mymaster"</span>;</span><br><span class="line">        Set&lt;String&gt; sentinels = Set.of(<span class="string">"sentinel1:26379"</span>, <span class="string">"sentinel2:26379"</span>, <span class="string">"sentinel3:26379"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> (JedisSentinelPool sentinelPool = <span class="keyword">new</span> JedisSentinelPool(masterName, sentinels)) &#123;</span><br><span class="line">            Jedis jedis = sentinelPool.getResource();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 获取当前主节点</span></span><br><span class="line">            String currentMaster = jedis.sentinelGetMasterAddrByName(masterName).getHost();</span><br><span class="line">            System.out.println(<span class="string">"Current Master: "</span> + currentMaster);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 模拟主节点故障</span></span><br><span class="line">            simulateMasterFailure(jedis, masterName);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 等待哨兵节点进行选举</span></span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 获取新的主节点</span></span><br><span class="line">            String newMaster = jedis.sentinelGetMasterAddrByName(masterName).getHost();</span><br><span class="line">            System.out.println(<span class="string">"New Master: "</span> + newMaster);</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (JedisException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">simulateMasterFailure</span><span class="params">(Jedis jedis, String masterName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟主节点故障，停止主节点</span></span><br><span class="line">        jedis.sentinelFailover(masterName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面试"><a href="#面试" class="headerlink" title="面试:"></a>面试:</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">redis有哪些优点</span><br><span class="line">(1) 速度快，因为数据存在内存中。</span><br><span class="line">(2) 支持丰富数据类型，支持string，list，set，hash等</span><br><span class="line">(3) 支持事务，操作都是原子性，就是对数据的更改要么全部执行，要么全部不执行</span><br><span class="line">(4) 丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除</span><br><span class="line"></span><br><span class="line">redis相比memcached有哪些优势</span><br><span class="line">(1) memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型</span><br><span class="line">(2) redis可以持久化其数据</span><br><span class="line"></span><br><span class="line">redis常见性能问题和解决方案</span><br><span class="line">(1) Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件</span><br><span class="line">(2) 如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次</span><br><span class="line">(3) 为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内</span><br><span class="line">(4) 尽量避免在压力很大的主库上增加从库</span><br><span class="line">(5) 主从复制不要用树状结构，用单向链表结构更为稳定，即：Master（写） &lt;- Slave1（读） &lt;- Slave2（读） &lt;- Slave3（读）...</span><br><span class="line">这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做Master，其他不变。</span><br><span class="line">redis集群的工作原理</span><br><span class="line">主多从+哨兵模式</span><br></pre></td></tr></table></figure><p>了解:</p><p>redis–快照</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">快照，主要涉及的是redis的RDB持久化相关的配置</span><br><span class="line"></span><br><span class="line">用如下的指令来让数据保存到磁盘上，即控制RDB快照功能：</span><br><span class="line"></span><br><span class="line">save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line"></span><br><span class="line">举例</span><br><span class="line">save 900 1 //表示每15分钟且至少有1个key改变，就触发一次持久化</span><br><span class="line">save 300 10 //表示每5分钟且至少有10个key改变，就触发一次持久化</span><br><span class="line">save 60 10000 //表示每60秒至少有10000个key改变，就触发一次持久化</span><br><span class="line"></span><br><span class="line">如果想禁用RDB持久化的策略，只要不设置任何save指令就可以，或者给save传入一个空字符串参数也可以达到相同效果，就像这样：</span><br><span class="line"></span><br><span class="line">save ""</span><br></pre></td></tr></table></figure><p>安全:为redis加密：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可以要求redis客户端在向redis-server发送请求之前，先进行密码验证。当你的redis-server处于一个不太可信的网络环境中时，相信你会用上这个功能。由于redis性能非常高，所以每秒钟可以完成多达15万次的密码尝试，所以你最好设置一个足够复杂的密码，否则很容易被黑客破解。</span><br><span class="line"></span><br><span class="line">requirepass 123456</span><br><span class="line"></span><br><span class="line">这里我们通过requirepass将密码设置成“123456”。</span><br></pre></td></tr></table></figure><p>修改了Redis的哨兵配置文件后，先把文件拷贝到从机再启动，否则会出现myid冲突的情况。</p><p>解决方法：将哨兵停掉，哨兵配置文件删除后，重新弄一份新的，然后再启动即可。</p><p>+slave ：取消主观下线<br>-slave ：标记为主观下线</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://l66stbz.github.io/tags/Linux/"/>
    
      <category term="Redis" scheme="https://l66stbz.github.io/tags/Redis/"/>
    
      <category term="RDB" scheme="https://l66stbz.github.io/tags/RDB/"/>
    
      <category term="AOF" scheme="https://l66stbz.github.io/tags/AOF/"/>
    
      <category term="Sentinel" scheme="https://l66stbz.github.io/tags/Sentinel/"/>
    
  </entry>
  
  <entry>
    <title>LVS-NAT-Keepalived</title>
    <link href="https://l66stbz.github.io/2024/08/13/LVS-NAT-Keepalived/"/>
    <id>https://l66stbz.github.io/2024/08/13/LVS-NAT-Keepalived/</id>
    <published>2024-08-13T14:30:00.000Z</published>
    <updated>2024-08-17T07:11:55.370Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="LVS-Nat模式-Keepalived"><a href="#LVS-Nat模式-Keepalived" class="headerlink" title="LVS-Nat模式+Keepalived"></a>LVS-Nat模式+Keepalived</h1><p>四台机器（网络模式都设置为NAT模式）</p><p>两台做lvs-nat模式的keepalived集群:分别添加一块桥接网卡</p><p>两台做RS(Nginx提供静态页面即可)</p><h2 id="两台lvs操作"><a href="#两台lvs操作" class="headerlink" title="两台lvs操作"></a>两台lvs操作</h2><p>都添加一块桥接的网卡</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">lvs的master节点配置文件</span><br><span class="line">[root@lvs-master ~]# yum -y install ipvsadm keepalived</span><br><span class="line">[root@lvs-master ~]# cat /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id lvs-keepalived-master</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens37#桥接网卡名称</span><br><span class="line">    virtual_router_id 80</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">      192.168.31.250/24#注意自己的网段</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.31.250 80 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    nat_mask 255.255.255.0</span><br><span class="line">    protocol TCP</span><br><span class="line">real_server 192.168.62.168 80 &#123;</span><br><span class="line">    weight 1</span><br><span class="line">    inhibit_on_failure</span><br><span class="line">    TCP_CHECK &#123;</span><br><span class="line">        connect_port 80</span><br><span class="line">        connect_timeout 3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">real_server 192.168.62.166 80 &#123;</span><br><span class="line">    weight 1</span><br><span class="line">    inhibit_on_failure</span><br><span class="line">    TCP_CHECK &#123;</span><br><span class="line">    connect_timeout 3</span><br><span class="line">    connect_port 80</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_2 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33#NAT模式网卡名称</span><br><span class="line">    virtual_router_id 100</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 2222</span><br><span class="line">        &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.62.112/24</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@lvs-slave ~]# yum -y install ipvsadm keepalived</span><br><span class="line">[root@lvs-slave ~]# cat /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id lvs-keepalived-slave</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens37</span><br><span class="line">    nopreempt</span><br><span class="line">    virtual_router_id 80</span><br><span class="line">    priority 50</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">    192.168.31.250/24</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.31.250 80 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    nat_mask 255.255.255.0</span><br><span class="line">    protocol TCP</span><br><span class="line">real_server 192.168.62.168 80 &#123;</span><br><span class="line">    weight 1</span><br><span class="line">    inhibit_on_failure</span><br><span class="line">    TCP_CHECK &#123;</span><br><span class="line">        connect_port 80</span><br><span class="line">        connect_timeout 3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">real_server 192.168.62.166 80 &#123;</span><br><span class="line">    weight 1</span><br><span class="line">    inhibit_on_failure</span><br><span class="line">    TCP_CHECK &#123;</span><br><span class="line">    connect_timeout 3</span><br><span class="line">    connect_port 80</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_2 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    nopreempt</span><br><span class="line">    virtual_router_id 100</span><br><span class="line">    priority 50</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 2222</span><br><span class="line">        &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.62.112/24</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">注意开启路由转发</span><br><span class="line">[root@lvs-master ~]# vim /etc/sysctl.conf</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">[root@lvs-master ~]# sysctl -p</span><br><span class="line"></span><br><span class="line">[root@lvs-slave ~]# vim /etc/sysctl.conf</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">[root@lvs-slave ~]# sysctl -p</span><br><span class="line">====================================================================================</span><br><span class="line">启动Keepalived服务</span><br><span class="line">[root@lvs-master ~]# systemctl start keepalived</span><br><span class="line">[root@lvs-slave ~]# systemctl start keepalived</span><br></pre></td></tr></table></figure><h2 id="两台RS-Nginx服务器-操作"><a href="#两台RS-Nginx服务器-操作" class="headerlink" title="两台RS(Nginx服务器)操作"></a>两台RS(Nginx服务器)操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">安装nginx服务器，配置不同的静态页面过程：略</span><br><span class="line"></span><br><span class="line">[root@test-nginx1 ~]# route add default gw 192.168.62.112  dev ens33</span><br><span class="line">[root@test-nginx2 ~]# route add default gw 192.168.62.112  dev ens33</span><br><span class="line">提示：由于临时添加的方式，网关有可能会消失，消失就添加即可。</span><br></pre></td></tr></table></figure><h2 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h2><p>当两个vip在master节点上时，访问浏览器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@lvs-master ~]# ip a</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1587459192373.png" alt="1587459192373"></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1587459211968.png" alt="1587459211968"></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1587459227691.png" alt="1587459227691"></p><p>把master节点的keepalived服务停止，两个vip会漂移到backup节点，再次用浏览器访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@lvs-slave ~]# ip a</span><br></pre></td></tr></table></figure><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1587459343612.png" alt="1587459343612"></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1587459371034.png" alt="1587459371034"></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1587459411871.png" alt="1587459411871"></p><p>总结：如果ip漂移之后，访问不到，</p><p>1.查看backup节点是否开启了路由转发</p><p>2.查看RS上面的网关有没有消失</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://l66stbz.github.io/tags/Linux/"/>
    
      <category term="LVS" scheme="https://l66stbz.github.io/tags/LVS/"/>
    
      <category term="Keepalived" scheme="https://l66stbz.github.io/tags/Keepalived/"/>
    
  </entry>
  
  <entry>
    <title>负载均衡+keepalived</title>
    <link href="https://l66stbz.github.io/2024/08/12/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1+keepalived/"/>
    <id>https://l66stbz.github.io/2024/08/12/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1+keepalived/</id>
    <published>2024-08-12T14:50:00.000Z</published>
    <updated>2024-08-17T07:16:02.921Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="keepalived-高可用实战"><a href="#keepalived-高可用实战" class="headerlink" title="keepalived 高可用实战"></a>keepalived 高可用实战</h1><p>[TOC]</p><h2 id="1、Keepalived相关概念"><a href="#1、Keepalived相关概念" class="headerlink" title="1、Keepalived相关概念"></a>1、Keepalived相关概念</h2><h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p>​    Keepalived是一种用于实现高可用性（High Availability）的软件，主要通过VRRP（Virtual Router Redundancy Protocol）协议来实现IP地址的热备份。它可以在两台或多台服务器之间进行故障切换，确保当一台服务器出现故障时，其他服务器能够接管其服务，从而提高系统的可用性和稳定性。</p><h3 id="1-2-keepalived工作原理"><a href="#1-2-keepalived工作原理" class="headerlink" title="1.2 keepalived工作原理"></a>1.2 keepalived工作原理</h3><p>Keepalived 的核心功能是通过 VRRP（Virtual Router Redundancy Protocol，虚拟路由冗余协议）来实现主备切换和健康检查。以下是 Keepalived 的主要工作原理和流程：</p><ol><li><strong><code>VRRP 协议</code></strong></li></ol><ul><li><strong>VRRP (Virtual Router Redundancy Protocol)</strong> 是一种网络协议，及<strong>虚拟路由冗余协议</strong>。主要用于在多个路由器之间提供冗余。当一台设备出现故障时，其他设备能够迅速接管其工作。</li><li>在 Keepalived 中，VRRP 被用来在多台服务器之间共享一个虚拟 IP 地址（VIP）。这个 VIP 是对外提供服务的地址，客户端会通过这个地址访问服务。</li></ul><ol start="2"><li><strong>主/备角色</strong></li></ol><ul><li><strong>主服务器 (Master)</strong>：在 Keepalived 配置中，通常会有一个主服务器负责持有 VIP。所有的客户端请求都会发送到这个 VIP 上，主服务器处理这些请求。</li><li><strong>备服务器 (Backup)</strong>：备服务器是处于备用状态的服务器，它也在监听 VIP 的状态。如果主服务器出现故障（例如网络断开、服务停止等），备服务器将接管 VIP 并成为新的主服务器。</li></ul><ol start="3"><li><strong>健康检查</strong></li></ol><ul><li>Keepalived 会定期对后端的真实服务器（Real Server）进行健康检查，检查内容可以包括 TCP 连接状态、HTTP 状态码等。</li><li>如果检测到某个后端服务器不可用，Keepalived 会从负载均衡池中移除该服务器，防止继续向其发送请求。当该服务器恢复正常后，Keepalived 会自动将其重新加入负载均衡池。</li></ul><ol start="4"><li><strong>优先级与抢占</strong></li></ol><ul><li>每个参与 VRRP 的服务器都有一个优先级，优先级最高的服务器会成为主服务器。</li><li>如果当前的主服务器出现故障或优先级降低，优先级最高的备服务器将抢占成为新的主服务器，并接管 VIP。</li><li>当原主服务器恢复且优先级高于当前主服务器时，可以重新抢占成为主服务器。</li></ul><ol start="5"><li><strong>VRRP 广播</strong></li></ol><ul><li>主服务器定期向网络中的备服务器发送 VRRP 广播包，告知自己仍然是主服务器。</li><li>如果备服务器在一定时间内没有收到主服务器的广播包，就会认为主服务器故障，并发起选举，确定新的主服务器。</li></ul><h3 id="1-3-VRRP协议"><a href="#1-3-VRRP协议" class="headerlink" title="1.3 VRRP协议"></a>1.3 VRRP协议</h3><p><strong>VRRP（Virtual Router Redundancy Protocol，虚拟路由冗余协议）</strong> 是一种网络协议，用于提高网络的可靠性和可用性。它通过在多台路由器之间共享一个虚拟 IP 地址，实现网关冗余，从而确保当主路由器故障时，备份路由器能够迅速接管，继续为网络设备提供服务。</p><h3 id="1-4-keepalived-的常用模块"><a href="#1-4-keepalived-的常用模块" class="headerlink" title="1.4 keepalived 的常用模块"></a>1.4 keepalived 的常用模块</h3><ol><li><strong>Core模块</strong>：这是Keepalived的核心模块，负责主进程的启动和维护，以及全局配置文件的加载和解析。它是Keepalived工作的基础，确保其他模块能够正常运行。</li><li><strong>Check模块</strong>：这个模块负责健康检查，包括多种检查方式，如Layer3、Layer4和Layer7的检测，分别工作在IP/TCP协议栈的IP层、TCP层和应用层。通过这些层次的检查，Keepalived能够全面监控服务器的运行状态，并在检测到故障时进行隔离。</li><li><strong>VRRP模块</strong>：实现主备路由器之间的冗余。通过 VRRP，Keepalived 可以在多个服务器之间共享一个虚拟 IP 地址（VIP），从而在主服务器故障时自动切换到备份服务器，确保高可用性。</li></ol><h3 id="1-5-脑裂介绍"><a href="#1-5-脑裂介绍" class="headerlink" title="1.5 脑裂介绍"></a>1.5 脑裂介绍</h3><p>​    “脑裂”是一个网络术语，指的是在高可用性集群中，由于网络通信故障或配置不当，导致两个节点同时认为自己是主节点的情况。这种情况会引起服务的中断或不稳定。Keepalived的BACKUP主机在收不到MASTER主机报文后就会切换成为master，如果是它们之间的通信线路出现问题，无法接收到彼此的组播通知，但是两个节点实际都处于正常工作状态，这时两个节点均为master强行绑定虚拟IP，就是脑裂。</p><h3 id="1-6-脑裂的解决方法"><a href="#1-6-脑裂的解决方法" class="headerlink" title="1.6 脑裂的解决方法"></a>1.6 脑裂的解决方法</h3><ol><li>添加更多的检测手段，比如冗余的心跳线（两块网卡做健康监测），ping对方等等。尽量减少”裂脑”发生机会。(治标不治本，只是提高了检测到的概率)；</li><li>做好对裂脑的监控报警（如邮件及手机短信等或值班）.在问题发生时人为第一时间介入仲裁，降低损失；</li><li>爆头，将master停掉。然后检查机器之间的防火墙。网络之间的通信；</li><li>引入仲裁机制：如果集群中存在多个主备节点，可以引入仲裁机制来解决脑裂问题。仲裁机制可以由一个独立的节点或服务来判断哪个节点是主节点，从而避免两个节点同时认为自己是主节点的情况。</li></ol><h3 id="1-7-Keepalived工作流程"><a href="#1-7-Keepalived工作流程" class="headerlink" title="1.7 Keepalived工作流程"></a>1.7 Keepalived工作流程</h3><ol><li><p><strong>启动时</strong>：所有参与 Keepalived 的服务器启动时，都会发送 VRRP 广播包。优先级最高的服务器被选为主服务器，并接管 VIP。</p></li><li><p><strong>正常运行时</strong>：主服务器会持续发送 VRRP 广播包，通知备服务器自己处于正常工作状态。备服务器则处于监听状态，等待主服务器故障。</p></li><li><p><strong>故障切换</strong>：如果主服务器故障，备服务器检测到 VRRP 广播包丢失，将发起新的主服务器选举。优先级最高的备服务器会接管 VIP，成为新的主服务器。</p></li><li><p><strong>恢复抢占</strong>：当原主服务器恢复且优先级高于当前主服务器时，会重新抢占 VIP，恢复为主服务器。</p></li></ol><h2 id="2、Nginx-keepalived实现七层的负载均衡-同类服务"><a href="#2、Nginx-keepalived实现七层的负载均衡-同类服务" class="headerlink" title="2、Nginx+keepalived实现七层的负载均衡(同类服务)"></a>2、Nginx+keepalived实现七层的负载均衡(同类服务)</h2><ol><li><strong>环境准备</strong></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">192.168.174.38ha-server</span><br><span class="line">192.168.174.39ha-backup</span><br><span class="line">192.168.174.40real-server01</span><br><span class="line">192.168.174.41real-server02</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>real serve配置</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 两台 real server主机关闭防火墙和selinux</span></span><br><span class="line">[root@real-server ~]# systemctl disable --now firewalld</span><br><span class="line">[root@real-server ~]# setenforce 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 两台 real server 安装web服务，模拟真实提供服务主机</span></span><br><span class="line">[root@real-server ~]# yum install nginx -y</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; real server01 网站界面配置</span></span><br><span class="line">[root@real-server01 ~]# echo "read server01"  &gt; /usr/share/nginx/html/index.html</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 启动nginx</span></span><br><span class="line">[root@real-server01 ~]# systemctl enable --now nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 测试是否正常访问</span></span><br><span class="line">[root@real-server01 ~]# curl 192.168.174.20</span><br><span class="line">real server01</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; real server02 网站界面配置</span></span><br><span class="line">[root@real-server02 ~]# echo "read server02"  &gt; /usr/share/nginx/html/index.html</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 启动nginx</span></span><br><span class="line">[root@real-server02 ~]# systemctl enable --now nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 测试是否正常访问</span></span><br><span class="line">[root@real-server02 ~]# curl 192.168.174.21</span><br><span class="line">real server02</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">  拓扑结构</span><br><span class="line"></span><br><span class="line">[vip: 20.20.20.20]</span><br><span class="line"></span><br><span class="line">[LB1 Nginx][LB2 Nginx]</span><br><span class="line">192.168.1.2192.168.1.3</span><br><span class="line"></span><br><span class="line">[index][milis] [videos]   [images]    [news]</span><br><span class="line"> 1.11 1.21   1.31  1.41   1.51</span><br><span class="line"> 1.12 1.22   1.32  1.42   1.52</span><br><span class="line"> 1.13 1.23   1.33  1.43   1.53</span><br><span class="line"> ... ...    ...  ...    ...</span><br><span class="line"> /web     /web/milis    /web/videos     /web/images   /web/news</span><br><span class="line">   index.html  index.html     index.html      index.html   index.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 两台负载均衡设备关闭防火墙selinux</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">disable</span> --now firewalld &amp;&amp; setenforce 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 两台负载均衡设备安装nginx作为负载均衡均衡器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install -y nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; ha-master配置</span></span><br><span class="line">[root@ha-master ~]# cd /etc/nginx/conf.d</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 备份原有的nginx配置文件</span></span><br><span class="line">[root@ha-master conf.d]# mv default.conf default.conf.bak</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; master和backup配置负载均衡</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim upstream.conf</span></span><br><span class="line">upstream index &#123;</span><br><span class="line">        server 192.168.174.40:80;</span><br><span class="line">        server 192.168.174.41:80;</span><br><span class="line">&#125; </span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name     localhost;</span><br><span class="line">        access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line">        </span><br><span class="line">        location / &#123;</span><br><span class="line">         proxy_pass http://index;</span><br><span class="line">         proxy_redirect default;</span><br><span class="line">         proxy_set_header Host $http_host;</span><br><span class="line">         proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 两台负载均衡主机测试nginx配置语法是否有问题</span></span><br><span class="line">[root@ha conf.d]# nginx -t</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 两台负载均衡主机启动nginx负载均衡服务</span></span><br><span class="line">[root@ha conf.d]#  systemctl enable --now nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 两台负载均衡主机测试用户请求是否正常转发</span></span><br><span class="line">略</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">`二、Keepalived实现调度器HA`</span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 主/备调度器安装高可用软件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install -y keepalived</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; ha-master节点keepalived配置</span></span><br><span class="line">[root@ha-master ~]# mv /etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf.bak</span><br><span class="line">[root@ha-master ~]# vim /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id directory1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 80</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.174.101/24</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; ha-backup配置</span></span><br><span class="line">[root@nginx-porxy-slave ~]# mv /etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf.bak</span><br><span class="line">[root@nginx-proxy-slave ~]# vim /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id directory2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    nopreempt        # 设置到back上面，不抢占资源(VIP)</span><br><span class="line">    virtual_router_id 80</span><br><span class="line">    priority 50</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.174.101/24</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 启动KeepAlived（主备均启动）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> --now keepalived</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>global_defs</strong>：定义全局模块</p><ul><li><strong>router_id directory1</strong>：用于唯一标识一个路由器或设备实例。区分多个设备或实例，特别是在涉及主备（Master/Backup）配置的场景中。但Master和Backup需设置不同。</li></ul></li><li><p><strong>vrrp_instance VI_1</strong>：定义VRRP 实例，名称为 <code>VI_1</code>。名字可以自定义，但需要确保主节点和备份节点的名称一致。</p></li><li><p><strong>VRRP Instance State (实例状态)</strong></p><ul><li><strong>state MASTER</strong>：定义当前节点的状态为 <code>MASTER</code>，表示主节点。备份节点设置为 <code>BACKUP</code>。</li></ul></li><li><p><strong>Network Interface (网络接口)</strong></p><ul><li><strong>interface ens33</strong>：指定绑定 VIP 的网络接口。VIP 绑定在 <code>ens33</code> 接口上。主备服务器上都存在的物理网卡或虚拟网卡。</li></ul></li><li><p><strong>Virtual Router ID (虚拟路由器 ID)</strong></p><ul><li><strong>virtual_router_id 80</strong>：设置 VRRP 虚拟路由器的 ID，范围是 0-255。主节点和备份节点的 <code>virtual_router_id</code> 必须一致，确保它们在同一个 VRRP 组中。</li></ul></li><li><p><strong>Priority (优先级)</strong></p><ul><li><strong>priority 100</strong>：设置节点的优先级，范围是<code>0-255</code>。数值越高，优先级越高。主节点的优先级较高，备份节点的优先级较低，通常设置为 <code>50</code> 或其他值。优先级决定了当主节点故障时，哪个备份节点会接管 VIP。</li></ul></li><li><p><strong>Advertisement Interval (广播间隔)</strong></p><ul><li><strong>advert_int 1</strong>：定义 VRRP 广播包的时间间隔，以秒为单位。这里设置为 <code>1</code> 秒，表示主节点每秒发送一次心跳信号，通知备份节点主节点在线。</li></ul></li><li><p><strong>Authentication (认证)</strong></p><ul><li>authentication：定义 VRRP 实例的认证方式。<ul><li><strong>auth_type PASS</strong>：指定认证类型为 <code>PASS</code>，密码认证。</li><li><strong>auth_pass 1111</strong>：设置认证密码为 <code>1111</code>。主节点和备份节点的认证密码必须一致。</li></ul></li></ul></li><li><p><strong>Virtual IP Address (虚拟 IP 地址)</strong></p><ul><li><strong>virtual_ipaddress</strong>：定义虚拟 IP 地址（VIP）。 VIP 是整个集群对外暴露的 IP 地址。<ul><li><strong>192.168.174.101/24</strong>：VIP 地址是 <code>192.168.174.101</code>，子网掩码为 <code>/24</code>。这个 VIP 将被绑定到主节点上，当主节点故障时，备份节点会接管该 IP。</li></ul></li></ul></li></ul><ol start="5"><li><p><strong>健康检查机制</strong></p><p>让 Keepalived 以一定时间间隔执行一个外部脚本，脚本的功能是当Nginx失败，则关闭本机的Keepalived，实现VIP漂移。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&gt;&gt;&gt; 配置检测nginx健康检查脚本</span></span><br><span class="line">[root@ha ~]<span class="comment"># vim /etc/keepalived/check_nginx_status.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash        </span></span><br><span class="line">/usr/bin/curl -I http://localhost &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span>    </span><br><span class="line">systemctl stop keepalived</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 脚本添加执行权限</span></span><br><span class="line">[root@ha ~]<span class="comment"># chmod a+x /etc/keepalived/check_nginx_status.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; 两台 keepalived 实例添加配置</span></span><br><span class="line">[root@ha ~]<span class="comment"># vim /etc/keepalived/keepalived.conf</span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id directory1</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">   script <span class="string">"/etc/keepalived/check_nginx_status.sh"</span>  </span><br><span class="line">   interval 5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 80</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.174.100/24</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_nginx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">`注：必须先启动Nginx，再启动keepalived`</span><br><span class="line"></span><br><span class="line">测试访问：  </span><br><span class="line">将keepalived集群的主节点的Nginx服务关闭，查看vip是否漂移，如果漂移，即成功</span><br></pre></td></tr></table></figure><blockquote><ul><li><pre><code class="shell">vrrp_script check_nginx {   # 健康检查配置   script "/etc/keepalived/check_nginx_status.sh"  # 脚本绝对路径   interval 5        # 执行脚本间隔}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;&#96;&#96;shell</span><br><span class="line">  track_script &#123;   # 定义要跟踪的脚本或检查命令。当 Keepalived 检测到这些脚本的返回状态为非零时，会根据 VRRP 实例的配置执行相应的操作，切换到备份节点。</span><br><span class="line">      check_nginx  # 自定义脚本或命令的名称。check_nginx 检查 Nginx 服务是否正在运行。</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></blockquote><h2 id="3、LVS-Director-Keepalived"><a href="#3、LVS-Director-Keepalived" class="headerlink" title="3、LVS_Director + Keepalived"></a>3、LVS_Director + Keepalived</h2><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/1568643540153.png" alt="1568643540153"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">LVS_Director + KeepAlived</span><br><span class="line"></span><br><span class="line">KeepAlived在该项目中的功能：</span><br><span class="line">1. 管理IPVS的路由表（包括对RealServer做健康检查）</span><br><span class="line">2. 实现调度器的HA(高可用)</span><br><span class="line">http://www.keepalived.org</span><br><span class="line"></span><br><span class="line">Keepalived所执行的外部脚本命令建议使用绝对路径</span><br><span class="line">=================================================================================</span><br><span class="line">实施步骤：</span><br><span class="line"><span class="meta">#</span><span class="bash"> 主/备调度器安装软件</span></span><br><span class="line">[root@lvs-keepalived-master ~]# yum -y install ipvsadm keepalived </span><br><span class="line">[root@lvs-keepalived-backup ~]# yum -y install ipvsadm keepalived</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> lvs-Keepalived-master节点配置</span></span><br><span class="line">[root@lvs-keepalived-master ~]# vim /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id lvs-keepalived-master    #辅助改为lvs-backup</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33                #VIP绑定接口</span><br><span class="line">    virtual_router_id 80         #VRID 同一组集群，主备一致          </span><br><span class="line">    priority 100            #本节点优先级，辅助改为50</span><br><span class="line">    advert_int 1            #检查间隔，默认为1s</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.174.101/24</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.174.101 80 &#123;    #LVS配置</span><br><span class="line">delay_loop 3  #启动3个进程</span><br><span class="line">lb_algo rr     #LVS调度算法</span><br><span class="line">lb_kind DR     #LVS集群模式（路由模式）</span><br><span class="line">nat_mask 255.255.255.0</span><br><span class="line">protocol TCP      #健康检查使用的协议</span><br><span class="line">real_server 192.168.174.40 80 &#123;</span><br><span class="line">weight 1</span><br><span class="line">inhibit_on_failure   #当该节点失败时，把权重设置为0，而不是从IPVS中删除</span><br><span class="line">TCP_CHECK &#123;          #健康检查</span><br><span class="line">connect_port 80   #检查的端口</span><br><span class="line">connect_timeout 3  #连接超时的时间</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">real_server 192.168.174.41 80 &#123;</span><br><span class="line">weight 1</span><br><span class="line">inhibit_on_failure</span><br><span class="line">TCP_CHECK &#123;</span><br><span class="line">connect_timeout 3</span><br><span class="line">connect_port 80</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> lvs-keepalived-backup节点配置</span></span><br><span class="line">[root@lvs-keepalived-backup ~]# vim /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id lvs-keepalived-slave</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    nopreempt                    #不抢占VIP</span><br><span class="line">    virtual_router_id 80</span><br><span class="line">    priority 50</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.174.101/24</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.174.101 80 &#123;</span><br><span class="line">delay_loop 3</span><br><span class="line">lb_algo rr</span><br><span class="line">lb_kind DR</span><br><span class="line">nat_mask 255.255.255.0</span><br><span class="line">protocol TCP</span><br><span class="line">real_server 192.168.174.40 80 &#123;</span><br><span class="line">weight 1</span><br><span class="line">inhibit_on_failure</span><br><span class="line">TCP_CHECK &#123;</span><br><span class="line">connect_port 80</span><br><span class="line">connect_timeout 3</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">real_server 192.168.174.41 80 &#123;</span><br><span class="line">weight 1</span><br><span class="line">inhibit_on_failure</span><br><span class="line">TCP_CHECK &#123;</span><br><span class="line">connect_timeout 3</span><br><span class="line">connect_port 80</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动Keepalived（主备均启动）</span></span><br><span class="line">[root@lvs-keepalived-master ~]# systemctl enable  --now keepalived</span><br><span class="line">[root@lvs-keepalived-backup ~]# systemctl enable  --now keepalived</span><br><span class="line"></span><br><span class="line">[root@lvs-keepalived-master ~]# ipvsadm -Ln</span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line"><span class="meta">  -&gt;</span><span class="bash"> RemoteAddress:Port           Forward Weight ActiveConn InActConn</span></span><br><span class="line">TCP  192.168.174.101:80 rr</span><br><span class="line"><span class="meta">  -&gt;</span><span class="bash"> 192.168.174.39:80            Route   1      1          8         </span></span><br><span class="line"><span class="meta">  -&gt;</span><span class="bash"> 192.168.174.40:80            Route   1      0          9 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 所有RS配置(nginx1,nginx2)，配置好网站服务器，测试所有RS</span></span><br><span class="line">[root@real-server01 ~]# yum install -y nginx</span><br><span class="line">[root@real-server02 ~]# yum install -y nginx</span><br><span class="line"></span><br><span class="line">[root@real-server01 ~]# ip addr add dev lo 192.168.246.101/32</span><br><span class="line">[root@real-server02 ~]# ip addr add dev lo 192.168.246.101/32</span><br><span class="line"></span><br><span class="line">[root@real-server01 ~]# echo 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore #忽略arp广播</span><br><span class="line">[root@real-server01 ~]# echo 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce #匹配精确ip地址回包</span><br><span class="line"></span><br><span class="line">[root@real-server02 ~]# echo 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore #忽略arp广播</span><br><span class="line">[root@real-server02 ~]# echo 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce #匹配精确ip地址回包</span><br><span class="line"></span><br><span class="line">[root@real-server01 ~]# echo "web1..." &gt;&gt; /usr/share/nginx/html/index.html</span><br><span class="line">[root@real-server02 ~]# echo "web2..." &gt;&gt; /usr/share/nginx/html/index.html</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 所有real-server节点启动nginx</span></span><br><span class="line">[root@real-server ~]# systemctl enable --now nginx</span><br><span class="line"></span><br><span class="line">LB集群测试</span><br><span class="line">所有分发器和Real Server都正常</span><br><span class="line"></span><br><span class="line">主分发器故障及恢复</span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 80       </span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.174.101/24</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.174.101 80 &#123;</span><br><span class="line">delay_loop 3</span><br><span class="line">lb_algo rr</span><br><span class="line">lb_kind DR</span><br><span class="line">nat_mask 255.255.255.0</span><br><span class="line">protocol TCP</span><br><span class="line">real_server 192.168.174.40 80 &#123;</span><br><span class="line">weight 1</span><br><span class="line">inhibit_on_failure</span><br><span class="line">TCP_CHECK &#123;</span><br><span class="line">connect_port 80</span><br><span class="line">connect_timeout 3</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">real_server 192.168.174.41 80 &#123;</span><br><span class="line">weight 1</span><br><span class="line">inhibit_on_failure</span><br><span class="line">TCP_CHECK &#123;</span><br><span class="line">connect_timeout 3</span><br><span class="line">connect_port 80</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Haproxy-基础"><a href="#Haproxy-基础" class="headerlink" title="Haproxy 基础"></a>Haproxy 基础</h1><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1562943827261.png" alt=" "></p><h2 id="1、Haproxy介绍"><a href="#1、Haproxy介绍" class="headerlink" title="1、Haproxy介绍"></a>1、Haproxy介绍</h2><p>​    HAProxy是一个高性能的开源负载均衡器和代理服务器，使用C语言编写，提供高可用性、负载均衡，以及基于TCP和HTTP的应用程序代理。其特别适用于负载特大的web站点，这些站点通常又需要会话保持或七层处理。HAProxy可以运行在当前的硬件上，支持数以万计的并发连接，并且能够很简单安全地整合进用户当前的架构中，同时保护web服务器不被暴露到网络上。</p><p>HAProxy的工作原理是，当客户端发起连接请求时，它将连接到HAProxy提供的IP地址和端口。HAProxy能够将传入的请求分发到多个后端服务器，并提供各种负载均衡算法，如轮询、加权轮询、最少连接等。同时，HAProxy具有高度可配置性和可定制性，适用于Web应用、数据库负载均衡、应用程序代理等场景，提供高可用性和可伸缩性。</p><p>特点：</p><ul><li>支持tcp/http两种协议层的负载均衡，使得其负载均衡功能非常丰富。</li><li>支持8种左右的负载均衡算法，尤其是在http模式时，有许多非常实在的负载均衡算法，适用各种需求。</li><li>性能非常优秀，基于单进程处理模式（和Nginx类似）让其性能卓越。</li><li>拥有一个功能出色的监控页面，实时了解系统的当前状况。</li><li>功能强大的ACL支持，给用户极大的方便。</li></ul><h2 id="2、Haproxy-实现七层负载实验"><a href="#2、Haproxy-实现七层负载实验" class="headerlink" title="2、Haproxy 实现七层负载实验"></a><strong>2、Haproxy 实现七层负载实验</strong></h2><p><strong><code>流程图：</code></strong></p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408131109708.png" alt="image-20240813110902650"></p><p><strong>实验操作流程：</strong></p><ol><li><strong>主机划分</strong></li></ol><ul><li><pre><code class="ini"><span class="section">[root@haproxy-master ~]</span><span class="comment"># cat /etc/hosts</span>192.168.174.38    haproxy-master192.168.174.39    haproxy-backup192.168.174.40    real-server01 192.168.174.41    real-server02<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. **两台real-server配置**</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;shell</span><br><span class="line">  #&gt;&gt;&gt; 关闭防火墙及selinux</span><br><span class="line">  $ systemctl disable --now firewalld &amp;&amp; setenforce 0</span><br><span class="line">  </span><br><span class="line">  #&gt;&gt;&gt; 安装nginx</span><br><span class="line">  $ yum install -y nginx</span><br><span class="line">  </span><br><span class="line">  #&gt;&gt;&gt; 准备测试文件</span><br><span class="line">  [root@real-server01 ~]# echo nginx01  &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html </span><br><span class="line">  </span><br><span class="line">  [root@real-server02 ~]# echo nginx02 &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html </span><br><span class="line">  </span><br><span class="line">  #&gt;&gt;&gt; 修改配置文件keepalive_timeout时长</span><br><span class="line">  $ vim &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line">  ···</span><br><span class="line">  keepalive_timeout  0;</span><br><span class="line">  ···</span><br><span class="line">  </span><br><span class="line">  #&gt;&gt;&gt; 两台real-server启动nginx</span><br><span class="line">  $ systemctl enable --now nginx</span><br><span class="line">  </span><br><span class="line">  #&gt;&gt;&gt; 测试访问</span><br><span class="line">  略</span><br></pre></td></tr></table></figure></code></pre></li></ul><ol start="3"><li><strong>两台负载均衡服务器配置</strong></li></ol><ul><li><pre><code class="shell"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 安装haproxy</span><span class="meta">$</span><span class="bash"> yum install -y haproxy</span><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 修改Haproxy配置文件</span><span class="meta">$</span><span class="bash"> vim  /etc/haproxy/haproxy.cfg</span>global    log         127.0.0.1 local2 info    pidfile     /var/run/haproxy.pid    maxconn     4000    user        haproxy    group       haproxy    daemon    nbproc 1defaults    mode                    http    log                     global    retries                 3    option                  redispatch    maxconn                 4000    contimeout                5000    clitimeout                50000    srvtimeout                50000listen stats    bind            *:81    stats                       enable    stats uri                  /haproxy    stats auth               qianfeng:123frontend  web    mode                       http      bind                            *:80    option                  httplog    acl html url_reg  -i  \.html$    use_backend httpservers if  html    default_backend    httpserversbackend httpservers    balance     roundrobin    server  http1 192.168.174.40:80 maxconn 2000 weight 1  check inter 1s rise 2 fall 2    server  http2 192.168.174.41:80 maxconn 2000 weight 1  check inter 1s rise 2 fall 2<span class="meta">#</span><span class="bash">&gt;&gt;&gt; 启动haproxy</span><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> --now haproxy</span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**配置文件详细：**</span><br><span class="line"></span><br><span class="line">1. **全局配置**</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;ini</span><br><span class="line">global</span><br><span class="line">    log         127.0.0.1 local2 info</span><br><span class="line">    pidfile     &#x2F;var&#x2F;run&#x2F;haproxy.pid</span><br><span class="line">    maxconn     4000</span><br><span class="line">    user        haproxy</span><br><span class="line">    group       haproxy</span><br><span class="line">    daemon</span><br><span class="line">    nbproc 1</span><br></pre></td></tr></table></figure></code></pre></li></ul><p><strong><code>log 127.0.0.1 local2 info</code></strong>:</p><ul><li>日志记录配置。<code>127.0.0.1</code>表示日志发送到本地的Syslog服务器，<code>local2</code>是Syslog的设施（facility），<code>info</code>是日志级别。</li></ul><p><strong><code>pidfile /var/run/haproxy.pid</code></strong>:</p><ul><li>指定HAProxy进程ID的文件位置。</li></ul><p><strong><code>maxconn 4000</code></strong>:</p><ul><li>设置HAProxy允许的最大并发连接数为4000。超出这个限制的连接将被队列或拒绝。</li></ul><p><strong><code>user haproxy</code> 和 <code>group haproxy</code></strong>:</p><ul><li>指定HAProxy以哪个用户和用户组身份运行，以提高安全性。</li></ul><p><strong><code>daemon</code></strong>:</p><ul><li>使HAProxy以后台守护进程的方式运行，不阻塞终端。</li></ul><p><strong><code>nbproc 1</code></strong>:</p><ul><li>指定HAProxy运行的进程数量。<code>1</code>表示单进程模式。通常情况下，设置为服务器的CPU核心数，以充分利用多核CPU的性能。</li></ul><p>==========================================================================================================================================================================</p><ol start="2"><li><strong>默认配置</strong></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">defaults</span><br><span class="line">    mode                    http</span><br><span class="line">    log                     global</span><br><span class="line">    retries                 3</span><br><span class="line">    option                  redispatch</span><br><span class="line">    maxconn                 4000</span><br><span class="line">    contimeout            5000</span><br><span class="line">    clitimeout            50000</span><br><span class="line">    srvtimeout            50000</span><br></pre></td></tr></table></figure><p><strong><code>mode http</code></strong>:</p><ul><li>设置HAProxy的工作模式为HTTP（7层），可以处理应用层的内容，如URL、头信息等。如果设置为TCP（4层），则只能处理传输层数据。</li></ul><p><strong><code>log global</code></strong>:</p><ul><li>继承全局配置中的日志设置。</li></ul><p><strong><code>retries 3</code></strong>:</p><ul><li>如果连接后端服务器失败，HAProxy会尝试重新连接3次。如果仍然失败，认为该服务器不可用。</li></ul><p><strong><code>option redispatch</code></strong>:</p><ul><li>如果某个服务器不可用，HAProxy会重新分配请求到其他健康的服务器，确保服务的可用性。</li></ul><p><strong><code>maxconn 4000</code></strong>:</p><ul><li>设置每个连接的最大并发数为4000，与全局配置中相同。</li></ul><p><strong><code>contimeout 5000</code></strong>:</p><ul><li>设置HAProxy与后端服务器建立连接的超时时间为5000毫秒（5秒）。</li></ul><p><strong><code>clitimeout 50000</code></strong>:</p><ul><li>设置客户端与HAProxy之间连接的超时时间为50000毫秒（50秒）。</li></ul><p><strong><code>srvtimeout 50000</code></strong>:</p><ul><li>设置后端服务器处理请求的超时时间为50000毫秒（50秒）。</li></ul><p>==========================================================================================================================================================================</p><ol start="3"><li><strong>统计页面配置</strong></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">listen stats</span><br><span class="line">    bind*:81</span><br><span class="line">    stats enable</span><br><span class="line">    stats uri              /haproxy</span><br><span class="line">    stats auth           qianfeng:123</span><br></pre></td></tr></table></figure><p><strong><code>bind *:81</code></strong>:</p><ul><li>监听所有IP地址的81端口，用于访问HAProxy的统计页面。</li></ul><p><strong><code>stats enable</code></strong>:</p><ul><li>启用统计页面。</li></ul><p><strong><code>stats uri /haproxy</code></strong>:</p><ul><li>指定访问统计页面的URI路径，即<code>http://&lt;HAProxy-IP&gt;:81/haproxy</code>。</li></ul><p><strong><code>stats auth qianfeng:123</code></strong>:</p><ul><li>启用用户认证，用户名为<code>qianfeng</code>，密码为<code>123</code>。访问统计页面时需要输入此用户名和密码。</li></ul><p>==========================================================================================================================================================================</p><ol start="4"><li><strong>前端配置</strong></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">frontend web</span><br><span class="line">    mode                   http  </span><br><span class="line">    bind                   *:80  </span><br><span class="line">    option                 httplog</span><br><span class="line">    acl html url_reg  -i  \.html$</span><br><span class="line">    use_backend httpservers if  html </span><br><span class="line">    default_backend    httpservers</span><br></pre></td></tr></table></figure><p><strong><code>frontend web</code></strong>:</p><ul><li>定义前端，名字为<code>web</code>。前端是客户端请求的入口。</li></ul><p><strong><code>mode http</code></strong>:</p><ul><li>设定前端的为HTTP。</li></ul><p><strong><code>bind *:80</code></strong>:</p><ul><li>监听所有IP地址的80端口，所有通过80端口的HTTP请求都会被接收。</li></ul><p><strong><code>option httplog</code></strong>:</p><ul><li>启用HTTP日志格式，记录HTTP相关的详细日志。</li></ul><p><strong><code>acl html url_reg -i \.html$</code></strong>:</p><ul><li>定义一个访问控制列表（ACL），名称为<code>html</code>。规则是匹配以<code>.html</code>结尾的URL（不区分大小写）。</li></ul><p><strong><code>use_backend httpservers if html</code></strong>:</p><ul><li>如果请求的URL匹配<code>html</code> ACL规则，则将请求转发到后端服务器组<code>httpservers</code>。</li></ul><p><strong><code>default_backend httpservers</code></strong>:</p><ul><li>如果请求不匹配任何ACL规则，则使用默认的后端服务器组<code>httpservers</code>。</li></ul><p>==========================================================================================================================================================================</p><ol start="5"><li><strong>后端配置</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">backend httpservers</span><br><span class="line">    balance     roundrobin</span><br><span class="line">    server  http1 192.168.246.162:80 maxconn 2000 weight 1  check inter 1s rise 2 fall 2</span><br><span class="line">    server  http2 192.168.246.163:80 maxconn 2000 weight 1  check inter 1s rise 2 fall 2</span><br></pre></td></tr></table></figure><p><strong><code>backend httpservers</code></strong>:</p><ul><li>定义后端服务器组，名称为<code>httpservers</code>。后端服务器组是用于处理实际请求的服务器。</li></ul><p><strong><code>balance roundrobin</code></strong>:</p><ul><li>负载均衡策略为轮询（Roundrobin），请求会依次分配到每个服务器。</li></ul><p><strong><code>server http1 192.168.246.162:80 maxconn 2000 weight 1 check inter 1s rise 2 fall 2</code></strong>:</p><ul><li>定义一台后端服务器<code>http1</code>：<ul><li><code>192.168.246.162:80</code>: 服务器的IP地址和端口号。</li><li><code>maxconn 2000</code>: 这台服务器允许的最大连接数为2000。</li><li><code>weight 1</code>: 权重为1，影响负载均衡的分配比例，默认情况下权重越高，分配的请求越多。</li><li><code>check</code>: 启用健康检查，定期检查该服务器的状态。</li><li><code>inter 1s</code>: 每1秒进行一次健康检查。</li><li><code>rise 2</code>: 连续2次检查通过后认为服务器健康。</li><li><code>fall 2</code>: 连续2次检查失败后认为服务器不健康。</li></ul></li></ul><p>==========================================================================================================================================================================</p><p><strong>测试主/备(浏览器访问）</strong></p><p><a href="http://192.168.174.38:81/haproxy" target="_blank" rel="noopener">http://192.168.174.38:81/haproxy</a></p><p><img src="https://youngfitfei.oss-cn-beijing.aliyuncs.com/img/1569121374136.png" alt="1569121374136"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">页面主要参数解释</span><br><span class="line">Queue</span><br><span class="line">Cur: current queued requests //当前的队列请求数量</span><br><span class="line">Max：max queued requests     //最大的队列请求数量</span><br><span class="line">Limit：           //队列限制数量</span><br><span class="line"></span><br><span class="line">Errors</span><br><span class="line">Req：request errors             //错误请求</span><br><span class="line">Conn：connection errors          //错误的连接</span><br><span class="line"></span><br><span class="line">Server列表：</span><br><span class="line">Status:状态，包括up(后端机活动)和down(后端机挂掉)两种状态</span><br><span class="line">LastChk:    持续检查后端服务器的时间</span><br><span class="line">Wght: (weight) : 权重</span><br><span class="line">========================================================</span><br><span class="line">2.测试访问</span><br><span class="line">通过访问haparoxy的ip地址访问到后端服务器</span><br><span class="line"><span class="meta">#</span><span class="bash"> curl http://192.168.246.169</span></span><br><span class="line"></span><br><span class="line">如果出现bind失败的报错，执行下列命令</span><br><span class="line">set sebool -P haproxy_connect_any=1</span><br></pre></td></tr></table></figure><h2 id="3、Haprxoy-Keepalived实现高可用"><a href="#3、Haprxoy-Keepalived实现高可用" class="headerlink" title="3、Haprxoy+Keepalived实现高可用"></a>3、Haprxoy+Keepalived实现高可用</h2><ol><li><strong>两台负载均衡服务器安装Keepalived</strong></li></ol><ul><li><pre><code class="bash"><span class="comment">#&gt;&gt;&gt; 安装Keepalived</span>$ yum install -y keepalived<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. **&#96;haproxy-master&#96;节点配置**</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;bash</span><br><span class="line">  #&gt;&gt;&gt; 编写外部检查Haprxoy健康状态脚本</span><br><span class="line">  [root@haproxy-master ~]# vim &#x2F;etc&#x2F;keepalived&#x2F;check_haproxy_status.sh </span><br><span class="line">  #!&#x2F;bin&#x2F;bash</span><br><span class="line">  &#x2F;usr&#x2F;bin&#x2F;curl -I http:&#x2F;&#x2F;localhost &amp;&gt;&#x2F;dev&#x2F;null   </span><br><span class="line">  if [ $? -ne 0 ];then                                                   </span><br><span class="line">          systemctl stop keepalived</span><br><span class="line">  fi</span><br><span class="line">  </span><br><span class="line">  #&gt;&gt;&gt; 脚本添加执行权限</span><br><span class="line">  [root@haproxy-master ~]# chmod +x &#x2F;etc&#x2F;keepalived&#x2F;check_haproxy_status.sh</span><br><span class="line">  </span><br><span class="line">  #&gt;&gt;&gt; 将检查脚本scp至haproxy-backup节点</span><br><span class="line">  [root@haproxy-master ~]# scp check_haproxy_status.sh  192.168.174.39:&#x2F;etc&#x2F;keepalived&#x2F;</span><br><span class="line">  </span><br><span class="line">  #&gt;&gt;&gt; 编写Keepalived配置文件</span><br><span class="line">  [root@haproxy-master ~]# vim &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf</span><br><span class="line">  ! Configuration File for keepalived</span><br><span class="line">  </span><br><span class="line">  global_defs &#123;</span><br><span class="line">     router_id director1</span><br><span class="line">  &#125;</span><br><span class="line">  vrrp_script check_haproxy &#123;</span><br><span class="line">     script &quot;&#x2F;etc&#x2F;keepalived&#x2F;check_haproxy_status.sh&quot; # 脚本绝对路径</span><br><span class="line">     interval 5  # 执行脚本间隔时间</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  vrrp_instance VI_1 &#123;</span><br><span class="line">      state MASTER</span><br><span class="line">      interface ens33</span><br><span class="line">      virtual_router_id 80</span><br><span class="line">      priority 100</span><br><span class="line">      advert_int 1</span><br><span class="line">      authentication &#123;</span><br><span class="line">          auth_type PASS</span><br><span class="line">          auth_pass 1111</span><br><span class="line">      &#125;</span><br><span class="line">      virtual_ipaddress &#123;</span><br><span class="line">          192.168.174.105&#x2F;24   # VIP地址</span><br><span class="line">      &#125;</span><br><span class="line">      track_script &#123;</span><br><span class="line">          check_haproxy</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><ol start="3"><li><strong><code>Haproxy-backup</code>节点配置</strong></li></ol><ul><li><pre><code class="shell"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 脚本添加执行权限</span>[root@haproxy-master ~]# chmod +x /etc/keepalived/check_haproxy_status.sh<span class="meta">#</span><span class="bash">&gt;&gt;&gt; 编写Keepalived配置文件</span>[root@haproxy-backup ~]# vim /etc/keepalived/keepalived.conf ! Configuration File for keepalivedglobal_defs {   router_id directory2}vrrp_script check_haproxy {   script "/etc/keepalived/check_haproxy_status.sh"   interval 5}vrrp_instance VI_1 {    state BACKUP    interface ens33    nopreempt    virtual_router_id 80    priority 50    advert_int 1    authentication {        auth_type PASS        auth_pass 1111    }    virtual_ipaddress {        192.168.174.105/24    }    track_script {        check_haproxy    }}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. **两台负载均衡器配置**</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;shell</span><br><span class="line">  #&gt;&gt;&gt; 重启Keepalived和Haproxy</span><br><span class="line">  $ systemctl restart keepalived haproxy</span><br><span class="line">  </span><br><span class="line">  #&gt;&gt;&gt; 加入开机自启</span><br><span class="line">  $ systemctl enable  keepalived haproxy</span><br></pre></td></tr></table></figure></code></pre></li></ul><ol start="5"><li><strong>查看<code>haproxy-master</code>节点网卡</strong></li></ol><ul><li><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408131137222.png" alt="image-20240813113730090"></li></ul><blockquote><p>提示：</p><p>​    为了保证实验的完整性，需要把<code>haproxy-master</code>节点中的<code>haproxy</code>服务停止，以实现VIP漂移。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@haproxy-master ~]# systemctl stop haproxy</span><br></pre></td></tr></table></figure><p>检查<code>haproxy-backup</code>节点网卡：</p><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408131140536.png" alt="image-20240813114045428"></p></blockquote><h2 id="4、Haproxy日志开启"><a href="#4、Haproxy日志开启" class="headerlink" title="4、Haproxy日志开启"></a>4、Haproxy日志开启</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 编辑rsyslog配置文件</span></span><br><span class="line">[root@ha-proxy-master ~]# vim /etc/rsyslog.conf </span><br><span class="line"><span class="meta">#</span><span class="bash"> Provides UDP syslog reception  <span class="comment">#由于haproxy的日志是用udp传输的,所以要启用rsyslog的udp监听</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">ModLoad imudp</span></span><br><span class="line"><span class="meta">$</span><span class="bash">UDPServerRun 514</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 找到  <span class="comment">#### RULES ####   下面添加</span></span></span><br><span class="line">local2.*                       /var/log/haproxy.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数解释</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$ModLoad</span> imudp：ModLoad加载指定模块。imudp：模块名称，用于从 UDP 网络连接中接收日志消息。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> local2 日志消息的一个分类标识符。在此配置中，local2可能与HAProxy的日志配置相关联。* 是优先级选择器，表示所有优先级的日志消息（从最紧急的emerg到最不重要的debug）都要被记录。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 重启服务</span></span><br><span class="line">[root@ha-proxy-master ~]# systemctl restart rsyslog haproxy</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 查看日志</span></span><br><span class="line">[root@ha-proxy-master ~]# tail -f /var/log/haproxy.log</span><br></pre></td></tr></table></figure><p><img src="https://hjmimage.oss-cn-zhangjiakou.aliyuncs.com/202408131056007.png" alt="image-20240813105637812"></p><h2 id="5、Haproxy-实现四层负载均衡-了解"><a href="#5、Haproxy-实现四层负载均衡-了解" class="headerlink" title="5、Haproxy 实现四层负载均衡(了解)"></a><strong>5、Haproxy 实现四层负载均衡(了解)</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 两台real server安转mariadb  mariadb-server</span></span><br><span class="line">[root@real-server ~]# yum install -y mariadb-server</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 启动mariadb</span></span><br><span class="line">[root@real-server ~]# systemctl enable --now mariadb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 连接数据库</span></span><br><span class="line">[root@real-server ~]# mysql -uroot -p</span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 修改root用户密码和主机地址</span></span><br><span class="line">MariaDB [(none)]&gt; grant all privileges on *.* to root@'%' identified by '123456';</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 刷新权限</span></span><br><span class="line">MariaDB [(none)]&gt; flush privileges;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 退出DB</span></span><br><span class="line">MariaDB [(none)]&gt; exit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;&gt;&gt; 修改两台haproxy服务配置文件</span></span><br><span class="line">[root@ha-proxy-master ~]# cat /etc/haproxy/haproxy.cfg</span><br><span class="line">Haproxy L4</span><br><span class="line">========================================================================</span><br><span class="line">global</span><br><span class="line">    log         127.0.0.1 local2</span><br><span class="line">    pidfile     /var/run/haproxy.pid</span><br><span class="line">    maxconn     4000</span><br><span class="line">    user        haproxy</span><br><span class="line">    group       haproxy</span><br><span class="line">    daemon</span><br><span class="line">    nbproc      1</span><br><span class="line">defaults</span><br><span class="line">    mode                    http</span><br><span class="line">    log                     global</span><br><span class="line">    option                  redispatch</span><br><span class="line">    retries                 3</span><br><span class="line">    maxconn                 4000</span><br><span class="line">    contimeout            5000</span><br><span class="line">    clitimeout            50000</span><br><span class="line">srvtimeout            50000</span><br><span class="line">listen stats</span><br><span class="line">    bind*:81</span><br><span class="line">    stats                   enable</span><br><span class="line">    stats uri              /haproxy</span><br><span class="line">    stats auth           qianfeng:123</span><br><span class="line">frontend  web</span><br><span class="line">    mode                   http</span><br><span class="line">    bind                        *:80</span><br><span class="line">    option                  httplog</span><br><span class="line">    default_backend    httpservers</span><br><span class="line">backend httpservers</span><br><span class="line">    balance     roundrobin</span><br><span class="line">    server  http1 192.168.246.162:80 maxconn 2000 weight 1  check inter 1s rise 2 fall 2</span><br><span class="line">    server  http2 192.168.246.163:80 maxconn 2000 weight 1  check inter 1s rise 2 fall 2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加已下字段    </span></span><br><span class="line">listen mysql</span><br><span class="line">    bind *:3306</span><br><span class="line">    mode tcp</span><br><span class="line">    balance roundrobin</span><br><span class="line">    server mysql1 192.168.246.163:3306 weight 1  check inter 1s rise 2 fall 2</span><br><span class="line">    server mysql2 192.168.246.162:3306 weight 1  check inter 1s rise 2 fall 2</span><br></pre></td></tr></table></figure><p>最后可以在<a href="http://192.168.174.38:81/haproxy上看到下面会多出一行是MySQL的。" target="_blank" rel="noopener">http://192.168.174.38:81/haproxy上看到下面会多出一行是MySQL的。</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://l66stbz.github.io/tags/Linux/"/>
    
      <category term="LVS" scheme="https://l66stbz.github.io/tags/LVS/"/>
    
      <category term="Keepalived" scheme="https://l66stbz.github.io/tags/Keepalived/"/>
    
      <category term="Haproxy" scheme="https://l66stbz.github.io/tags/Haproxy/"/>
    
  </entry>
  
</feed>
